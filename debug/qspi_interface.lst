
/scratch/haotianw/freedom-e-sdk/software/qspi_interface/debug/qspi_interface.elf:     file format elf32-littleriscv
/scratch/haotianw/freedom-e-sdk/software/qspi_interface/debug/qspi_interface.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20400000

Program Header:
    LOAD off    0x00001000 vaddr 0x20400000 paddr 0x20400000 align 2**12
         filesz 0x0000529c memsz 0x0000529c flags rwx
    LOAD off    0x00007000 vaddr 0x80000000 paddr 0x2040529c align 2**12
         filesz 0x000010f4 memsz 0x000010f4 flags rw-
    LOAD off    0x000080f4 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    NULL off    0x00000000 vaddr 0x800010f4 paddr 0x800010f4 align 2**2
         filesz 0x00000000 memsz 0x00002f0c flags rw-
    NULL off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**2
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             00000134  20400000  20400000  00001000  2**0  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             000045f4  20400180  20400180  00001180  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           00000b19  20404774  20404774  00005774  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       0000000c  20405290  20405290  00006290  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .litimalign       00000000  2040529c  2040529c  000080f4  2**0  CONTENTS
  5 .ditimalign       00000000  80000000  80000000  000080f4  2**0  CONTENTS
  6 .lalign           00000000  2040529c  2040529c  000080f4  2**0  CONTENTS
  7 .dalign           00000000  80000000  80000000  000080f4  2**0  CONTENTS
  8 .data             000010f4  80000000  2040529c  00007000  2**3  CONTENTS, ALLOC, LOAD, DATA
  9 .bss              00000038  800010f4  800010f4  00000000  2**2  ALLOC
 10 .stack            00000400  8000112c  8000112c  00000000  2**0  ALLOC
 11 .heap             00002ad4  8000152c  8000152c  00000000  2**0  ALLOC
 12 .debug_info       0000f914  00000000  00000000  000080f4  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev     0000289d  00000000  00000000  00017a08  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges    000006d0  00000000  00000000  0001a2a8  2**3  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges     00000518  00000000  00000000  0001a978  2**3  CONTENTS, READONLY, DEBUGGING
 16 .debug_line       00005959  00000000  00000000  0001ae90  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_str        00002e54  00000000  00000000  000207e9  2**0  CONTENTS, READONLY, DEBUGGING
 18 .comment          00000011  00000000  00000000  0002363d  2**0  CONTENTS, READONLY
 19 .riscv.attributes 00000029  00000000  00000000  0002364e  2**0  CONTENTS, READONLY
 20 .debug_frame      00001384  00000000  00000000  00023678  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20400000 l    d  .init	00000000 .init
20400180 l    d  .text	00000000 .text
20404774 l    d  .rodata	00000000 .rodata
20405290 l    d  .init_array	00000000 .init_array
2040529c l    d  .litimalign	00000000 .litimalign
80000000 l    d  .ditimalign	00000000 .ditimalign
2040529c l    d  .lalign	00000000 .lalign
80000000 l    d  .dalign	00000000 .dalign
80000000 l    d  .data	00000000 .data
800010f4 l    d  .bss	00000000 .bss
8000112c l    d  .stack	00000000 .stack
8000152c l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libriscv__mmachine__sifive-hifive1_a-entry.o
20401b70 l       .text	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 crt0.o
2040527c l       .rodata	00000000 argv
20405280 l       .rodata	00000000 envp
20405284 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 qspi_interface.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
204002a2 l     F .text	00000004 __fp_lock
204002a6 l     F .text	0000006a std
2040031a l     F .text	00000004 __fp_unlock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 spi.c
00000000 l    df *ABS*	00000000 fixed-clock.c
00000000 l    df *ABS*	00000000 riscv,clint0.c
00000000 l    df *ABS*	00000000 riscv,cpu.c
00000000 l    df *ABS*	00000000 riscv,plic0.c
00000000 l    df *ABS*	00000000 sifive,fe310-g000,hfrosc.c
00000000 l    df *ABS*	00000000 sifive,fe310-g000,hfxosc.c
00000000 l    df *ABS*	00000000 sifive,fe310-g000,pll.c
204049fc l     O .rodata	00000880 pll_configs
2040322a l     F .text	0000004e get_pll_config_freq
20403278 l     F .text	00000028 metal_sifive_fe310_g000_pll_init
204034a0 l     F .text	000000a8 find_closest_config
20403548 l     F .text	00000132 configure_pll
204037ba l     F .text	0000002a use_hfxosc
00000000 l    df *ABS*	00000000 sifive,fe310-g000,prci.c
00000000 l    df *ABS*	00000000 sifive,gpio0.c
00000000 l    df *ABS*	00000000 sifive,spi0.c
204039ee l     F .text	00000224 configure_spi
20403de4 l     F .text	00000046 pre_rate_change_callback
20403e2a l     F .text	00000030 post_rate_change_callback
00000000 l    df *ABS*	00000000 sifive,uart0.c
20404068 l     F .text	000000d0 pre_rate_change_callback
20404138 l     F .text	0000002e post_rate_change_callback
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
800010ec l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
2040473e l     F .text	00000022 metal_tty_init
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
80000000 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
2040529c l       .init_array	00000000 __init_array_end
2040528d l       .init_array	00000000 __preinit_array_end
20405290 l       .init_array	00000000 __init_array_start
2040528d l       .init_array	00000000 __preinit_array_start
20404854  w    O .rodata	0000001c __metal_driver_vtable_sifive_uart0
20401b3e g     F .text	00000032 _isatty_r
20400212 g     F .text	00000070 _puts_r
2040199c g     F .text	00000036 _lseek_r
204041f8 g     F .text	00000026 metal_clock_get_rate_hz
20403fd0 g     F .text	00000098 __metal_driver_sifive_uart0_set_baud_rate
2040249e g     F .text	00000038 __metal_valid_interrupt_id
800018b8 g       .data	00000000 __global_pointer$
20402d18 g     F .text	0000002c __metal_plic0_complete_interrupt
204026ba g     F .text	00000148 __metal_driver_riscv_cpu_controller_interrupt_register
20401342 g     F .text	00000036 __sseek
2040036c g     F .text	0000004e __sinit
2040031e g     F .text	00000046 __sfmoreglue
20400f00 g     F .text	00000002 __malloc_unlock
80000ffc  w    O .data	00000030 __metal_dt_serial_10013000
204047f0  w    O .rodata	0000001c __metal_driver_vtable_riscv_clint0
80001130 g       .bss	00000000 metal_segment_bss_target_end
20401c3a g     F .text	00000076 __metal_clint0_mtime_get
20402c90 g     F .text	00000028 __metal_driver_cpu_get_instruction_length
20400e0c g     F .text	0000004a memmove
20400364 g     F .text	00000008 _cleanup
80000fd8  w    O .data	00000024 __metal_dt_spi_10014000
20403836 g     F .text	00000040 __metal_driver_sifive_gpio0_disable_input
2040450e g     F .text	0000000c __errno
20401cb0 g     F .text	00000058 __metal_clint0_mtime_set
80000000 g       .ditimalign	00000000 metal_segment_itim_target_start
800010f4 g       .bss	00000000 metal_segment_bss_target_start
20401b0a g     F .text	00000034 _fstat_r
20402856 g     F .text	00000062 __metal_driver_riscv_cpu_controller_interrupt_enable_vector
80001128 g     O .bss	00000004 errno
2040334a g     F .text	00000156 __metal_driver_sifive_fe310_g000_pll_get_rate_hz
204012f0 g     F .text	00000004 __seofread
00000400 g       *ABS*	00000000 __stack_size
20404282 g     F .text	0000002e metal_clock_register_pre_rate_change_callback
20403c12 g     F .text	00000110 __metal_driver_sifive_spi0_transfer
2040480c  w    O .rodata	0000001c __metal_driver_vtable_riscv_plic0
204047b0  w    O .rodata	00000040 __metal_driver_vtable_cpu
20404348 g     F .text	0000002e metal_uart_set_baud_rate
20404166 g     F .text	00000092 __metal_driver_sifive_uart0_init
20400d56 g     F .text	000000b6 memcpy
20404870  w    O .rodata	0000000c __metal_driver_vtable_sifive_fe310_g000_pll
8000152c g       .heap	00000000 metal_segment_heap_target_start
20400310 g     F .text	0000000a _cleanup_r
8000088c  w    O .data	00000010 __metal_dt_cpu_0
2040367a g     F .text	00000140 __metal_driver_sifive_fe310_g000_pll_set_rate_hz
20400282 g     F .text	0000000e puts
20402120 g     F .text	00000018 __metal_default_exception_handler
20404398 g     F .text	00000026 _fstat
20402d6e g     F .text	00000048 __metal_plic0_set_priority
20401fb6 g     F .text	0000002c __metal_driver_cpu_get
20404794  w    O .rodata	0000001c __metal_driver_vtable_riscv_cpu_intc
800010fc g     O .bss	00000004 __malloc_top_pad
20402014 g     F .text	00000018 __metal_interrupt_global_disable
20400486 g     F .text	000002dc __sfvwrite_r
2040128c g     F .text	00000032 _sbrk_r
20402578 g     F .text	0000004e __metal_exception_register
204030fc g     F .text	00000042 __metal_driver_riscv_plic0_disable
20401ad4 g     F .text	00000036 _read_r
20402a90 g     F .text	0000001a __metal_driver_cpu_timer_controller_interrupt
2040389a g     F .text	0000003a __metal_driver_sifive_gpio0_enable_output
204014c2 g     F .text	00000086 _fclose_r
2040290e g     F .text	00000072 __metal_driver_cpu_timer_get
204016e0 g     F .text	00000022 fflush
800010f8 g     O .bss	00000004 __malloc_max_sbrked_mem
20402150 g     F .text	00000064 __metal_default_sw_handler
204042b0 g     F .text	0000002e metal_clock_register_post_rate_change_callback
8000084c  w    O .data	0000001c __metal_dt_clock_2
20403eee g     F .text	00000020 __metal_driver_sifive_uart0_interrupt_controller
204043be g     F .text	00000020 _isatty
2040394e g     F .text	0000003a __metal_driver_sifive_gpio0_output_toggle
204028b8 g     F .text	0000003a __metal_driver_riscv_cpu_controller_interrupt_disable_vector
800010c4  w    O .data	00000008 __metal_driver_vtable_fixed_clock
800010f0 g     O .data	00000004 _global_impure_ptr
20400f02 g     F .text	0000038a _realloc_r
20404570 g     F .text	0000006e __libc_init_array
204038d4 g     F .text	0000003a __metal_driver_sifive_gpio0_output_set
20403208 g     F .text	00000022 __metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz
20402802 g     F .text	0000002a __metal_driver_riscv_cpu_controller_interrupt_enable
20404432 g     F .text	00000064 _sbrk
20404844  w    O .rodata	00000010 __metal_driver_vtable_sifive_spi0
2040045e g     F .text	00000014 __fp_lock_all
20400132 g     F .init	00000002 _init
20402076 g     F .text	0000001a __metal_interrupt_timer_disable
20402b56 g     F .text	0000006a __metal_driver_cpu_clear_sw_ipi
20404828  w    O .rodata	0000001c __metal_driver_vtable_sifive_gpio0
20403988 g     F .text	00000066 __metal_driver_sifive_gpio0_enable_io
20404536 g     F .text	0000003a __libc_fini_array
80001074  w    O .data	00000034 __metal_dt_clock_4
20402ad8 g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
20401b9e g     F .text	0000002e metal_spi_set_baud_rate
80000000 g       .dalign	00000000 metal_segment_data_target_start
204020c8 g     F .text	0000002c __metal_interrupt_local_enable
204046ee g     F .text	00000050 metal_tty_putc
20402e40 g     F .text	00000018 __metal_plic0_default_handler
80000830  w    O .data	0000001c __metal_dt_clock_0
00000400 g       *ABS*	00000000 __heap_size
20401b72 g     F .text	0000002c metal_spi_init
204020ac g     F .text	0000001c __metal_interrupt_external_disable
20403f0e g     F .text	00000024 __metal_driver_sifive_uart0_get_interrupt_id
20403d22 g     F .text	00000020 __metal_driver_sifive_spi0_get_baud_rate
800010e8  w    O .data	00000004 __metal_spi_table
204028f2 g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
204025c6 g     F .text	000000f4 __metal_driver_riscv_cpu_controller_interrupt_init
20403d42 g     F .text	000000a2 __metal_driver_sifive_spi0_set_baud_rate
20402c48 g     F .text	00000048 __metal_driver_cpu_exception_register
2040202c g     F .text	00000018 __metal_interrupt_software_enable
20400456 g     F .text	00000002 __sfp_lock_acquire
20400d3c g     F .text	0000001a memchr
204017cc g     F .text	000001d0 _free_r
20404640 g     F .text	000000ae __call_exitprocs
20400054 g     F .init	00000000 _start
800010bc g     O .data	00000004 __malloc_sbrk_base
2040313e g     F .text	0000005c __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz
204043de g     F .text	0000002a _lseek
20402c28 g     F .text	00000020 __metal_driver_cpu_controller_interrupt
20402cb8 g     F .text	0000001e __metal_driver_cpu_get_exception_pc
20402090 g     F .text	0000001c __metal_interrupt_external_enable
204045de g     F .text	00000062 __register_exitproc
20403f32 g     F .text	00000036 __metal_driver_sifive_uart0_putc
20402ee2 g     F .text	0000011a __metal_driver_riscv_plic0_init
204030ba g     F .text	00000042 __metal_driver_riscv_plic0_enable
20403876 g     F .text	00000024 __metal_driver_sifive_gpio0_output
80001100 g     O .bss	00000028 __malloc_current_mallinfo
20401fe2 g     F .text	0000001a __metal_myhart_id
20401bcc g     F .text	0000002c metal_spi_get_device
2040282c g     F .text	0000002a __metal_driver_riscv_cpu_controller_interrupt_disable
20401490 g     F .text	00000032 _close_r
20403fb0 g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
20401d86 g     F .text	00000062 __metal_driver_riscv_clint0_register
80000868  w    O .data	00000024 __metal_dt_clint_2000000
204013b4 g     F .text	000000dc __swsetup_r
204003ba g     F .text	0000009c __sfp
80000428 g     O .data	00000408 __malloc_av_
2040045c g     F .text	00000002 __sinit_lock_release
2040421e g     F .text	00000064 metal_clock_set_rate_hz
204012be g     F .text	00000032 __sread
20400efe g     F .text	00000002 __malloc_lock
204016b0 g     F .text	00000030 _fflush_r
204037e4 g     F .text	00000024 __metal_driver_sifive_fe310_g000_prci_get_reg
204024d6 g     F .text	000000a2 __metal_local_interrupt_enable
20401e94 g     F .text	00000122 __metal_driver_riscv_clint0_command_request
20400e56 g     F .text	000000a8 memset
20400180 g     F .text	00000092 main
800010f4 g     O .bss	00000004 __malloc_max_total_mem
800010f4 g       .bss	00000000 metal_segment_data_target_end
800010d4  w    O .data	00000008 __metal_driver_vtable_sifive_fe310_g000_hfrosc
20402aec g     F .text	0000006a __metal_driver_cpu_set_sw_ipi
20402bc0 g     F .text	00000068 __metal_driver_cpu_get_msip
204042de g     F .text	0000000e metal_shutdown
80000000 g       .init_array	00000000 metal_segment_itim_target_end
20402cd6 g     F .text	00000020 __metal_driver_cpu_set_exception_pc
20402cf6 g     F .text	00000022 __metal_plic0_claim_interrupt
20401378 g     F .text	00000006 __sclose
20401548 g     F .text	0000000e fclose
20400830 g     F .text	0000050c _malloc_r
8000152c g       .stack	00000000 metal_segment_stack_end
20400762 g     F .text	00000062 _fwalk
800010a8  w    O .data	0000000c __metal_dt_prci_10008000
20402980 g     F .text	00000034 __metal_driver_cpu_timebase_get
20401702 g     F .text	000000ca _malloc_trim_r
20400000 g       .init	00000000 _enter
204031bc g     F .text	0000004c __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz
2040529c g       .litimalign	00000000 metal_segment_itim_source_start
800010e4  w    O .data	00000004 __metal_cpu_table
20400132 g     F .init	00000002 _fini
20401ffc g     F .text	00000018 __metal_interrupt_global_enable
20404504 g     F .text	0000000a atexit
2040137e g     F .text	00000036 _write_r
2040205c g     F .text	0000001a __metal_interrupt_timer_enable
20403f68 g     F .text	00000048 __metal_driver_sifive_uart0_getc
20401e3e g     F .text	00000056 __metal_driver_riscv_clint0_disable
800010b8 g     O .data	00000004 _impure_ptr
20402a22 g     F .text	0000006e __metal_driver_cpu_mtimecmp_set
20401556 g     F .text	0000015a __sflush_r
204032a0 g     F .text	000000aa __metal_driver_sifive_fe310_g000_pll_init
20400472 g     F .text	00000014 __fp_unlock_all
20403808 g     F .text	0000002e __metal_driver_sifive_fe310_g000_prci_set_reg
20401bf8 g     F .text	00000020 __metal_driver_fixed_clock_get_rate_hz
20401de8 g     F .text	00000056 __metal_driver_riscv_clint0_enable
2040529c g       .lalign	00000000 metal_segment_data_source_start
80004000 g       .heap	00000000 metal_segment_heap_target_end
204023f8 g     F .text	000000a6 __metal_controller_interrupt_vector
80001050  w    O .data	00000024 __metal_dt_clock_1
80000c60  w    O .data	00000320 __metal_dt_interrupt_controller_c000000
204019d2 g     F .text	00000064 __swhatbuf_r
2040390e g     F .text	00000040 __metal_driver_sifive_gpio0_output_clear
800008a0  w    O .data	000003c0 __metal_dt_interrupt_controller
204021b4 g     F .text	00000066 __metal_default_timer_handler
20404496 g     F .text	0000006e _write
20402e58 g     F .text	0000008a __metal_plic0_handler
204012f4 g     F .text	0000004e __swrite
800010c0 g     O .data	00000004 __malloc_trim_threshold
2040451a g     F .text	0000001c exit
204007c4 g     F .text	0000006c _fwalk_reent
20401c18 g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
20400458 g     F .text	00000002 __sfp_lock_release
80000f80  w    O .data	00000058 __metal_dt_gpio_10012000
20402138 g     F .text	00000018 __metal_default_interrupt_handler
20404316 g     F .text	00000032 metal_uart_putc
20404408 g     F .text	0000002a _read
20402280 g     F .text	0000014a __metal_exception_handler
20404760 g     F .text	00000014 _exit
204029b4 g     F .text	0000006e __metal_driver_cpu_mtime_get
20401a36 g     F .text	0000009e __smakebuf_r
20400290 g     F .text	00000012 strlen
20403e5a g     F .text	00000094 __metal_driver_sifive_spi0_init
800010dc  w    O .data	00000008 __metal_driver_vtable_sifive_fe310_g000_hfxosc
20401d08 g     F .text	0000007e __metal_driver_riscv_clint0_init
20402aaa g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
20402db6 g     F .text	0000008a __metal_plic0_enable
2040319a g     F .text	00000022 __metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz
20402abe g     F .text	0000001a __metal_driver_cpu_sw_controller_interrupt
204020f4 g     F .text	0000002c __metal_interrupt_local_disable
20402044 g     F .text	00000018 __metal_interrupt_software_disable
204042ec g     F .text	0000002a metal_uart_init
8000102c  w    O .data	00000024 __metal_dt_clock_3
20402d44 g     F .text	0000002a __metal_plic0_set_threshold
20404376 g     F .text	00000022 _close
800010cc  w    O .data	00000008 __metal_driver_vtable_sifive_fe310_g000_prci
2040045a g     F .text	00000002 __sinit_lock_acquire
20402ffc g     F .text	000000be __metal_driver_riscv_plic0_register



Disassembly of section .init:

20400000 <_enter>:
_enter():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20400000:	5fc02197          	auipc	gp,0x5fc02
20400004:	8b818193          	addi	gp,gp,-1864 # 800018b8 <__global_pointer$>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20400008:	00002297          	auipc	t0,0x2
2040000c:	b6828293          	addi	t0,t0,-1176 # 20401b70 <early_trap_vector>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20400010:	30529073          	csrw	mtvec,t0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/entry.S:38
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20400014:	dfc00117          	auipc	sp,0xdfc00
20400018:	fec10113          	addi	sp,sp,-20 # 0 <__heap_size-0x400>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/entry.S:47
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
2040001c:	dfc00097          	auipc	ra,0xdfc00
20400020:	fe408093          	addi	ra,ra,-28 # 0 <__heap_size-0x400>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/entry.S:48
    beqz ra, 1f
20400024:	00008363          	beqz	ra,2040002a <_enter+0x2a>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/entry.S:49
    jalr ra
20400028:	9082                	jalr	ra
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/entry.S:55
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
2040002a:	f1402573          	csrr	a0,mhartid
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/entry.S:56
    li a1, 0
2040002e:	4581                	li	a1,0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/entry.S:57
    li a2, 0
20400030:	4601                	li	a2,0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/entry.S:58
    call _start
20400032:	200d                	jal	20400054 <_start>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/entry.S:63

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20400034:	dfc00097          	auipc	ra,0xdfc00
20400038:	fcc08093          	addi	ra,ra,-52 # 0 <__heap_size-0x400>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/entry.S:64
    beqz ra, 1f
2040003c:	00008363          	beqz	ra,20400042 <_enter+0x42>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/entry.S:65
    jalr ra
20400040:	9082                	jalr	ra
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/entry.S:70
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
20400042:	00000297          	auipc	t0,0x0
20400046:	00c28293          	addi	t0,t0,12 # 2040004e <_enter+0x4e>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/entry.S:71
     csrw mtvec, t0
2040004a:	30529073          	csrw	mtvec,t0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/entry.S:73
1:
     lw t1, 0(x0)
2040004e:	00002303          	lw	t1,0(zero) # 0 <__heap_size-0x400>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/entry.S:74
     j 1b
20400052:	bff5                	j	2040004e <_enter+0x4e>

20400054 <_start>:
_start():
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
20400054:	8406                	mv	s0,ra
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20400056:	5fc02197          	auipc	gp,0x5fc02
2040005a:	86218193          	addi	gp,gp,-1950 # 800018b8 <__global_pointer$>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, metal_segment_stack_end
2040005e:	c7418113          	addi	sp,gp,-908 # 8000152c <metal_segment_stack_end>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:52
  andi sp, sp, -16
20400062:	ff017113          	andi	sp,sp,-16
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:57

  /* For now we only run on single-hart systems and assume that we're always on
   * hart 0. */
1:
  bnez a0, 1b
20400066:	e101                	bnez	a0,20400066 <_start+0x12>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
20400068:	00005297          	auipc	t0,0x5
2040006c:	23428293          	addi	t0,t0,564 # 2040529c <__init_array_end>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:67
  la t1, metal_segment_data_target_start
20400070:	5fc00317          	auipc	t1,0x5fc00
20400074:	f9030313          	addi	t1,t1,-112 # 80000000 <metal_segment_itim_target_end>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:68
  la t2, metal_segment_data_target_end
20400078:	5fc01397          	auipc	t2,0x5fc01
2040007c:	07c38393          	addi	t2,t2,124 # 800010f4 <__malloc_max_total_mem>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:70

  beq t0, t1, 2f
20400080:	00628c63          	beq	t0,t1,20400098 <_start+0x44>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:71
  bge t1, t2, 2f
20400084:	00735a63          	bge	t1,t2,20400098 <_start+0x44>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:74

1:
  lw   a0, 0(t0)
20400088:	0002a503          	lw	a0,0(t0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
  addi t0, t0, 4
2040008c:	0291                	addi	t0,t0,4
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  sw   a0, 0(t1)
2040008e:	00a32023          	sw	a0,0(t1)
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  addi t1, t1, 4
20400092:	0311                	addi	t1,t1,4
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:78
  blt  t1, t2, 1b
20400094:	fe734ae3          	blt	t1,t2,20400088 <_start+0x34>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:82
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
20400098:	00005297          	auipc	t0,0x5
2040009c:	20428293          	addi	t0,t0,516 # 2040529c <__init_array_end>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:83
  la t1, metal_segment_itim_target_start
204000a0:	5fc00317          	auipc	t1,0x5fc00
204000a4:	f6030313          	addi	t1,t1,-160 # 80000000 <metal_segment_itim_target_end>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:84
  la t2, metal_segment_itim_target_end
204000a8:	5fc00397          	auipc	t2,0x5fc00
204000ac:	f5838393          	addi	t2,t2,-168 # 80000000 <metal_segment_itim_target_end>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:86

  beq t0, t1, 2f
204000b0:	00628c63          	beq	t0,t1,204000c8 <_start+0x74>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:87
  bge t1, t2, 2f
204000b4:	00735a63          	bge	t1,t2,204000c8 <_start+0x74>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:90

1:
  lw   a0, 0(t0)
204000b8:	0002a503          	lw	a0,0(t0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:91
  addi t0, t0, 4
204000bc:	0291                	addi	t0,t0,4
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:92
  sw   a0, 0(t1)
204000be:	00a32023          	sw	a0,0(t1)
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:93
  addi t1, t1, 4
204000c2:	0311                	addi	t1,t1,4
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:94
  blt  t1, t2, 1b
204000c4:	fe734ae3          	blt	t1,t2,204000b8 <_start+0x64>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:98
2:

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
204000c8:	5fc01317          	auipc	t1,0x5fc01
204000cc:	02c30313          	addi	t1,t1,44 # 800010f4 <__malloc_max_total_mem>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
  la t2, metal_segment_bss_target_end
204000d0:	5fc01397          	auipc	t2,0x5fc01
204000d4:	06038393          	addi	t2,t2,96 # 80001130 <metal_segment_bss_target_end>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:101

  bge t1, t2, 2f
204000d8:	00735763          	bge	t1,t2,204000e6 <_start+0x92>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:104

1:
  sw   x0, 0(t1)
204000dc:	00032023          	sw	zero,0(t1)
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:105
  addi t1, t1, 4
204000e0:	0311                	addi	t1,t1,4
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:106
  blt  t1, t2, 1b
204000e2:	fe734de3          	blt	t1,t2,204000dc <_start+0x88>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:112
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
204000e6:	c211                	beqz	a2,204000ea <_start+0x96>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:113
  jalr a2
204000e8:	9602                	jalr	a2
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:117
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
204000ea:	00004517          	auipc	a0,0x4
204000ee:	44c50513          	addi	a0,a0,1100 # 20404536 <__libc_fini_array>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:118
  call atexit
204000f2:	412040ef          	jal	ra,20404504 <atexit>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:119
  call __libc_init_array
204000f6:	47a040ef          	jal	ra,20404570 <__libc_init_array>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:122

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
204000fa:	301027f3          	csrr	a5,misa
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:123
  li   a4, 0x10028
204000fe:	00010737          	lui	a4,0x10
20400102:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xfc28>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
  and  a5, a5, a4
20400106:	8ff9                	and	a5,a5,a4
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:125
  beqz a5, 1f
20400108:	c799                	beqz	a5,20400116 <_start+0xc2>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:126
  csrr a5, mstatus
2040010a:	300027f3          	csrr	a5,mstatus
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:127
  lui  a4, 0x2
2040010e:	6709                	lui	a4,0x2
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  or   a5, a5, a4
20400110:	8fd9                	or	a5,a5,a4
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:129
  csrw mstatus, a5
20400112:	30079073          	csrw	mstatus,a5
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:135
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20400116:	4505                	li	a0,1
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:136
  la a1, argv  /* argv = {"libgloss", NULL} */
20400118:	00005597          	auipc	a1,0x5
2040011c:	16458593          	addi	a1,a1,356 # 2040527c <argv>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:137
  la a2, envp  /* envp = {NULL} */
20400120:	00005617          	auipc	a2,0x5
20400124:	16060613          	addi	a2,a2,352 # 20405280 <envp>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:138
  call main
20400128:	28a1                	jal	20400180 <main>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:144

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
2040012a:	3f0040ef          	jal	ra,2040451a <exit>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:149

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
2040012e:	80a2                	mv	ra,s0
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:150
  ret
20400130:	8082                	ret

20400132 <_fini>:
_init():
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/crt0.S:162
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
20400132:	8082                	ret

Disassembly of section .text:

20400180 <main>:
main():
/scratch/haotianw/freedom-e-sdk/software/qspi_interface/qspi_interface.c:4
#include <stdio.h>
#include <metal/spi.h>

int main() {
20400180:	7179                	addi	sp,sp,-48
20400182:	d606                	sw	ra,44(sp)
20400184:	d422                	sw	s0,40(sp)
20400186:	1800                	addi	s0,sp,48
/scratch/haotianw/freedom-e-sdk/software/qspi_interface/qspi_interface.c:6
	/* Iterate over a few device numbers to select the first available SPI device */
	int number_of_tries = 0;
20400188:	fe042623          	sw	zero,-20(s0)
/scratch/haotianw/freedom-e-sdk/software/qspi_interface/qspi_interface.c:8
	struct metal_spi *spi;
	while ((spi = metal_spi_get_device(number_of_tries)) == NULL && number_of_tries < 10) {
2040018c:	a031                	j	20400198 <main+0x18>
/scratch/haotianw/freedom-e-sdk/software/qspi_interface/qspi_interface.c:9
		number_of_tries++;
2040018e:	fec42783          	lw	a5,-20(s0)
20400192:	0785                	addi	a5,a5,1
20400194:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/software/qspi_interface/qspi_interface.c:8
	while ((spi = metal_spi_get_device(number_of_tries)) == NULL && number_of_tries < 10) {
20400198:	fec42503          	lw	a0,-20(s0)
2040019c:	231010ef          	jal	ra,20401bcc <metal_spi_get_device>
204001a0:	fea42423          	sw	a0,-24(s0)
204001a4:	fe842783          	lw	a5,-24(s0)
204001a8:	e791                	bnez	a5,204001b4 <main+0x34>
/scratch/haotianw/freedom-e-sdk/software/qspi_interface/qspi_interface.c:8 (discriminator 1)
204001aa:	fec42703          	lw	a4,-20(s0)
204001ae:	47a5                	li	a5,9
204001b0:	fce7dfe3          	bge	a5,a4,2040018e <main+0xe>
/scratch/haotianw/freedom-e-sdk/software/qspi_interface/qspi_interface.c:13
	}
	
	/* Report that no SPI device can be found. */
	if (spi == NULL) {
204001b4:	fe842783          	lw	a5,-24(s0)
204001b8:	eb81                	bnez	a5,204001c8 <main+0x48>
/scratch/haotianw/freedom-e-sdk/software/qspi_interface/qspi_interface.c:14
		printf("Failed to get spi device\n");
204001ba:	204047b7          	lui	a5,0x20404
204001be:	77478513          	addi	a0,a5,1908 # 20404774 <_exit+0x14>
204001c2:	20c1                	jal	20400282 <puts>
/scratch/haotianw/freedom-e-sdk/software/qspi_interface/qspi_interface.c:15
		return 1;
204001c4:	4785                	li	a5,1
204001c6:	a089                	j	20400208 <main+0x88>
/scratch/haotianw/freedom-e-sdk/software/qspi_interface/qspi_interface.c:19
	}
	
	/* Initialize SPI device to 100,000 baud rate */
	metal_spi_init(spi, 100000);
204001c8:	67e1                	lui	a5,0x18
204001ca:	6a078593          	addi	a1,a5,1696 # 186a0 <__heap_size+0x182a0>
204001ce:	fe842503          	lw	a0,-24(s0)
204001d2:	1a1010ef          	jal	ra,20401b72 <metal_spi_init>
/scratch/haotianw/freedom-e-sdk/software/qspi_interface/qspi_interface.c:22

	/* CPOL = 0, CPHA = 0, MSB-first, CS active low */
	struct metal_spi_config config = {
204001d6:	fc042e23          	sw	zero,-36(s0)
204001da:	fe044783          	lbu	a5,-32(s0)
204001de:	9bf9                	andi	a5,a5,-2
204001e0:	fef40023          	sb	a5,-32(s0)
204001e4:	fe044783          	lbu	a5,-32(s0)
204001e8:	9bf5                	andi	a5,a5,-3
204001ea:	fef40023          	sb	a5,-32(s0)
204001ee:	fe044783          	lbu	a5,-32(s0)
204001f2:	9bed                	andi	a5,a5,-5
204001f4:	fef40023          	sb	a5,-32(s0)
204001f8:	fe044783          	lbu	a5,-32(s0)
204001fc:	9bdd                	andi	a5,a5,-9
204001fe:	fef40023          	sb	a5,-32(s0)
20400202:	fe042223          	sw	zero,-28(s0)
/scratch/haotianw/freedom-e-sdk/software/qspi_interface/qspi_interface.c:30
		.phase = 0,
		.little_endian = 0,
		.cs_active_high = 0,
		.csid = 0,
	};
	return 0;
20400206:	4781                	li	a5,0
/scratch/haotianw/freedom-e-sdk/software/qspi_interface/qspi_interface.c:31 (discriminator 1)
}
20400208:	853e                	mv	a0,a5
2040020a:	50b2                	lw	ra,44(sp)
2040020c:	5422                	lw	s0,40(sp)
2040020e:	6145                	addi	sp,sp,48
20400210:	8082                	ret

20400212 <_puts_r>:
_puts_r():
20400212:	7139                	addi	sp,sp,-64
20400214:	dc22                	sw	s0,56(sp)
20400216:	842a                	mv	s0,a0
20400218:	852e                	mv	a0,a1
2040021a:	c62e                	sw	a1,12(sp)
2040021c:	de06                	sw	ra,60(sp)
2040021e:	288d                	jal	20400290 <strlen>
20400220:	00004797          	auipc	a5,0x4
20400224:	57078793          	addi	a5,a5,1392 # 20404790 <_exit+0x30>
20400228:	d43e                	sw	a5,40(sp)
2040022a:	4785                	li	a5,1
2040022c:	d63e                	sw	a5,44(sp)
2040022e:	101c                	addi	a5,sp,32
20400230:	45b2                	lw	a1,12(sp)
20400232:	ca3e                	sw	a5,20(sp)
20400234:	4789                	li	a5,2
20400236:	cc3e                	sw	a5,24(sp)
20400238:	5c1c                	lw	a5,56(s0)
2040023a:	d22a                	sw	a0,36(sp)
2040023c:	0505                	addi	a0,a0,1
2040023e:	d02e                	sw	a1,32(sp)
20400240:	ce2a                	sw	a0,28(sp)
20400242:	440c                	lw	a1,8(s0)
20400244:	e789                	bnez	a5,2040024e <_puts_r+0x3c>
20400246:	8522                	mv	a0,s0
20400248:	c62e                	sw	a1,12(sp)
2040024a:	220d                	jal	2040036c <__sinit>
2040024c:	45b2                	lw	a1,12(sp)
2040024e:	00c59783          	lh	a5,12(a1)
20400252:	01279713          	slli	a4,a5,0x12
20400256:	00074b63          	bltz	a4,2040026c <_puts_r+0x5a>
2040025a:	6689                	lui	a3,0x2
2040025c:	51f8                	lw	a4,100(a1)
2040025e:	8fd5                	or	a5,a5,a3
20400260:	00f59623          	sh	a5,12(a1)
20400264:	77f9                	lui	a5,0xffffe
20400266:	17fd                	addi	a5,a5,-1
20400268:	8ff9                	and	a5,a5,a4
2040026a:	d1fc                	sw	a5,100(a1)
2040026c:	0850                	addi	a2,sp,20
2040026e:	8522                	mv	a0,s0
20400270:	2c19                	jal	20400486 <__sfvwrite_r>
20400272:	57fd                	li	a5,-1
20400274:	e111                	bnez	a0,20400278 <_puts_r+0x66>
20400276:	47a9                	li	a5,10
20400278:	50f2                	lw	ra,60(sp)
2040027a:	5462                	lw	s0,56(sp)
2040027c:	853e                	mv	a0,a5
2040027e:	6121                	addi	sp,sp,64
20400280:	8082                	ret

20400282 <puts>:
puts():
20400282:	5fc01797          	auipc	a5,0x5fc01
20400286:	e3678793          	addi	a5,a5,-458 # 800010b8 <_impure_ptr>
2040028a:	85aa                	mv	a1,a0
2040028c:	4388                	lw	a0,0(a5)
2040028e:	b751                	j	20400212 <_puts_r>

20400290 <strlen>:
strlen():
20400290:	87aa                	mv	a5,a0
20400292:	0785                	addi	a5,a5,1
20400294:	fff7c703          	lbu	a4,-1(a5)
20400298:	ff6d                	bnez	a4,20400292 <strlen+0x2>
2040029a:	40a78533          	sub	a0,a5,a0
2040029e:	157d                	addi	a0,a0,-1
204002a0:	8082                	ret

204002a2 <__fp_lock>:
__fp_lock():
204002a2:	4501                	li	a0,0
204002a4:	8082                	ret

204002a6 <std>:
std():
204002a6:	1141                	addi	sp,sp,-16
204002a8:	c422                	sw	s0,8(sp)
204002aa:	c606                	sw	ra,12(sp)
204002ac:	842a                	mv	s0,a0
204002ae:	00b51623          	sh	a1,12(a0)
204002b2:	00c51723          	sh	a2,14(a0)
204002b6:	00052023          	sw	zero,0(a0)
204002ba:	00052223          	sw	zero,4(a0)
204002be:	00052423          	sw	zero,8(a0)
204002c2:	06052223          	sw	zero,100(a0)
204002c6:	00052823          	sw	zero,16(a0)
204002ca:	00052a23          	sw	zero,20(a0)
204002ce:	00052c23          	sw	zero,24(a0)
204002d2:	4621                	li	a2,8
204002d4:	4581                	li	a1,0
204002d6:	05c50513          	addi	a0,a0,92
204002da:	37d000ef          	jal	ra,20400e56 <memset>
204002de:	00001797          	auipc	a5,0x1
204002e2:	fe078793          	addi	a5,a5,-32 # 204012be <__sread>
204002e6:	d01c                	sw	a5,32(s0)
204002e8:	00001797          	auipc	a5,0x1
204002ec:	00c78793          	addi	a5,a5,12 # 204012f4 <__swrite>
204002f0:	d05c                	sw	a5,36(s0)
204002f2:	00001797          	auipc	a5,0x1
204002f6:	05078793          	addi	a5,a5,80 # 20401342 <__sseek>
204002fa:	d41c                	sw	a5,40(s0)
204002fc:	00001797          	auipc	a5,0x1
20400300:	07c78793          	addi	a5,a5,124 # 20401378 <__sclose>
20400304:	cc40                	sw	s0,28(s0)
20400306:	d45c                	sw	a5,44(s0)
20400308:	40b2                	lw	ra,12(sp)
2040030a:	4422                	lw	s0,8(sp)
2040030c:	0141                	addi	sp,sp,16
2040030e:	8082                	ret

20400310 <_cleanup_r>:
_cleanup_r():
20400310:	00001597          	auipc	a1,0x1
20400314:	1b258593          	addi	a1,a1,434 # 204014c2 <_fclose_r>
20400318:	a175                	j	204007c4 <_fwalk_reent>

2040031a <__fp_unlock>:
__fp_unlock():
2040031a:	4501                	li	a0,0
2040031c:	8082                	ret

2040031e <__sfmoreglue>:
__sfmoreglue():
2040031e:	1141                	addi	sp,sp,-16
20400320:	c226                	sw	s1,4(sp)
20400322:	06800613          	li	a2,104
20400326:	fff58493          	addi	s1,a1,-1
2040032a:	02c484b3          	mul	s1,s1,a2
2040032e:	c04a                	sw	s2,0(sp)
20400330:	892e                	mv	s2,a1
20400332:	c422                	sw	s0,8(sp)
20400334:	c606                	sw	ra,12(sp)
20400336:	07448593          	addi	a1,s1,116
2040033a:	29dd                	jal	20400830 <_malloc_r>
2040033c:	842a                	mv	s0,a0
2040033e:	cd01                	beqz	a0,20400356 <__sfmoreglue+0x38>
20400340:	00052023          	sw	zero,0(a0)
20400344:	01252223          	sw	s2,4(a0)
20400348:	0531                	addi	a0,a0,12
2040034a:	c408                	sw	a0,8(s0)
2040034c:	06848613          	addi	a2,s1,104
20400350:	4581                	li	a1,0
20400352:	305000ef          	jal	ra,20400e56 <memset>
20400356:	8522                	mv	a0,s0
20400358:	40b2                	lw	ra,12(sp)
2040035a:	4422                	lw	s0,8(sp)
2040035c:	4492                	lw	s1,4(sp)
2040035e:	4902                	lw	s2,0(sp)
20400360:	0141                	addi	sp,sp,16
20400362:	8082                	ret

20400364 <_cleanup>:
_cleanup():
20400364:	83818793          	addi	a5,gp,-1992 # 800010f0 <_global_impure_ptr>
20400368:	4388                	lw	a0,0(a5)
2040036a:	b75d                	j	20400310 <_cleanup_r>

2040036c <__sinit>:
__sinit():
2040036c:	5d1c                	lw	a5,56(a0)
2040036e:	e7a9                	bnez	a5,204003b8 <__sinit+0x4c>
20400370:	1141                	addi	sp,sp,-16
20400372:	c606                	sw	ra,12(sp)
20400374:	c422                	sw	s0,8(sp)
20400376:	00000797          	auipc	a5,0x0
2040037a:	f9a78793          	addi	a5,a5,-102 # 20400310 <_cleanup_r>
2040037e:	dd5c                	sw	a5,60(a0)
20400380:	478d                	li	a5,3
20400382:	2ef52223          	sw	a5,740(a0)
20400386:	2ec50793          	addi	a5,a0,748
2040038a:	842a                	mv	s0,a0
2040038c:	2ef52423          	sw	a5,744(a0)
20400390:	2e052023          	sw	zero,736(a0)
20400394:	4148                	lw	a0,4(a0)
20400396:	4601                	li	a2,0
20400398:	4591                	li	a1,4
2040039a:	3731                	jal	204002a6 <std>
2040039c:	4408                	lw	a0,8(s0)
2040039e:	4605                	li	a2,1
204003a0:	45a5                	li	a1,9
204003a2:	3711                	jal	204002a6 <std>
204003a4:	4448                	lw	a0,12(s0)
204003a6:	4609                	li	a2,2
204003a8:	45c9                	li	a1,18
204003aa:	3df5                	jal	204002a6 <std>
204003ac:	4785                	li	a5,1
204003ae:	dc1c                	sw	a5,56(s0)
204003b0:	40b2                	lw	ra,12(sp)
204003b2:	4422                	lw	s0,8(sp)
204003b4:	0141                	addi	sp,sp,16
204003b6:	8082                	ret
204003b8:	8082                	ret

204003ba <__sfp>:
__sfp():
204003ba:	1141                	addi	sp,sp,-16
204003bc:	83818793          	addi	a5,gp,-1992 # 800010f0 <_global_impure_ptr>
204003c0:	c226                	sw	s1,4(sp)
204003c2:	4384                	lw	s1,0(a5)
204003c4:	c04a                	sw	s2,0(sp)
204003c6:	c606                	sw	ra,12(sp)
204003c8:	5c9c                	lw	a5,56(s1)
204003ca:	c422                	sw	s0,8(sp)
204003cc:	892a                	mv	s2,a0
204003ce:	e399                	bnez	a5,204003d4 <__sfp+0x1a>
204003d0:	8526                	mv	a0,s1
204003d2:	3f69                	jal	2040036c <__sinit>
204003d4:	2e048493          	addi	s1,s1,736
204003d8:	4480                	lw	s0,8(s1)
204003da:	40dc                	lw	a5,4(s1)
204003dc:	17fd                	addi	a5,a5,-1
204003de:	0007d663          	bgez	a5,204003ea <__sfp+0x30>
204003e2:	409c                	lw	a5,0(s1)
204003e4:	cfb9                	beqz	a5,20400442 <__sfp+0x88>
204003e6:	4084                	lw	s1,0(s1)
204003e8:	bfc5                	j	204003d8 <__sfp+0x1e>
204003ea:	00c41703          	lh	a4,12(s0)
204003ee:	e739                	bnez	a4,2040043c <__sfp+0x82>
204003f0:	77c1                	lui	a5,0xffff0
204003f2:	0785                	addi	a5,a5,1
204003f4:	06042223          	sw	zero,100(s0)
204003f8:	00042023          	sw	zero,0(s0)
204003fc:	00042223          	sw	zero,4(s0)
20400400:	00042423          	sw	zero,8(s0)
20400404:	c45c                	sw	a5,12(s0)
20400406:	00042823          	sw	zero,16(s0)
2040040a:	00042a23          	sw	zero,20(s0)
2040040e:	00042c23          	sw	zero,24(s0)
20400412:	4621                	li	a2,8
20400414:	4581                	li	a1,0
20400416:	05c40513          	addi	a0,s0,92
2040041a:	23d000ef          	jal	ra,20400e56 <memset>
2040041e:	02042823          	sw	zero,48(s0)
20400422:	02042a23          	sw	zero,52(s0)
20400426:	04042223          	sw	zero,68(s0)
2040042a:	04042423          	sw	zero,72(s0)
2040042e:	8522                	mv	a0,s0
20400430:	40b2                	lw	ra,12(sp)
20400432:	4422                	lw	s0,8(sp)
20400434:	4492                	lw	s1,4(sp)
20400436:	4902                	lw	s2,0(sp)
20400438:	0141                	addi	sp,sp,16
2040043a:	8082                	ret
2040043c:	06840413          	addi	s0,s0,104
20400440:	bf71                	j	204003dc <__sfp+0x22>
20400442:	4591                	li	a1,4
20400444:	854a                	mv	a0,s2
20400446:	3de1                	jal	2040031e <__sfmoreglue>
20400448:	c088                	sw	a0,0(s1)
2040044a:	fd51                	bnez	a0,204003e6 <__sfp+0x2c>
2040044c:	47b1                	li	a5,12
2040044e:	00f92023          	sw	a5,0(s2)
20400452:	4401                	li	s0,0
20400454:	bfe9                	j	2040042e <__sfp+0x74>

20400456 <__sfp_lock_acquire>:
__sfp_lock_acquire():
20400456:	8082                	ret

20400458 <__sfp_lock_release>:
__sfp_lock_release():
20400458:	8082                	ret

2040045a <__sinit_lock_acquire>:
__sinit_lock_acquire():
2040045a:	8082                	ret

2040045c <__sinit_lock_release>:
__sinit_lock_release():
2040045c:	8082                	ret

2040045e <__fp_lock_all>:
__fp_lock_all():
2040045e:	5fc01797          	auipc	a5,0x5fc01
20400462:	c5a78793          	addi	a5,a5,-934 # 800010b8 <_impure_ptr>
20400466:	4388                	lw	a0,0(a5)
20400468:	00000597          	auipc	a1,0x0
2040046c:	e3a58593          	addi	a1,a1,-454 # 204002a2 <__fp_lock>
20400470:	accd                	j	20400762 <_fwalk>

20400472 <__fp_unlock_all>:
__fp_unlock_all():
20400472:	5fc01797          	auipc	a5,0x5fc01
20400476:	c4678793          	addi	a5,a5,-954 # 800010b8 <_impure_ptr>
2040047a:	4388                	lw	a0,0(a5)
2040047c:	00000597          	auipc	a1,0x0
20400480:	e9e58593          	addi	a1,a1,-354 # 2040031a <__fp_unlock>
20400484:	acf9                	j	20400762 <_fwalk>

20400486 <__sfvwrite_r>:
__sfvwrite_r():
20400486:	461c                	lw	a5,8(a2)
20400488:	e781                	bnez	a5,20400490 <__sfvwrite_r+0xa>
2040048a:	4781                	li	a5,0
2040048c:	853e                	mv	a0,a5
2040048e:	8082                	ret
20400490:	00c5d783          	lhu	a5,12(a1)
20400494:	715d                	addi	sp,sp,-80
20400496:	c4a2                	sw	s0,72(sp)
20400498:	c0ca                	sw	s2,64(sp)
2040049a:	da56                	sw	s5,52(sp)
2040049c:	c686                	sw	ra,76(sp)
2040049e:	c2a6                	sw	s1,68(sp)
204004a0:	de4e                	sw	s3,60(sp)
204004a2:	dc52                	sw	s4,56(sp)
204004a4:	d85a                	sw	s6,48(sp)
204004a6:	d65e                	sw	s7,44(sp)
204004a8:	d462                	sw	s8,40(sp)
204004aa:	d266                	sw	s9,36(sp)
204004ac:	d06a                	sw	s10,32(sp)
204004ae:	ce6e                	sw	s11,28(sp)
204004b0:	8ba1                	andi	a5,a5,8
204004b2:	8ab2                	mv	s5,a2
204004b4:	842e                	mv	s0,a1
204004b6:	892a                	mv	s2,a0
204004b8:	cfd9                	beqz	a5,20400556 <__sfvwrite_r+0xd0>
204004ba:	499c                	lw	a5,16(a1)
204004bc:	cfc9                	beqz	a5,20400556 <__sfvwrite_r+0xd0>
204004be:	00c45783          	lhu	a5,12(s0)
204004c2:	000aaa03          	lw	s4,0(s5)
204004c6:	0027f713          	andi	a4,a5,2
204004ca:	0e071863          	bnez	a4,204005ba <__sfvwrite_r+0x134>
204004ce:	8b85                	andi	a5,a5,1
204004d0:	16078063          	beqz	a5,20400630 <__sfvwrite_r+0x1aa>
204004d4:	4b81                	li	s7,0
204004d6:	4501                	li	a0,0
204004d8:	4b01                	li	s6,0
204004da:	4981                	li	s3,0
204004dc:	24098563          	beqz	s3,20400726 <__sfvwrite_r+0x2a0>
204004e0:	ed01                	bnez	a0,204004f8 <__sfvwrite_r+0x72>
204004e2:	864e                	mv	a2,s3
204004e4:	45a9                	li	a1,10
204004e6:	855a                	mv	a0,s6
204004e8:	055000ef          	jal	ra,20400d3c <memchr>
204004ec:	00198b93          	addi	s7,s3,1
204004f0:	c501                	beqz	a0,204004f8 <__sfvwrite_r+0x72>
204004f2:	0505                	addi	a0,a0,1
204004f4:	41650bb3          	sub	s7,a0,s6
204004f8:	8c5e                	mv	s8,s7
204004fa:	0179f363          	bgeu	s3,s7,20400500 <__sfvwrite_r+0x7a>
204004fe:	8c4e                	mv	s8,s3
20400500:	4008                	lw	a0,0(s0)
20400502:	481c                	lw	a5,16(s0)
20400504:	4854                	lw	a3,20(s0)
20400506:	22a7f763          	bgeu	a5,a0,20400734 <__sfvwrite_r+0x2ae>
2040050a:	4404                	lw	s1,8(s0)
2040050c:	94b6                	add	s1,s1,a3
2040050e:	2384d363          	bge	s1,s8,20400734 <__sfvwrite_r+0x2ae>
20400512:	85da                	mv	a1,s6
20400514:	8626                	mv	a2,s1
20400516:	0f7000ef          	jal	ra,20400e0c <memmove>
2040051a:	401c                	lw	a5,0(s0)
2040051c:	85a2                	mv	a1,s0
2040051e:	854a                	mv	a0,s2
20400520:	97a6                	add	a5,a5,s1
20400522:	c01c                	sw	a5,0(s0)
20400524:	18c010ef          	jal	ra,204016b0 <_fflush_r>
20400528:	0e051c63          	bnez	a0,20400620 <__sfvwrite_r+0x19a>
2040052c:	409b8bb3          	sub	s7,s7,s1
20400530:	4505                	li	a0,1
20400532:	000b9763          	bnez	s7,20400540 <__sfvwrite_r+0xba>
20400536:	85a2                	mv	a1,s0
20400538:	854a                	mv	a0,s2
2040053a:	176010ef          	jal	ra,204016b0 <_fflush_r>
2040053e:	e16d                	bnez	a0,20400620 <__sfvwrite_r+0x19a>
20400540:	008aa783          	lw	a5,8(s5)
20400544:	9b26                	add	s6,s6,s1
20400546:	409989b3          	sub	s3,s3,s1
2040054a:	409784b3          	sub	s1,a5,s1
2040054e:	009aa423          	sw	s1,8(s5)
20400552:	f4c9                	bnez	s1,204004dc <__sfvwrite_r+0x56>
20400554:	a091                	j	20400598 <__sfvwrite_r+0x112>
20400556:	85a2                	mv	a1,s0
20400558:	854a                	mv	a0,s2
2040055a:	65b000ef          	jal	ra,204013b4 <__swsetup_r>
2040055e:	57fd                	li	a5,-1
20400560:	dd39                	beqz	a0,204004be <__sfvwrite_r+0x38>
20400562:	a825                	j	2040059a <__sfvwrite_r+0x114>
20400564:	000a2983          	lw	s3,0(s4)
20400568:	004a2483          	lw	s1,4(s4)
2040056c:	0a21                	addi	s4,s4,8
2040056e:	d8fd                	beqz	s1,20400564 <__sfvwrite_r+0xde>
20400570:	86a6                	mv	a3,s1
20400572:	009b7363          	bgeu	s6,s1,20400578 <__sfvwrite_r+0xf2>
20400576:	86da                	mv	a3,s6
20400578:	505c                	lw	a5,36(s0)
2040057a:	4c4c                	lw	a1,28(s0)
2040057c:	864e                	mv	a2,s3
2040057e:	854a                	mv	a0,s2
20400580:	9782                	jalr	a5
20400582:	08a05f63          	blez	a0,20400620 <__sfvwrite_r+0x19a>
20400586:	008aa783          	lw	a5,8(s5)
2040058a:	99aa                	add	s3,s3,a0
2040058c:	8c89                	sub	s1,s1,a0
2040058e:	40a78533          	sub	a0,a5,a0
20400592:	00aaa423          	sw	a0,8(s5)
20400596:	fd61                	bnez	a0,2040056e <__sfvwrite_r+0xe8>
20400598:	4781                	li	a5,0
2040059a:	40b6                	lw	ra,76(sp)
2040059c:	4426                	lw	s0,72(sp)
2040059e:	4496                	lw	s1,68(sp)
204005a0:	4906                	lw	s2,64(sp)
204005a2:	59f2                	lw	s3,60(sp)
204005a4:	5a62                	lw	s4,56(sp)
204005a6:	5ad2                	lw	s5,52(sp)
204005a8:	5b42                	lw	s6,48(sp)
204005aa:	5bb2                	lw	s7,44(sp)
204005ac:	5c22                	lw	s8,40(sp)
204005ae:	5c92                	lw	s9,36(sp)
204005b0:	5d02                	lw	s10,32(sp)
204005b2:	4df2                	lw	s11,28(sp)
204005b4:	853e                	mv	a0,a5
204005b6:	6161                	addi	sp,sp,80
204005b8:	8082                	ret
204005ba:	80000b37          	lui	s6,0x80000
204005be:	4981                	li	s3,0
204005c0:	4481                	li	s1,0
204005c2:	c00b4b13          	xori	s6,s6,-1024
204005c6:	b765                	j	2040056e <__sfvwrite_r+0xe8>
204005c8:	000a2b03          	lw	s6,0(s4)
204005cc:	004a2483          	lw	s1,4(s4)
204005d0:	0a21                	addi	s4,s4,8
204005d2:	d8fd                	beqz	s1,204005c8 <__sfvwrite_r+0x142>
204005d4:	00c45703          	lhu	a4,12(s0)
204005d8:	441c                	lw	a5,8(s0)
204005da:	4008                	lw	a0,0(s0)
204005dc:	20077693          	andi	a3,a4,512
204005e0:	0e068763          	beqz	a3,204006ce <__sfvwrite_r+0x248>
204005e4:	08f4e863          	bltu	s1,a5,20400674 <__sfvwrite_r+0x1ee>
204005e8:	48077693          	andi	a3,a4,1152
204005ec:	c6c1                	beqz	a3,20400674 <__sfvwrite_r+0x1ee>
204005ee:	01442d83          	lw	s11,20(s0)
204005f2:	480c                	lw	a1,16(s0)
204005f4:	03bc8db3          	mul	s11,s9,s11
204005f8:	40b509b3          	sub	s3,a0,a1
204005fc:	00198793          	addi	a5,s3,1
20400600:	97a6                	add	a5,a5,s1
20400602:	03adcdb3          	div	s11,s11,s10
20400606:	00fdf363          	bgeu	s11,a5,2040060c <__sfvwrite_r+0x186>
2040060a:	8dbe                	mv	s11,a5
2040060c:	40077713          	andi	a4,a4,1024
20400610:	cf51                	beqz	a4,204006ac <__sfvwrite_r+0x226>
20400612:	85ee                	mv	a1,s11
20400614:	854a                	mv	a0,s2
20400616:	2c29                	jal	20400830 <_malloc_r>
20400618:	e51d                	bnez	a0,20400646 <__sfvwrite_r+0x1c0>
2040061a:	47b1                	li	a5,12
2040061c:	00f92023          	sw	a5,0(s2)
20400620:	00c45783          	lhu	a5,12(s0)
20400624:	0407e793          	ori	a5,a5,64
20400628:	00f41623          	sh	a5,12(s0)
2040062c:	57fd                	li	a5,-1
2040062e:	b7b5                	j	2040059a <__sfvwrite_r+0x114>
20400630:	80000bb7          	lui	s7,0x80000
20400634:	ffebcc13          	xori	s8,s7,-2
20400638:	4b01                	li	s6,0
2040063a:	4481                	li	s1,0
2040063c:	fffbcb93          	not	s7,s7
20400640:	4c8d                	li	s9,3
20400642:	4d09                	li	s10,2
20400644:	b779                	j	204005d2 <__sfvwrite_r+0x14c>
20400646:	480c                	lw	a1,16(s0)
20400648:	864e                	mv	a2,s3
2040064a:	c62a                	sw	a0,12(sp)
2040064c:	2729                	jal	20400d56 <memcpy>
2040064e:	00c45703          	lhu	a4,12(s0)
20400652:	47b2                	lw	a5,12(sp)
20400654:	b7f77713          	andi	a4,a4,-1153
20400658:	08076713          	ori	a4,a4,128
2040065c:	00e41623          	sh	a4,12(s0)
20400660:	c81c                	sw	a5,16(s0)
20400662:	01b42a23          	sw	s11,20(s0)
20400666:	97ce                	add	a5,a5,s3
20400668:	413d8db3          	sub	s11,s11,s3
2040066c:	c01c                	sw	a5,0(s0)
2040066e:	01b42423          	sw	s11,8(s0)
20400672:	87a6                	mv	a5,s1
20400674:	89a6                	mv	s3,s1
20400676:	00f4f363          	bgeu	s1,a5,2040067c <__sfvwrite_r+0x1f6>
2040067a:	87a6                	mv	a5,s1
2040067c:	4008                	lw	a0,0(s0)
2040067e:	863e                	mv	a2,a5
20400680:	85da                	mv	a1,s6
20400682:	c63e                	sw	a5,12(sp)
20400684:	2761                	jal	20400e0c <memmove>
20400686:	4418                	lw	a4,8(s0)
20400688:	47b2                	lw	a5,12(sp)
2040068a:	8f1d                	sub	a4,a4,a5
2040068c:	c418                	sw	a4,8(s0)
2040068e:	4018                	lw	a4,0(s0)
20400690:	97ba                	add	a5,a5,a4
20400692:	c01c                	sw	a5,0(s0)
20400694:	008aa783          	lw	a5,8(s5)
20400698:	9b4e                	add	s6,s6,s3
2040069a:	413484b3          	sub	s1,s1,s3
2040069e:	413789b3          	sub	s3,a5,s3
204006a2:	013aa423          	sw	s3,8(s5)
204006a6:	f20996e3          	bnez	s3,204005d2 <__sfvwrite_r+0x14c>
204006aa:	b5fd                	j	20400598 <__sfvwrite_r+0x112>
204006ac:	866e                	mv	a2,s11
204006ae:	854a                	mv	a0,s2
204006b0:	053000ef          	jal	ra,20400f02 <_realloc_r>
204006b4:	87aa                	mv	a5,a0
204006b6:	f54d                	bnez	a0,20400660 <__sfvwrite_r+0x1da>
204006b8:	480c                	lw	a1,16(s0)
204006ba:	854a                	mv	a0,s2
204006bc:	110010ef          	jal	ra,204017cc <_free_r>
204006c0:	00c45783          	lhu	a5,12(s0)
204006c4:	f7f7f793          	andi	a5,a5,-129
204006c8:	00f41623          	sh	a5,12(s0)
204006cc:	b7b9                	j	2040061a <__sfvwrite_r+0x194>
204006ce:	4818                	lw	a4,16(s0)
204006d0:	00a76563          	bltu	a4,a0,204006da <__sfvwrite_r+0x254>
204006d4:	4854                	lw	a3,20(s0)
204006d6:	02d4f763          	bgeu	s1,a3,20400704 <__sfvwrite_r+0x27e>
204006da:	89be                	mv	s3,a5
204006dc:	00f4f363          	bgeu	s1,a5,204006e2 <__sfvwrite_r+0x25c>
204006e0:	89a6                	mv	s3,s1
204006e2:	864e                	mv	a2,s3
204006e4:	85da                	mv	a1,s6
204006e6:	271d                	jal	20400e0c <memmove>
204006e8:	441c                	lw	a5,8(s0)
204006ea:	4018                	lw	a4,0(s0)
204006ec:	413787b3          	sub	a5,a5,s3
204006f0:	974e                	add	a4,a4,s3
204006f2:	c41c                	sw	a5,8(s0)
204006f4:	c018                	sw	a4,0(s0)
204006f6:	ffd9                	bnez	a5,20400694 <__sfvwrite_r+0x20e>
204006f8:	85a2                	mv	a1,s0
204006fa:	854a                	mv	a0,s2
204006fc:	7b5000ef          	jal	ra,204016b0 <_fflush_r>
20400700:	d951                	beqz	a0,20400694 <__sfvwrite_r+0x20e>
20400702:	bf39                	j	20400620 <__sfvwrite_r+0x19a>
20400704:	87a6                	mv	a5,s1
20400706:	009c7363          	bgeu	s8,s1,2040070c <__sfvwrite_r+0x286>
2040070a:	87de                	mv	a5,s7
2040070c:	02d7c7b3          	div	a5,a5,a3
20400710:	5058                	lw	a4,36(s0)
20400712:	4c4c                	lw	a1,28(s0)
20400714:	865a                	mv	a2,s6
20400716:	854a                	mv	a0,s2
20400718:	02d786b3          	mul	a3,a5,a3
2040071c:	9702                	jalr	a4
2040071e:	89aa                	mv	s3,a0
20400720:	f6a04ae3          	bgtz	a0,20400694 <__sfvwrite_r+0x20e>
20400724:	bdf5                	j	20400620 <__sfvwrite_r+0x19a>
20400726:	000a2b03          	lw	s6,0(s4)
2040072a:	004a2983          	lw	s3,4(s4)
2040072e:	4501                	li	a0,0
20400730:	0a21                	addi	s4,s4,8
20400732:	b36d                	j	204004dc <__sfvwrite_r+0x56>
20400734:	00dc4b63          	blt	s8,a3,2040074a <__sfvwrite_r+0x2c4>
20400738:	505c                	lw	a5,36(s0)
2040073a:	4c4c                	lw	a1,28(s0)
2040073c:	865a                	mv	a2,s6
2040073e:	854a                	mv	a0,s2
20400740:	9782                	jalr	a5
20400742:	84aa                	mv	s1,a0
20400744:	dea044e3          	bgtz	a0,2040052c <__sfvwrite_r+0xa6>
20400748:	bde1                	j	20400620 <__sfvwrite_r+0x19a>
2040074a:	8662                	mv	a2,s8
2040074c:	85da                	mv	a1,s6
2040074e:	2d7d                	jal	20400e0c <memmove>
20400750:	441c                	lw	a5,8(s0)
20400752:	84e2                	mv	s1,s8
20400754:	418787b3          	sub	a5,a5,s8
20400758:	c41c                	sw	a5,8(s0)
2040075a:	401c                	lw	a5,0(s0)
2040075c:	97e2                	add	a5,a5,s8
2040075e:	c01c                	sw	a5,0(s0)
20400760:	b3f1                	j	2040052c <__sfvwrite_r+0xa6>

20400762 <_fwalk>:
_fwalk():
20400762:	7179                	addi	sp,sp,-48
20400764:	d422                	sw	s0,40(sp)
20400766:	d04a                	sw	s2,32(sp)
20400768:	cc52                	sw	s4,24(sp)
2040076a:	ca56                	sw	s5,20(sp)
2040076c:	d606                	sw	ra,44(sp)
2040076e:	d226                	sw	s1,36(sp)
20400770:	ce4e                	sw	s3,28(sp)
20400772:	2e050413          	addi	s0,a0,736
20400776:	4901                	li	s2,0
20400778:	4a05                	li	s4,1
2040077a:	5afd                	li	s5,-1
2040077c:	e819                	bnez	s0,20400792 <_fwalk+0x30>
2040077e:	50b2                	lw	ra,44(sp)
20400780:	5422                	lw	s0,40(sp)
20400782:	854a                	mv	a0,s2
20400784:	5492                	lw	s1,36(sp)
20400786:	5902                	lw	s2,32(sp)
20400788:	49f2                	lw	s3,28(sp)
2040078a:	4a62                	lw	s4,24(sp)
2040078c:	4ad2                	lw	s5,20(sp)
2040078e:	6145                	addi	sp,sp,48
20400790:	8082                	ret
20400792:	4404                	lw	s1,8(s0)
20400794:	00442983          	lw	s3,4(s0)
20400798:	19fd                	addi	s3,s3,-1
2040079a:	0009d463          	bgez	s3,204007a2 <_fwalk+0x40>
2040079e:	4000                	lw	s0,0(s0)
204007a0:	bff1                	j	2040077c <_fwalk+0x1a>
204007a2:	00c4d783          	lhu	a5,12(s1)
204007a6:	00fa7c63          	bgeu	s4,a5,204007be <_fwalk+0x5c>
204007aa:	00e49783          	lh	a5,14(s1)
204007ae:	01578863          	beq	a5,s5,204007be <_fwalk+0x5c>
204007b2:	8526                	mv	a0,s1
204007b4:	c62e                	sw	a1,12(sp)
204007b6:	9582                	jalr	a1
204007b8:	45b2                	lw	a1,12(sp)
204007ba:	00a96933          	or	s2,s2,a0
204007be:	06848493          	addi	s1,s1,104
204007c2:	bfd9                	j	20400798 <_fwalk+0x36>

204007c4 <_fwalk_reent>:
_fwalk_reent():
204007c4:	7179                	addi	sp,sp,-48
204007c6:	d422                	sw	s0,40(sp)
204007c8:	d04a                	sw	s2,32(sp)
204007ca:	cc52                	sw	s4,24(sp)
204007cc:	ca56                	sw	s5,20(sp)
204007ce:	c85a                	sw	s6,16(sp)
204007d0:	c65e                	sw	s7,12(sp)
204007d2:	d606                	sw	ra,44(sp)
204007d4:	d226                	sw	s1,36(sp)
204007d6:	ce4e                	sw	s3,28(sp)
204007d8:	8a2a                	mv	s4,a0
204007da:	8aae                	mv	s5,a1
204007dc:	2e050413          	addi	s0,a0,736
204007e0:	4901                	li	s2,0
204007e2:	4b05                	li	s6,1
204007e4:	5bfd                	li	s7,-1
204007e6:	ec09                	bnez	s0,20400800 <_fwalk_reent+0x3c>
204007e8:	50b2                	lw	ra,44(sp)
204007ea:	5422                	lw	s0,40(sp)
204007ec:	854a                	mv	a0,s2
204007ee:	5492                	lw	s1,36(sp)
204007f0:	5902                	lw	s2,32(sp)
204007f2:	49f2                	lw	s3,28(sp)
204007f4:	4a62                	lw	s4,24(sp)
204007f6:	4ad2                	lw	s5,20(sp)
204007f8:	4b42                	lw	s6,16(sp)
204007fa:	4bb2                	lw	s7,12(sp)
204007fc:	6145                	addi	sp,sp,48
204007fe:	8082                	ret
20400800:	4404                	lw	s1,8(s0)
20400802:	00442983          	lw	s3,4(s0)
20400806:	19fd                	addi	s3,s3,-1
20400808:	0009d463          	bgez	s3,20400810 <_fwalk_reent+0x4c>
2040080c:	4000                	lw	s0,0(s0)
2040080e:	bfe1                	j	204007e6 <_fwalk_reent+0x22>
20400810:	00c4d783          	lhu	a5,12(s1)
20400814:	00fb7b63          	bgeu	s6,a5,2040082a <_fwalk_reent+0x66>
20400818:	00e49783          	lh	a5,14(s1)
2040081c:	01778763          	beq	a5,s7,2040082a <_fwalk_reent+0x66>
20400820:	85a6                	mv	a1,s1
20400822:	8552                	mv	a0,s4
20400824:	9a82                	jalr	s5
20400826:	00a96933          	or	s2,s2,a0
2040082a:	06848493          	addi	s1,s1,104
2040082e:	bfe1                	j	20400806 <_fwalk_reent+0x42>

20400830 <_malloc_r>:
_malloc_r():
20400830:	7179                	addi	sp,sp,-48
20400832:	d606                	sw	ra,44(sp)
20400834:	d422                	sw	s0,40(sp)
20400836:	d226                	sw	s1,36(sp)
20400838:	d04a                	sw	s2,32(sp)
2040083a:	ce4e                	sw	s3,28(sp)
2040083c:	cc52                	sw	s4,24(sp)
2040083e:	ca56                	sw	s5,20(sp)
20400840:	c85a                	sw	s6,16(sp)
20400842:	c65e                	sw	s7,12(sp)
20400844:	c462                	sw	s8,8(sp)
20400846:	c266                	sw	s9,4(sp)
20400848:	00b58793          	addi	a5,a1,11
2040084c:	4759                	li	a4,22
2040084e:	02f77663          	bgeu	a4,a5,2040087a <_malloc_r+0x4a>
20400852:	ff87f493          	andi	s1,a5,-8
20400856:	0204d363          	bgez	s1,2040087c <_malloc_r+0x4c>
2040085a:	47b1                	li	a5,12
2040085c:	c11c                	sw	a5,0(a0)
2040085e:	4501                	li	a0,0
20400860:	50b2                	lw	ra,44(sp)
20400862:	5422                	lw	s0,40(sp)
20400864:	5492                	lw	s1,36(sp)
20400866:	5902                	lw	s2,32(sp)
20400868:	49f2                	lw	s3,28(sp)
2040086a:	4a62                	lw	s4,24(sp)
2040086c:	4ad2                	lw	s5,20(sp)
2040086e:	4b42                	lw	s6,16(sp)
20400870:	4bb2                	lw	s7,12(sp)
20400872:	4c22                	lw	s8,8(sp)
20400874:	4c92                	lw	s9,4(sp)
20400876:	6145                	addi	sp,sp,48
20400878:	8082                	ret
2040087a:	44c1                	li	s1,16
2040087c:	fcb4efe3          	bltu	s1,a1,2040085a <_malloc_r+0x2a>
20400880:	892a                	mv	s2,a0
20400882:	2db5                	jal	20400efe <__malloc_lock>
20400884:	1f700793          	li	a5,503
20400888:	5fc00997          	auipc	s3,0x5fc00
2040088c:	ba098993          	addi	s3,s3,-1120 # 80000428 <__malloc_av_>
20400890:	0297ec63          	bltu	a5,s1,204008c8 <_malloc_r+0x98>
20400894:	00848713          	addi	a4,s1,8
20400898:	974e                	add	a4,a4,s3
2040089a:	4340                	lw	s0,4(a4)
2040089c:	ff870693          	addi	a3,a4,-8 # 1ff8 <__heap_size+0x1bf8>
204008a0:	0034d793          	srli	a5,s1,0x3
204008a4:	00d41663          	bne	s0,a3,204008b0 <_malloc_r+0x80>
204008a8:	4740                	lw	s0,12(a4)
204008aa:	0789                	addi	a5,a5,2
204008ac:	04870c63          	beq	a4,s0,20400904 <_malloc_r+0xd4>
204008b0:	405c                	lw	a5,4(s0)
204008b2:	4458                	lw	a4,12(s0)
204008b4:	4414                	lw	a3,8(s0)
204008b6:	9bf1                	andi	a5,a5,-4
204008b8:	97a2                	add	a5,a5,s0
204008ba:	c6d8                	sw	a4,12(a3)
204008bc:	c714                	sw	a3,8(a4)
204008be:	43d8                	lw	a4,4(a5)
204008c0:	00176713          	ori	a4,a4,1
204008c4:	c3d8                	sw	a4,4(a5)
204008c6:	a051                	j	2040094a <_malloc_r+0x11a>
204008c8:	0094d713          	srli	a4,s1,0x9
204008cc:	03f00793          	li	a5,63
204008d0:	cb01                	beqz	a4,204008e0 <_malloc_r+0xb0>
204008d2:	4791                	li	a5,4
204008d4:	08e7e063          	bltu	a5,a4,20400954 <_malloc_r+0x124>
204008d8:	0064d793          	srli	a5,s1,0x6
204008dc:	03878793          	addi	a5,a5,56
204008e0:	00178713          	addi	a4,a5,1
204008e4:	070e                	slli	a4,a4,0x3
204008e6:	974e                	add	a4,a4,s3
204008e8:	4340                	lw	s0,4(a4)
204008ea:	ff870593          	addi	a1,a4,-8
204008ee:	453d                	li	a0,15
204008f0:	00b40963          	beq	s0,a1,20400902 <_malloc_r+0xd2>
204008f4:	4058                	lw	a4,4(s0)
204008f6:	9b71                	andi	a4,a4,-4
204008f8:	40970633          	sub	a2,a4,s1
204008fc:	08c55f63          	bge	a0,a2,2040099a <_malloc_r+0x16a>
20400900:	17fd                	addi	a5,a5,-1
20400902:	0785                	addi	a5,a5,1
20400904:	0109a403          	lw	s0,16(s3)
20400908:	5fc00597          	auipc	a1,0x5fc00
2040090c:	b2858593          	addi	a1,a1,-1240 # 80000430 <__malloc_av_+0x8>
20400910:	0eb40c63          	beq	s0,a1,20400a08 <_malloc_r+0x1d8>
20400914:	4058                	lw	a4,4(s0)
20400916:	46bd                	li	a3,15
20400918:	9b71                	andi	a4,a4,-4
2040091a:	40970633          	sub	a2,a4,s1
2040091e:	08c6d963          	bge	a3,a2,204009b0 <_malloc_r+0x180>
20400922:	0014e793          	ori	a5,s1,1
20400926:	c05c                	sw	a5,4(s0)
20400928:	009406b3          	add	a3,s0,s1
2040092c:	5fc00797          	auipc	a5,0x5fc00
20400930:	b0d7a823          	sw	a3,-1264(a5) # 8000043c <__malloc_av_+0x14>
20400934:	5fc00797          	auipc	a5,0x5fc00
20400938:	b0d7a223          	sw	a3,-1276(a5) # 80000438 <__malloc_av_+0x10>
2040093c:	00166793          	ori	a5,a2,1
20400940:	c6cc                	sw	a1,12(a3)
20400942:	c68c                	sw	a1,8(a3)
20400944:	c2dc                	sw	a5,4(a3)
20400946:	9722                	add	a4,a4,s0
20400948:	c310                	sw	a2,0(a4)
2040094a:	854a                	mv	a0,s2
2040094c:	2b55                	jal	20400f00 <__malloc_unlock>
2040094e:	00840513          	addi	a0,s0,8
20400952:	b739                	j	20400860 <_malloc_r+0x30>
20400954:	47d1                	li	a5,20
20400956:	00e7e563          	bltu	a5,a4,20400960 <_malloc_r+0x130>
2040095a:	05b70793          	addi	a5,a4,91
2040095e:	b749                	j	204008e0 <_malloc_r+0xb0>
20400960:	05400793          	li	a5,84
20400964:	00e7e763          	bltu	a5,a4,20400972 <_malloc_r+0x142>
20400968:	00c4d793          	srli	a5,s1,0xc
2040096c:	06e78793          	addi	a5,a5,110
20400970:	bf85                	j	204008e0 <_malloc_r+0xb0>
20400972:	15400793          	li	a5,340
20400976:	00e7e763          	bltu	a5,a4,20400984 <_malloc_r+0x154>
2040097a:	00f4d793          	srli	a5,s1,0xf
2040097e:	07778793          	addi	a5,a5,119
20400982:	bfb9                	j	204008e0 <_malloc_r+0xb0>
20400984:	55400693          	li	a3,1364
20400988:	07e00793          	li	a5,126
2040098c:	f4e6eae3          	bltu	a3,a4,204008e0 <_malloc_r+0xb0>
20400990:	0124d793          	srli	a5,s1,0x12
20400994:	07c78793          	addi	a5,a5,124
20400998:	b7a1                	j	204008e0 <_malloc_r+0xb0>
2040099a:	4454                	lw	a3,12(s0)
2040099c:	00064863          	bltz	a2,204009ac <_malloc_r+0x17c>
204009a0:	441c                	lw	a5,8(s0)
204009a2:	c7d4                	sw	a3,12(a5)
204009a4:	c69c                	sw	a5,8(a3)
204009a6:	00e407b3          	add	a5,s0,a4
204009aa:	bf11                	j	204008be <_malloc_r+0x8e>
204009ac:	8436                	mv	s0,a3
204009ae:	b789                	j	204008f0 <_malloc_r+0xc0>
204009b0:	5fc00697          	auipc	a3,0x5fc00
204009b4:	a8b6a623          	sw	a1,-1396(a3) # 8000043c <__malloc_av_+0x14>
204009b8:	5fc00697          	auipc	a3,0x5fc00
204009bc:	a8b6a023          	sw	a1,-1408(a3) # 80000438 <__malloc_av_+0x10>
204009c0:	00064863          	bltz	a2,204009d0 <_malloc_r+0x1a0>
204009c4:	9722                	add	a4,a4,s0
204009c6:	435c                	lw	a5,4(a4)
204009c8:	0017e793          	ori	a5,a5,1
204009cc:	c35c                	sw	a5,4(a4)
204009ce:	bfb5                	j	2040094a <_malloc_r+0x11a>
204009d0:	1ff00693          	li	a3,511
204009d4:	0049a803          	lw	a6,4(s3)
204009d8:	14e6e863          	bltu	a3,a4,20400b28 <_malloc_r+0x2f8>
204009dc:	830d                	srli	a4,a4,0x3
204009de:	40275613          	srai	a2,a4,0x2
204009e2:	4685                	li	a3,1
204009e4:	0705                	addi	a4,a4,1
204009e6:	00c696b3          	sll	a3,a3,a2
204009ea:	070e                	slli	a4,a4,0x3
204009ec:	974e                	add	a4,a4,s3
204009ee:	0106e6b3          	or	a3,a3,a6
204009f2:	5fc00617          	auipc	a2,0x5fc00
204009f6:	a2d62d23          	sw	a3,-1478(a2) # 8000042c <__malloc_av_+0x4>
204009fa:	4314                	lw	a3,0(a4)
204009fc:	ff870613          	addi	a2,a4,-8
20400a00:	c450                	sw	a2,12(s0)
20400a02:	c414                	sw	a3,8(s0)
20400a04:	c300                	sw	s0,0(a4)
20400a06:	c6c0                	sw	s0,12(a3)
20400a08:	4027d713          	srai	a4,a5,0x2
20400a0c:	4305                	li	t1,1
20400a0e:	00e31333          	sll	t1,t1,a4
20400a12:	0049a703          	lw	a4,4(s3)
20400a16:	04676e63          	bltu	a4,t1,20400a72 <_malloc_r+0x242>
20400a1a:	006776b3          	and	a3,a4,t1
20400a1e:	e699                	bnez	a3,20400a2c <_malloc_r+0x1fc>
20400a20:	9bf1                	andi	a5,a5,-4
20400a22:	0306                	slli	t1,t1,0x1
20400a24:	006776b3          	and	a3,a4,t1
20400a28:	0791                	addi	a5,a5,4
20400a2a:	dee5                	beqz	a3,20400a22 <_malloc_r+0x1f2>
20400a2c:	4e3d                	li	t3,15
20400a2e:	00379693          	slli	a3,a5,0x3
20400a32:	96ce                	add	a3,a3,s3
20400a34:	8836                	mv	a6,a3
20400a36:	853e                	mv	a0,a5
20400a38:	00c82403          	lw	s0,12(a6)
20400a3c:	19041363          	bne	s0,a6,20400bc2 <_malloc_r+0x392>
20400a40:	0505                	addi	a0,a0,1
20400a42:	00357713          	andi	a4,a0,3
20400a46:	0821                	addi	a6,a6,8
20400a48:	fb65                	bnez	a4,20400a38 <_malloc_r+0x208>
20400a4a:	0037f713          	andi	a4,a5,3
20400a4e:	1c071763          	bnez	a4,20400c1c <_malloc_r+0x3ec>
20400a52:	0049a703          	lw	a4,4(s3)
20400a56:	fff34793          	not	a5,t1
20400a5a:	8ff9                	and	a5,a5,a4
20400a5c:	5fc00717          	auipc	a4,0x5fc00
20400a60:	9cf72823          	sw	a5,-1584(a4) # 8000042c <__malloc_av_+0x4>
20400a64:	0049a703          	lw	a4,4(s3)
20400a68:	0306                	slli	t1,t1,0x1
20400a6a:	00676463          	bltu	a4,t1,20400a72 <_malloc_r+0x242>
20400a6e:	1c031363          	bnez	t1,20400c34 <_malloc_r+0x404>
20400a72:	0089ab83          	lw	s7,8(s3)
20400a76:	004ba403          	lw	s0,4(s7) # 80000004 <metal_segment_heap_target_end+0xffffc004>
20400a7a:	ffc47a93          	andi	s5,s0,-4
20400a7e:	009ae763          	bltu	s5,s1,20400a8c <_malloc_r+0x25c>
20400a82:	409a8733          	sub	a4,s5,s1
20400a86:	47bd                	li	a5,15
20400a88:	28e7ce63          	blt	a5,a4,20400d24 <_malloc_r+0x4f4>
20400a8c:	5fc00797          	auipc	a5,0x5fc00
20400a90:	67078793          	addi	a5,a5,1648 # 800010fc <__malloc_top_pad>
20400a94:	5fc00717          	auipc	a4,0x5fc00
20400a98:	62870713          	addi	a4,a4,1576 # 800010bc <__malloc_sbrk_base>
20400a9c:	4380                	lw	s0,0(a5)
20400a9e:	4314                	lw	a3,0(a4)
20400aa0:	57fd                	li	a5,-1
20400aa2:	015b8c33          	add	s8,s7,s5
20400aa6:	9426                	add	s0,s0,s1
20400aa8:	8a3a                	mv	s4,a4
20400aaa:	18f69763          	bne	a3,a5,20400c38 <_malloc_r+0x408>
20400aae:	0441                	addi	s0,s0,16
20400ab0:	85a2                	mv	a1,s0
20400ab2:	854a                	mv	a0,s2
20400ab4:	7d8000ef          	jal	ra,2040128c <_sbrk_r>
20400ab8:	57fd                	li	a5,-1
20400aba:	8b2a                	mv	s6,a0
20400abc:	20f50863          	beq	a0,a5,20400ccc <_malloc_r+0x49c>
20400ac0:	01857463          	bgeu	a0,s8,20400ac8 <_malloc_r+0x298>
20400ac4:	213b9463          	bne	s7,s3,20400ccc <_malloc_r+0x49c>
20400ac8:	5fc00c97          	auipc	s9,0x5fc00
20400acc:	638c8c93          	addi	s9,s9,1592 # 80001100 <__malloc_current_mallinfo>
20400ad0:	000ca703          	lw	a4,0(s9)
20400ad4:	9722                	add	a4,a4,s0
20400ad6:	5fc00797          	auipc	a5,0x5fc00
20400ada:	62e7a523          	sw	a4,1578(a5) # 80001100 <__malloc_current_mallinfo>
20400ade:	176c1363          	bne	s8,s6,20400c44 <_malloc_r+0x414>
20400ae2:	014c1793          	slli	a5,s8,0x14
20400ae6:	14079f63          	bnez	a5,20400c44 <_malloc_r+0x414>
20400aea:	0089a783          	lw	a5,8(s3)
20400aee:	9456                	add	s0,s0,s5
20400af0:	00146413          	ori	s0,s0,1
20400af4:	c3c0                	sw	s0,4(a5)
20400af6:	5fc00717          	auipc	a4,0x5fc00
20400afa:	60270713          	addi	a4,a4,1538 # 800010f8 <__malloc_max_sbrked_mem>
20400afe:	000ca783          	lw	a5,0(s9)
20400b02:	4318                	lw	a4,0(a4)
20400b04:	00f77663          	bgeu	a4,a5,20400b10 <_malloc_r+0x2e0>
20400b08:	5fc00717          	auipc	a4,0x5fc00
20400b0c:	5ef72823          	sw	a5,1520(a4) # 800010f8 <__malloc_max_sbrked_mem>
20400b10:	5fc00717          	auipc	a4,0x5fc00
20400b14:	5e470713          	addi	a4,a4,1508 # 800010f4 <__malloc_max_total_mem>
20400b18:	4318                	lw	a4,0(a4)
20400b1a:	1af77963          	bgeu	a4,a5,20400ccc <_malloc_r+0x49c>
20400b1e:	5fc00717          	auipc	a4,0x5fc00
20400b22:	5cf72b23          	sw	a5,1494(a4) # 800010f4 <__malloc_max_total_mem>
20400b26:	a25d                	j	20400ccc <_malloc_r+0x49c>
20400b28:	00975613          	srli	a2,a4,0x9
20400b2c:	4691                	li	a3,4
20400b2e:	02c6ee63          	bltu	a3,a2,20400b6a <_malloc_r+0x33a>
20400b32:	00675693          	srli	a3,a4,0x6
20400b36:	03868693          	addi	a3,a3,56
20400b3a:	00168613          	addi	a2,a3,1
20400b3e:	060e                	slli	a2,a2,0x3
20400b40:	964e                	add	a2,a2,s3
20400b42:	ff860513          	addi	a0,a2,-8
20400b46:	4210                	lw	a2,0(a2)
20400b48:	06c51763          	bne	a0,a2,20400bb6 <_malloc_r+0x386>
20400b4c:	4705                	li	a4,1
20400b4e:	8689                	srai	a3,a3,0x2
20400b50:	00d716b3          	sll	a3,a4,a3
20400b54:	0106e6b3          	or	a3,a3,a6
20400b58:	5fc00717          	auipc	a4,0x5fc00
20400b5c:	8cd72a23          	sw	a3,-1836(a4) # 8000042c <__malloc_av_+0x4>
20400b60:	c448                	sw	a0,12(s0)
20400b62:	c410                	sw	a2,8(s0)
20400b64:	c500                	sw	s0,8(a0)
20400b66:	c640                	sw	s0,12(a2)
20400b68:	b545                	j	20400a08 <_malloc_r+0x1d8>
20400b6a:	46d1                	li	a3,20
20400b6c:	00c6e563          	bltu	a3,a2,20400b76 <_malloc_r+0x346>
20400b70:	05b60693          	addi	a3,a2,91
20400b74:	b7d9                	j	20400b3a <_malloc_r+0x30a>
20400b76:	05400693          	li	a3,84
20400b7a:	00c6e763          	bltu	a3,a2,20400b88 <_malloc_r+0x358>
20400b7e:	00c75693          	srli	a3,a4,0xc
20400b82:	06e68693          	addi	a3,a3,110
20400b86:	bf55                	j	20400b3a <_malloc_r+0x30a>
20400b88:	15400693          	li	a3,340
20400b8c:	00c6e763          	bltu	a3,a2,20400b9a <_malloc_r+0x36a>
20400b90:	00f75693          	srli	a3,a4,0xf
20400b94:	07768693          	addi	a3,a3,119
20400b98:	b74d                	j	20400b3a <_malloc_r+0x30a>
20400b9a:	55400513          	li	a0,1364
20400b9e:	07e00693          	li	a3,126
20400ba2:	f8c56ce3          	bltu	a0,a2,20400b3a <_malloc_r+0x30a>
20400ba6:	01275693          	srli	a3,a4,0x12
20400baa:	07c68693          	addi	a3,a3,124
20400bae:	b771                	j	20400b3a <_malloc_r+0x30a>
20400bb0:	4610                	lw	a2,8(a2)
20400bb2:	00c50663          	beq	a0,a2,20400bbe <_malloc_r+0x38e>
20400bb6:	4254                	lw	a3,4(a2)
20400bb8:	9af1                	andi	a3,a3,-4
20400bba:	fed76be3          	bltu	a4,a3,20400bb0 <_malloc_r+0x380>
20400bbe:	4648                	lw	a0,12(a2)
20400bc0:	b745                	j	20400b60 <_malloc_r+0x330>
20400bc2:	4058                	lw	a4,4(s0)
20400bc4:	4450                	lw	a2,12(s0)
20400bc6:	9b71                	andi	a4,a4,-4
20400bc8:	409708b3          	sub	a7,a4,s1
20400bcc:	031e5b63          	bge	t3,a7,20400c02 <_malloc_r+0x3d2>
20400bd0:	0014e793          	ori	a5,s1,1
20400bd4:	c05c                	sw	a5,4(s0)
20400bd6:	441c                	lw	a5,8(s0)
20400bd8:	009406b3          	add	a3,s0,s1
20400bdc:	9722                	add	a4,a4,s0
20400bde:	c7d0                	sw	a2,12(a5)
20400be0:	c61c                	sw	a5,8(a2)
20400be2:	5fc00797          	auipc	a5,0x5fc00
20400be6:	84d7ad23          	sw	a3,-1958(a5) # 8000043c <__malloc_av_+0x14>
20400bea:	5fc00797          	auipc	a5,0x5fc00
20400bee:	84d7a723          	sw	a3,-1970(a5) # 80000438 <__malloc_av_+0x10>
20400bf2:	0018e793          	ori	a5,a7,1
20400bf6:	c6cc                	sw	a1,12(a3)
20400bf8:	c68c                	sw	a1,8(a3)
20400bfa:	c2dc                	sw	a5,4(a3)
20400bfc:	01172023          	sw	a7,0(a4)
20400c00:	b3a9                	j	2040094a <_malloc_r+0x11a>
20400c02:	0008cb63          	bltz	a7,20400c18 <_malloc_r+0x3e8>
20400c06:	9722                	add	a4,a4,s0
20400c08:	435c                	lw	a5,4(a4)
20400c0a:	0017e793          	ori	a5,a5,1
20400c0e:	c35c                	sw	a5,4(a4)
20400c10:	441c                	lw	a5,8(s0)
20400c12:	c7d0                	sw	a2,12(a5)
20400c14:	c61c                	sw	a5,8(a2)
20400c16:	bb15                	j	2040094a <_malloc_r+0x11a>
20400c18:	8432                	mv	s0,a2
20400c1a:	b50d                	j	20400a3c <_malloc_r+0x20c>
20400c1c:	16e1                	addi	a3,a3,-8
20400c1e:	4698                	lw	a4,8(a3)
20400c20:	17fd                	addi	a5,a5,-1
20400c22:	e2d704e3          	beq	a4,a3,20400a4a <_malloc_r+0x21a>
20400c26:	bd3d                	j	20400a64 <_malloc_r+0x234>
20400c28:	0791                	addi	a5,a5,4
20400c2a:	0306                	slli	t1,t1,0x1
20400c2c:	006776b3          	and	a3,a4,t1
20400c30:	dee5                	beqz	a3,20400c28 <_malloc_r+0x3f8>
20400c32:	bbf5                	j	20400a2e <_malloc_r+0x1fe>
20400c34:	87aa                	mv	a5,a0
20400c36:	bfdd                	j	20400c2c <_malloc_r+0x3fc>
20400c38:	6705                	lui	a4,0x1
20400c3a:	073d                	addi	a4,a4,15
20400c3c:	943a                	add	s0,s0,a4
20400c3e:	77fd                	lui	a5,0xfffff
20400c40:	8c7d                	and	s0,s0,a5
20400c42:	b5bd                	j	20400ab0 <_malloc_r+0x280>
20400c44:	000a2683          	lw	a3,0(s4)
20400c48:	57fd                	li	a5,-1
20400c4a:	08f69f63          	bne	a3,a5,20400ce8 <_malloc_r+0x4b8>
20400c4e:	5fc00797          	auipc	a5,0x5fc00
20400c52:	4767a723          	sw	s6,1134(a5) # 800010bc <__malloc_sbrk_base>
20400c56:	007b7c13          	andi	s8,s6,7
20400c5a:	4781                	li	a5,0
20400c5c:	000c0663          	beqz	s8,20400c68 <_malloc_r+0x438>
20400c60:	47a1                	li	a5,8
20400c62:	418787b3          	sub	a5,a5,s8
20400c66:	9b3e                	add	s6,s6,a5
20400c68:	6505                	lui	a0,0x1
20400c6a:	00a78a33          	add	s4,a5,a0
20400c6e:	945a                	add	s0,s0,s6
20400c70:	157d                	addi	a0,a0,-1
20400c72:	00a477b3          	and	a5,s0,a0
20400c76:	40fa0a33          	sub	s4,s4,a5
20400c7a:	00aa7a33          	and	s4,s4,a0
20400c7e:	85d2                	mv	a1,s4
20400c80:	854a                	mv	a0,s2
20400c82:	2529                	jal	2040128c <_sbrk_r>
20400c84:	57fd                	li	a5,-1
20400c86:	00f51963          	bne	a0,a5,20400c98 <_malloc_r+0x468>
20400c8a:	8522                	mv	a0,s0
20400c8c:	000c0563          	beqz	s8,20400c96 <_malloc_r+0x466>
20400c90:	ff8c0513          	addi	a0,s8,-8
20400c94:	9522                	add	a0,a0,s0
20400c96:	4a01                	li	s4,0
20400c98:	000ca783          	lw	a5,0(s9)
20400c9c:	41650533          	sub	a0,a0,s6
20400ca0:	97d2                	add	a5,a5,s4
20400ca2:	9a2a                	add	s4,s4,a0
20400ca4:	5fc00717          	auipc	a4,0x5fc00
20400ca8:	44f72e23          	sw	a5,1116(a4) # 80001100 <__malloc_current_mallinfo>
20400cac:	001a6a13          	ori	s4,s4,1
20400cb0:	5fbff797          	auipc	a5,0x5fbff
20400cb4:	7967a023          	sw	s6,1920(a5) # 80000430 <__malloc_av_+0x8>
20400cb8:	014b2223          	sw	s4,4(s6) # 80000004 <metal_segment_heap_target_end+0xffffc004>
20400cbc:	e33b8de3          	beq	s7,s3,20400af6 <_malloc_r+0x2c6>
20400cc0:	473d                	li	a4,15
20400cc2:	03576b63          	bltu	a4,s5,20400cf8 <_malloc_r+0x4c8>
20400cc6:	4785                	li	a5,1
20400cc8:	00fb2223          	sw	a5,4(s6)
20400ccc:	0089a783          	lw	a5,8(s3)
20400cd0:	43dc                	lw	a5,4(a5)
20400cd2:	9bf1                	andi	a5,a5,-4
20400cd4:	40978733          	sub	a4,a5,s1
20400cd8:	0097e563          	bltu	a5,s1,20400ce2 <_malloc_r+0x4b2>
20400cdc:	47bd                	li	a5,15
20400cde:	04e7c363          	blt	a5,a4,20400d24 <_malloc_r+0x4f4>
20400ce2:	854a                	mv	a0,s2
20400ce4:	2c31                	jal	20400f00 <__malloc_unlock>
20400ce6:	bea5                	j	2040085e <_malloc_r+0x2e>
20400ce8:	418b07b3          	sub	a5,s6,s8
20400cec:	97ba                	add	a5,a5,a4
20400cee:	5fc00717          	auipc	a4,0x5fc00
20400cf2:	40f72923          	sw	a5,1042(a4) # 80001100 <__malloc_current_mallinfo>
20400cf6:	b785                	j	20400c56 <_malloc_r+0x426>
20400cf8:	004ba783          	lw	a5,4(s7)
20400cfc:	ff4a8413          	addi	s0,s5,-12
20400d00:	9861                	andi	s0,s0,-8
20400d02:	8b85                	andi	a5,a5,1
20400d04:	8fc1                	or	a5,a5,s0
20400d06:	00fba223          	sw	a5,4(s7)
20400d0a:	4695                	li	a3,5
20400d0c:	008b87b3          	add	a5,s7,s0
20400d10:	c3d4                	sw	a3,4(a5)
20400d12:	c794                	sw	a3,8(a5)
20400d14:	de8771e3          	bgeu	a4,s0,20400af6 <_malloc_r+0x2c6>
20400d18:	008b8593          	addi	a1,s7,8
20400d1c:	854a                	mv	a0,s2
20400d1e:	2af000ef          	jal	ra,204017cc <_free_r>
20400d22:	bbd1                	j	20400af6 <_malloc_r+0x2c6>
20400d24:	0089a403          	lw	s0,8(s3)
20400d28:	0014e793          	ori	a5,s1,1
20400d2c:	c05c                	sw	a5,4(s0)
20400d2e:	009407b3          	add	a5,s0,s1
20400d32:	5fbff697          	auipc	a3,0x5fbff
20400d36:	6ef6af23          	sw	a5,1790(a3) # 80000430 <__malloc_av_+0x8>
20400d3a:	b659                	j	204008c0 <_malloc_r+0x90>

20400d3c <memchr>:
memchr():
20400d3c:	0ff5f593          	andi	a1,a1,255
20400d40:	962a                	add	a2,a2,a0
20400d42:	00c51463          	bne	a0,a2,20400d4a <memchr+0xe>
20400d46:	4501                	li	a0,0
20400d48:	8082                	ret
20400d4a:	00054783          	lbu	a5,0(a0) # 1000 <__heap_size+0xc00>
20400d4e:	feb78de3          	beq	a5,a1,20400d48 <memchr+0xc>
20400d52:	0505                	addi	a0,a0,1
20400d54:	b7fd                	j	20400d42 <memchr+0x6>

20400d56 <memcpy>:
memcpy():
20400d56:	00a5c7b3          	xor	a5,a1,a0
20400d5a:	8b8d                	andi	a5,a5,3
20400d5c:	00c50733          	add	a4,a0,a2
20400d60:	e781                	bnez	a5,20400d68 <memcpy+0x12>
20400d62:	478d                	li	a5,3
20400d64:	00c7ee63          	bltu	a5,a2,20400d80 <memcpy+0x2a>
20400d68:	87aa                	mv	a5,a0
20400d6a:	0ae57063          	bgeu	a0,a4,20400e0a <memcpy+0xb4>
20400d6e:	0005c683          	lbu	a3,0(a1)
20400d72:	0785                	addi	a5,a5,1
20400d74:	0585                	addi	a1,a1,1
20400d76:	fed78fa3          	sb	a3,-1(a5)
20400d7a:	fee7eae3          	bltu	a5,a4,20400d6e <memcpy+0x18>
20400d7e:	8082                	ret
20400d80:	00357693          	andi	a3,a0,3
20400d84:	87aa                	mv	a5,a0
20400d86:	ca91                	beqz	a3,20400d9a <memcpy+0x44>
20400d88:	0005c683          	lbu	a3,0(a1)
20400d8c:	0785                	addi	a5,a5,1
20400d8e:	0585                	addi	a1,a1,1
20400d90:	fed78fa3          	sb	a3,-1(a5)
20400d94:	0037f693          	andi	a3,a5,3
20400d98:	b7fd                	j	20400d86 <memcpy+0x30>
20400d9a:	ffc77693          	andi	a3,a4,-4
20400d9e:	fe068613          	addi	a2,a3,-32
20400da2:	06c7f063          	bgeu	a5,a2,20400e02 <memcpy+0xac>
20400da6:	0005a383          	lw	t2,0(a1)
20400daa:	0045a283          	lw	t0,4(a1)
20400dae:	0085af83          	lw	t6,8(a1)
20400db2:	00c5af03          	lw	t5,12(a1)
20400db6:	0105ae83          	lw	t4,16(a1)
20400dba:	0145ae03          	lw	t3,20(a1)
20400dbe:	0185a303          	lw	t1,24(a1)
20400dc2:	01c5a883          	lw	a7,28(a1)
20400dc6:	02458593          	addi	a1,a1,36
20400dca:	0077a023          	sw	t2,0(a5)
20400dce:	ffc5a803          	lw	a6,-4(a1)
20400dd2:	0057a223          	sw	t0,4(a5)
20400dd6:	01f7a423          	sw	t6,8(a5)
20400dda:	01e7a623          	sw	t5,12(a5)
20400dde:	01d7a823          	sw	t4,16(a5)
20400de2:	01c7aa23          	sw	t3,20(a5)
20400de6:	0067ac23          	sw	t1,24(a5)
20400dea:	0117ae23          	sw	a7,28(a5)
20400dee:	02478793          	addi	a5,a5,36
20400df2:	ff07ae23          	sw	a6,-4(a5)
20400df6:	b775                	j	20400da2 <memcpy+0x4c>
20400df8:	4190                	lw	a2,0(a1)
20400dfa:	0791                	addi	a5,a5,4
20400dfc:	0591                	addi	a1,a1,4
20400dfe:	fec7ae23          	sw	a2,-4(a5)
20400e02:	fed7ebe3          	bltu	a5,a3,20400df8 <memcpy+0xa2>
20400e06:	f6e7e4e3          	bltu	a5,a4,20400d6e <memcpy+0x18>
20400e0a:	8082                	ret

20400e0c <memmove>:
memmove():
20400e0c:	04a5f363          	bgeu	a1,a0,20400e52 <memmove+0x46>
20400e10:	00c586b3          	add	a3,a1,a2
20400e14:	02d57f63          	bgeu	a0,a3,20400e52 <memmove+0x46>
20400e18:	fff64593          	not	a1,a2
20400e1c:	4781                	li	a5,0
20400e1e:	17fd                	addi	a5,a5,-1
20400e20:	00f59363          	bne	a1,a5,20400e26 <memmove+0x1a>
20400e24:	8082                	ret
20400e26:	00f68733          	add	a4,a3,a5
20400e2a:	00074803          	lbu	a6,0(a4)
20400e2e:	00c78733          	add	a4,a5,a2
20400e32:	972a                	add	a4,a4,a0
20400e34:	01070023          	sb	a6,0(a4)
20400e38:	b7dd                	j	20400e1e <memmove+0x12>
20400e3a:	00f58733          	add	a4,a1,a5
20400e3e:	00074683          	lbu	a3,0(a4)
20400e42:	00f50733          	add	a4,a0,a5
20400e46:	0785                	addi	a5,a5,1
20400e48:	00d70023          	sb	a3,0(a4)
20400e4c:	fef617e3          	bne	a2,a5,20400e3a <memmove+0x2e>
20400e50:	8082                	ret
20400e52:	4781                	li	a5,0
20400e54:	bfe5                	j	20400e4c <memmove+0x40>

20400e56 <memset>:
memset():
20400e56:	433d                	li	t1,15
20400e58:	872a                	mv	a4,a0
20400e5a:	02c37363          	bgeu	t1,a2,20400e80 <memset+0x2a>
20400e5e:	00f77793          	andi	a5,a4,15
20400e62:	efbd                	bnez	a5,20400ee0 <memset+0x8a>
20400e64:	e5ad                	bnez	a1,20400ece <memset+0x78>
20400e66:	ff067693          	andi	a3,a2,-16
20400e6a:	8a3d                	andi	a2,a2,15
20400e6c:	96ba                	add	a3,a3,a4
20400e6e:	c30c                	sw	a1,0(a4)
20400e70:	c34c                	sw	a1,4(a4)
20400e72:	c70c                	sw	a1,8(a4)
20400e74:	c74c                	sw	a1,12(a4)
20400e76:	0741                	addi	a4,a4,16
20400e78:	fed76be3          	bltu	a4,a3,20400e6e <memset+0x18>
20400e7c:	e211                	bnez	a2,20400e80 <memset+0x2a>
20400e7e:	8082                	ret
20400e80:	40c306b3          	sub	a3,t1,a2
20400e84:	068a                	slli	a3,a3,0x2
20400e86:	00000297          	auipc	t0,0x0
20400e8a:	9696                	add	a3,a3,t0
20400e8c:	00a68067          	jr	10(a3)
20400e90:	00b70723          	sb	a1,14(a4)
20400e94:	00b706a3          	sb	a1,13(a4)
20400e98:	00b70623          	sb	a1,12(a4)
20400e9c:	00b705a3          	sb	a1,11(a4)
20400ea0:	00b70523          	sb	a1,10(a4)
20400ea4:	00b704a3          	sb	a1,9(a4)
20400ea8:	00b70423          	sb	a1,8(a4)
20400eac:	00b703a3          	sb	a1,7(a4)
20400eb0:	00b70323          	sb	a1,6(a4)
20400eb4:	00b702a3          	sb	a1,5(a4)
20400eb8:	00b70223          	sb	a1,4(a4)
20400ebc:	00b701a3          	sb	a1,3(a4)
20400ec0:	00b70123          	sb	a1,2(a4)
20400ec4:	00b700a3          	sb	a1,1(a4)
20400ec8:	00b70023          	sb	a1,0(a4)
20400ecc:	8082                	ret
20400ece:	0ff5f593          	andi	a1,a1,255
20400ed2:	00859693          	slli	a3,a1,0x8
20400ed6:	8dd5                	or	a1,a1,a3
20400ed8:	01059693          	slli	a3,a1,0x10
20400edc:	8dd5                	or	a1,a1,a3
20400ede:	b761                	j	20400e66 <memset+0x10>
20400ee0:	00279693          	slli	a3,a5,0x2
20400ee4:	00000297          	auipc	t0,0x0
20400ee8:	9696                	add	a3,a3,t0
20400eea:	8286                	mv	t0,ra
20400eec:	fa8680e7          	jalr	-88(a3)
20400ef0:	8096                	mv	ra,t0
20400ef2:	17c1                	addi	a5,a5,-16
20400ef4:	8f1d                	sub	a4,a4,a5
20400ef6:	963e                	add	a2,a2,a5
20400ef8:	f8c374e3          	bgeu	t1,a2,20400e80 <memset+0x2a>
20400efc:	b7a5                	j	20400e64 <memset+0xe>

20400efe <__malloc_lock>:
__malloc_lock():
20400efe:	8082                	ret

20400f00 <__malloc_unlock>:
__malloc_unlock():
20400f00:	8082                	ret

20400f02 <_realloc_r>:
_realloc_r():
20400f02:	7139                	addi	sp,sp,-64
20400f04:	dc22                	sw	s0,56(sp)
20400f06:	de06                	sw	ra,60(sp)
20400f08:	842e                	mv	s0,a1
20400f0a:	da26                	sw	s1,52(sp)
20400f0c:	d84a                	sw	s2,48(sp)
20400f0e:	d64e                	sw	s3,44(sp)
20400f10:	d452                	sw	s4,40(sp)
20400f12:	d256                	sw	s5,36(sp)
20400f14:	d05a                	sw	s6,32(sp)
20400f16:	ce5e                	sw	s7,28(sp)
20400f18:	85b2                	mv	a1,a2
20400f1a:	ec01                	bnez	s0,20400f32 <_realloc_r+0x30>
20400f1c:	5462                	lw	s0,56(sp)
20400f1e:	50f2                	lw	ra,60(sp)
20400f20:	54d2                	lw	s1,52(sp)
20400f22:	5942                	lw	s2,48(sp)
20400f24:	59b2                	lw	s3,44(sp)
20400f26:	5a22                	lw	s4,40(sp)
20400f28:	5a92                	lw	s5,36(sp)
20400f2a:	5b02                	lw	s6,32(sp)
20400f2c:	4bf2                	lw	s7,28(sp)
20400f2e:	6121                	addi	sp,sp,64
20400f30:	b201                	j	20400830 <_malloc_r>
20400f32:	8aaa                	mv	s5,a0
20400f34:	c632                	sw	a2,12(sp)
20400f36:	37e1                	jal	20400efe <__malloc_lock>
20400f38:	45b2                	lw	a1,12(sp)
20400f3a:	47d9                	li	a5,22
20400f3c:	00b58993          	addi	s3,a1,11
20400f40:	0337f663          	bgeu	a5,s3,20400f6c <_realloc_r+0x6a>
20400f44:	ff89fb13          	andi	s6,s3,-8
20400f48:	020b5363          	bgez	s6,20400f6e <_realloc_r+0x6c>
20400f4c:	47b1                	li	a5,12
20400f4e:	00faa023          	sw	a5,0(s5)
20400f52:	4a01                	li	s4,0
20400f54:	50f2                	lw	ra,60(sp)
20400f56:	5462                	lw	s0,56(sp)
20400f58:	8552                	mv	a0,s4
20400f5a:	54d2                	lw	s1,52(sp)
20400f5c:	5942                	lw	s2,48(sp)
20400f5e:	59b2                	lw	s3,44(sp)
20400f60:	5a22                	lw	s4,40(sp)
20400f62:	5a92                	lw	s5,36(sp)
20400f64:	5b02                	lw	s6,32(sp)
20400f66:	4bf2                	lw	s7,28(sp)
20400f68:	6121                	addi	sp,sp,64
20400f6a:	8082                	ret
20400f6c:	4b41                	li	s6,16
20400f6e:	fcbb6fe3          	bltu	s6,a1,20400f4c <_realloc_r+0x4a>
20400f72:	ffc42683          	lw	a3,-4(s0)
20400f76:	ff840b93          	addi	s7,s0,-8
20400f7a:	ffc6f913          	andi	s2,a3,-4
20400f7e:	2f695c63          	bge	s2,s6,20401276 <_realloc_r+0x374>
20400f82:	5fbff717          	auipc	a4,0x5fbff
20400f86:	4a670713          	addi	a4,a4,1190 # 80000428 <__malloc_av_>
20400f8a:	4710                	lw	a2,8(a4)
20400f8c:	012b87b3          	add	a5,s7,s2
20400f90:	43d8                	lw	a4,4(a5)
20400f92:	00f60863          	beq	a2,a5,20400fa2 <_realloc_r+0xa0>
20400f96:	ffe77513          	andi	a0,a4,-2
20400f9a:	953e                	add	a0,a0,a5
20400f9c:	4148                	lw	a0,4(a0)
20400f9e:	8905                	andi	a0,a0,1
20400fa0:	e929                	bnez	a0,20400ff2 <_realloc_r+0xf0>
20400fa2:	9b71                	andi	a4,a4,-4
20400fa4:	00e909b3          	add	s3,s2,a4
20400fa8:	02f61d63          	bne	a2,a5,20400fe2 <_realloc_r+0xe0>
20400fac:	010b0513          	addi	a0,s6,16
20400fb0:	04a9c363          	blt	s3,a0,20400ff6 <_realloc_r+0xf4>
20400fb4:	9bda                	add	s7,s7,s6
20400fb6:	416989b3          	sub	s3,s3,s6
20400fba:	5fbff797          	auipc	a5,0x5fbff
20400fbe:	4777ab23          	sw	s7,1142(a5) # 80000430 <__malloc_av_+0x8>
20400fc2:	0019e993          	ori	s3,s3,1
20400fc6:	013ba223          	sw	s3,4(s7)
20400fca:	ffc42983          	lw	s3,-4(s0)
20400fce:	8556                	mv	a0,s5
20400fd0:	8a22                	mv	s4,s0
20400fd2:	0019f993          	andi	s3,s3,1
20400fd6:	0169e9b3          	or	s3,s3,s6
20400fda:	ff342e23          	sw	s3,-4(s0)
20400fde:	370d                	jal	20400f00 <__malloc_unlock>
20400fe0:	bf95                	j	20400f54 <_realloc_r+0x52>
20400fe2:	0169ca63          	blt	s3,s6,20400ff6 <_realloc_r+0xf4>
20400fe6:	47d8                	lw	a4,12(a5)
20400fe8:	479c                	lw	a5,8(a5)
20400fea:	c7d8                	sw	a4,12(a5)
20400fec:	c71c                	sw	a5,8(a4)
20400fee:	84de                	mv	s1,s7
20400ff0:	aa11                	j	20401104 <_realloc_r+0x202>
20400ff2:	4701                	li	a4,0
20400ff4:	4781                	li	a5,0
20400ff6:	8a85                	andi	a3,a3,1
20400ff8:	1e069363          	bnez	a3,204011de <_realloc_r+0x2dc>
20400ffc:	ff842483          	lw	s1,-8(s0)
20401000:	409b84b3          	sub	s1,s7,s1
20401004:	0044aa03          	lw	s4,4(s1)
20401008:	ffca7a13          	andi	s4,s4,-4
2040100c:	9a4a                	add	s4,s4,s2
2040100e:	14078f63          	beqz	a5,2040116c <_realloc_r+0x26a>
20401012:	014709b3          	add	s3,a4,s4
20401016:	0af61263          	bne	a2,a5,204010ba <_realloc_r+0x1b8>
2040101a:	010b0793          	addi	a5,s6,16
2040101e:	14f9c763          	blt	s3,a5,2040116c <_realloc_r+0x26a>
20401022:	4498                	lw	a4,8(s1)
20401024:	44dc                	lw	a5,12(s1)
20401026:	ffc90613          	addi	a2,s2,-4
2040102a:	00848a13          	addi	s4,s1,8
2040102e:	c75c                	sw	a5,12(a4)
20401030:	c798                	sw	a4,8(a5)
20401032:	02400713          	li	a4,36
20401036:	06c76e63          	bltu	a4,a2,204010b2 <_realloc_r+0x1b0>
2040103a:	46cd                	li	a3,19
2040103c:	87d2                	mv	a5,s4
2040103e:	00c6fc63          	bgeu	a3,a2,20401056 <_realloc_r+0x154>
20401042:	401c                	lw	a5,0(s0)
20401044:	c49c                	sw	a5,8(s1)
20401046:	405c                	lw	a5,4(s0)
20401048:	c4dc                	sw	a5,12(s1)
2040104a:	47ed                	li	a5,27
2040104c:	04c7e063          	bltu	a5,a2,2040108c <_realloc_r+0x18a>
20401050:	0421                	addi	s0,s0,8
20401052:	01048793          	addi	a5,s1,16
20401056:	4018                	lw	a4,0(s0)
20401058:	c398                	sw	a4,0(a5)
2040105a:	4058                	lw	a4,4(s0)
2040105c:	c3d8                	sw	a4,4(a5)
2040105e:	4418                	lw	a4,8(s0)
20401060:	c798                	sw	a4,8(a5)
20401062:	016487b3          	add	a5,s1,s6
20401066:	416989b3          	sub	s3,s3,s6
2040106a:	5fbff717          	auipc	a4,0x5fbff
2040106e:	3cf72323          	sw	a5,966(a4) # 80000430 <__malloc_av_+0x8>
20401072:	0019e993          	ori	s3,s3,1
20401076:	0137a223          	sw	s3,4(a5)
2040107a:	40dc                	lw	a5,4(s1)
2040107c:	8b85                	andi	a5,a5,1
2040107e:	0167e9b3          	or	s3,a5,s6
20401082:	0134a223          	sw	s3,4(s1)
20401086:	8556                	mv	a0,s5
20401088:	3da5                	jal	20400f00 <__malloc_unlock>
2040108a:	b5e9                	j	20400f54 <_realloc_r+0x52>
2040108c:	441c                	lw	a5,8(s0)
2040108e:	c89c                	sw	a5,16(s1)
20401090:	445c                	lw	a5,12(s0)
20401092:	c8dc                	sw	a5,20(s1)
20401094:	00e60663          	beq	a2,a4,204010a0 <_realloc_r+0x19e>
20401098:	0441                	addi	s0,s0,16
2040109a:	01848793          	addi	a5,s1,24
2040109e:	bf65                	j	20401056 <_realloc_r+0x154>
204010a0:	481c                	lw	a5,16(s0)
204010a2:	0461                	addi	s0,s0,24
204010a4:	cc9c                	sw	a5,24(s1)
204010a6:	ffc42703          	lw	a4,-4(s0)
204010aa:	02048793          	addi	a5,s1,32
204010ae:	ccd8                	sw	a4,28(s1)
204010b0:	b75d                	j	20401056 <_realloc_r+0x154>
204010b2:	85a2                	mv	a1,s0
204010b4:	8552                	mv	a0,s4
204010b6:	3b99                	jal	20400e0c <memmove>
204010b8:	b76d                	j	20401062 <_realloc_r+0x160>
204010ba:	0b69c963          	blt	s3,s6,2040116c <_realloc_r+0x26a>
204010be:	47d8                	lw	a4,12(a5)
204010c0:	479c                	lw	a5,8(a5)
204010c2:	ffc90613          	addi	a2,s2,-4
204010c6:	00848513          	addi	a0,s1,8
204010ca:	c7d8                	sw	a4,12(a5)
204010cc:	c71c                	sw	a5,8(a4)
204010ce:	4498                	lw	a4,8(s1)
204010d0:	44dc                	lw	a5,12(s1)
204010d2:	c75c                	sw	a5,12(a4)
204010d4:	c798                	sw	a4,8(a5)
204010d6:	02400793          	li	a5,36
204010da:	08c7e663          	bltu	a5,a2,20401166 <_realloc_r+0x264>
204010de:	474d                	li	a4,19
204010e0:	00c77c63          	bgeu	a4,a2,204010f8 <_realloc_r+0x1f6>
204010e4:	4018                	lw	a4,0(s0)
204010e6:	c498                	sw	a4,8(s1)
204010e8:	4058                	lw	a4,4(s0)
204010ea:	c4d8                	sw	a4,12(s1)
204010ec:	476d                	li	a4,27
204010ee:	04c76963          	bltu	a4,a2,20401140 <_realloc_r+0x23e>
204010f2:	0421                	addi	s0,s0,8
204010f4:	01048513          	addi	a0,s1,16
204010f8:	401c                	lw	a5,0(s0)
204010fa:	c11c                	sw	a5,0(a0)
204010fc:	405c                	lw	a5,4(s0)
204010fe:	c15c                	sw	a5,4(a0)
20401100:	441c                	lw	a5,8(s0)
20401102:	c51c                	sw	a5,8(a0)
20401104:	40d8                	lw	a4,4(s1)
20401106:	416986b3          	sub	a3,s3,s6
2040110a:	463d                	li	a2,15
2040110c:	8b05                	andi	a4,a4,1
2040110e:	013487b3          	add	a5,s1,s3
20401112:	16d67463          	bgeu	a2,a3,2040127a <_realloc_r+0x378>
20401116:	00eb69b3          	or	s3,s6,a4
2040111a:	0134a223          	sw	s3,4(s1)
2040111e:	016485b3          	add	a1,s1,s6
20401122:	0016e693          	ori	a3,a3,1
20401126:	c1d4                	sw	a3,4(a1)
20401128:	43d8                	lw	a4,4(a5)
2040112a:	05a1                	addi	a1,a1,8
2040112c:	8556                	mv	a0,s5
2040112e:	00176713          	ori	a4,a4,1
20401132:	c3d8                	sw	a4,4(a5)
20401134:	2d61                	jal	204017cc <_free_r>
20401136:	8556                	mv	a0,s5
20401138:	33e1                	jal	20400f00 <__malloc_unlock>
2040113a:	00848a13          	addi	s4,s1,8
2040113e:	bd19                	j	20400f54 <_realloc_r+0x52>
20401140:	4418                	lw	a4,8(s0)
20401142:	c898                	sw	a4,16(s1)
20401144:	4458                	lw	a4,12(s0)
20401146:	c8d8                	sw	a4,20(s1)
20401148:	00f60663          	beq	a2,a5,20401154 <_realloc_r+0x252>
2040114c:	0441                	addi	s0,s0,16
2040114e:	01848513          	addi	a0,s1,24
20401152:	b75d                	j	204010f8 <_realloc_r+0x1f6>
20401154:	481c                	lw	a5,16(s0)
20401156:	02048513          	addi	a0,s1,32
2040115a:	0461                	addi	s0,s0,24
2040115c:	cc9c                	sw	a5,24(s1)
2040115e:	ffc42783          	lw	a5,-4(s0)
20401162:	ccdc                	sw	a5,28(s1)
20401164:	bf51                	j	204010f8 <_realloc_r+0x1f6>
20401166:	85a2                	mv	a1,s0
20401168:	3155                	jal	20400e0c <memmove>
2040116a:	bf69                	j	20401104 <_realloc_r+0x202>
2040116c:	076a4963          	blt	s4,s6,204011de <_realloc_r+0x2dc>
20401170:	44dc                	lw	a5,12(s1)
20401172:	4498                	lw	a4,8(s1)
20401174:	ffc90613          	addi	a2,s2,-4
20401178:	00848513          	addi	a0,s1,8
2040117c:	c75c                	sw	a5,12(a4)
2040117e:	c798                	sw	a4,8(a5)
20401180:	02400793          	li	a5,36
20401184:	04c7ea63          	bltu	a5,a2,204011d8 <_realloc_r+0x2d6>
20401188:	474d                	li	a4,19
2040118a:	00c77c63          	bgeu	a4,a2,204011a2 <_realloc_r+0x2a0>
2040118e:	4018                	lw	a4,0(s0)
20401190:	c498                	sw	a4,8(s1)
20401192:	4058                	lw	a4,4(s0)
20401194:	c4d8                	sw	a4,12(s1)
20401196:	476d                	li	a4,27
20401198:	00c76d63          	bltu	a4,a2,204011b2 <_realloc_r+0x2b0>
2040119c:	0421                	addi	s0,s0,8
2040119e:	01048513          	addi	a0,s1,16
204011a2:	401c                	lw	a5,0(s0)
204011a4:	c11c                	sw	a5,0(a0)
204011a6:	405c                	lw	a5,4(s0)
204011a8:	c15c                	sw	a5,4(a0)
204011aa:	441c                	lw	a5,8(s0)
204011ac:	c51c                	sw	a5,8(a0)
204011ae:	89d2                	mv	s3,s4
204011b0:	bf91                	j	20401104 <_realloc_r+0x202>
204011b2:	4418                	lw	a4,8(s0)
204011b4:	c898                	sw	a4,16(s1)
204011b6:	4458                	lw	a4,12(s0)
204011b8:	c8d8                	sw	a4,20(s1)
204011ba:	00f60663          	beq	a2,a5,204011c6 <_realloc_r+0x2c4>
204011be:	0441                	addi	s0,s0,16
204011c0:	01848513          	addi	a0,s1,24
204011c4:	bff9                	j	204011a2 <_realloc_r+0x2a0>
204011c6:	481c                	lw	a5,16(s0)
204011c8:	02048513          	addi	a0,s1,32
204011cc:	0461                	addi	s0,s0,24
204011ce:	cc9c                	sw	a5,24(s1)
204011d0:	ffc42783          	lw	a5,-4(s0)
204011d4:	ccdc                	sw	a5,28(s1)
204011d6:	b7f1                	j	204011a2 <_realloc_r+0x2a0>
204011d8:	85a2                	mv	a1,s0
204011da:	390d                	jal	20400e0c <memmove>
204011dc:	bfc9                	j	204011ae <_realloc_r+0x2ac>
204011de:	8556                	mv	a0,s5
204011e0:	e50ff0ef          	jal	ra,20400830 <_malloc_r>
204011e4:	8a2a                	mv	s4,a0
204011e6:	ea0500e3          	beqz	a0,20401086 <_realloc_r+0x184>
204011ea:	ffc42783          	lw	a5,-4(s0)
204011ee:	ff850713          	addi	a4,a0,-8
204011f2:	9bf9                	andi	a5,a5,-2
204011f4:	97de                	add	a5,a5,s7
204011f6:	00e79863          	bne	a5,a4,20401206 <_realloc_r+0x304>
204011fa:	ffc52983          	lw	s3,-4(a0)
204011fe:	ffc9f993          	andi	s3,s3,-4
20401202:	99ca                	add	s3,s3,s2
20401204:	b3ed                	j	20400fee <_realloc_r+0xec>
20401206:	ffc90613          	addi	a2,s2,-4
2040120a:	02400793          	li	a5,36
2040120e:	06c7e163          	bltu	a5,a2,20401270 <_realloc_r+0x36e>
20401212:	474d                	li	a4,19
20401214:	04c77b63          	bgeu	a4,a2,2040126a <_realloc_r+0x368>
20401218:	4018                	lw	a4,0(s0)
2040121a:	c118                	sw	a4,0(a0)
2040121c:	4058                	lw	a4,4(s0)
2040121e:	c158                	sw	a4,4(a0)
20401220:	476d                	li	a4,27
20401222:	02c76063          	bltu	a4,a2,20401242 <_realloc_r+0x340>
20401226:	00840713          	addi	a4,s0,8
2040122a:	00850793          	addi	a5,a0,8
2040122e:	4314                	lw	a3,0(a4)
20401230:	c394                	sw	a3,0(a5)
20401232:	4354                	lw	a3,4(a4)
20401234:	c3d4                	sw	a3,4(a5)
20401236:	4718                	lw	a4,8(a4)
20401238:	c798                	sw	a4,8(a5)
2040123a:	85a2                	mv	a1,s0
2040123c:	8556                	mv	a0,s5
2040123e:	2379                	jal	204017cc <_free_r>
20401240:	b599                	j	20401086 <_realloc_r+0x184>
20401242:	4418                	lw	a4,8(s0)
20401244:	c518                	sw	a4,8(a0)
20401246:	4458                	lw	a4,12(s0)
20401248:	c558                	sw	a4,12(a0)
2040124a:	00f60763          	beq	a2,a5,20401258 <_realloc_r+0x356>
2040124e:	01040713          	addi	a4,s0,16
20401252:	01050793          	addi	a5,a0,16
20401256:	bfe1                	j	2040122e <_realloc_r+0x32c>
20401258:	481c                	lw	a5,16(s0)
2040125a:	01840713          	addi	a4,s0,24
2040125e:	c91c                	sw	a5,16(a0)
20401260:	4854                	lw	a3,20(s0)
20401262:	01850793          	addi	a5,a0,24
20401266:	c954                	sw	a3,20(a0)
20401268:	b7d9                	j	2040122e <_realloc_r+0x32c>
2040126a:	87aa                	mv	a5,a0
2040126c:	8722                	mv	a4,s0
2040126e:	b7c1                	j	2040122e <_realloc_r+0x32c>
20401270:	85a2                	mv	a1,s0
20401272:	3e69                	jal	20400e0c <memmove>
20401274:	b7d9                	j	2040123a <_realloc_r+0x338>
20401276:	89ca                	mv	s3,s2
20401278:	bb9d                	j	20400fee <_realloc_r+0xec>
2040127a:	00e9e9b3          	or	s3,s3,a4
2040127e:	0134a223          	sw	s3,4(s1)
20401282:	43d8                	lw	a4,4(a5)
20401284:	00176713          	ori	a4,a4,1
20401288:	c3d8                	sw	a4,4(a5)
2040128a:	b575                	j	20401136 <_realloc_r+0x234>

2040128c <_sbrk_r>:
_sbrk_r():
2040128c:	1141                	addi	sp,sp,-16
2040128e:	c422                	sw	s0,8(sp)
20401290:	842a                	mv	s0,a0
20401292:	852e                	mv	a0,a1
20401294:	5fc00797          	auipc	a5,0x5fc00
20401298:	e807aa23          	sw	zero,-364(a5) # 80001128 <errno>
2040129c:	c606                	sw	ra,12(sp)
2040129e:	194030ef          	jal	ra,20404432 <_sbrk>
204012a2:	57fd                	li	a5,-1
204012a4:	00f51963          	bne	a0,a5,204012b6 <_sbrk_r+0x2a>
204012a8:	5fc00797          	auipc	a5,0x5fc00
204012ac:	e8078793          	addi	a5,a5,-384 # 80001128 <errno>
204012b0:	439c                	lw	a5,0(a5)
204012b2:	c391                	beqz	a5,204012b6 <_sbrk_r+0x2a>
204012b4:	c01c                	sw	a5,0(s0)
204012b6:	40b2                	lw	ra,12(sp)
204012b8:	4422                	lw	s0,8(sp)
204012ba:	0141                	addi	sp,sp,16
204012bc:	8082                	ret

204012be <__sread>:
__sread():
204012be:	1141                	addi	sp,sp,-16
204012c0:	c422                	sw	s0,8(sp)
204012c2:	842e                	mv	s0,a1
204012c4:	00e59583          	lh	a1,14(a1)
204012c8:	c606                	sw	ra,12(sp)
204012ca:	00b000ef          	jal	ra,20401ad4 <_read_r>
204012ce:	00054963          	bltz	a0,204012e0 <__sread+0x22>
204012d2:	483c                	lw	a5,80(s0)
204012d4:	97aa                	add	a5,a5,a0
204012d6:	c83c                	sw	a5,80(s0)
204012d8:	40b2                	lw	ra,12(sp)
204012da:	4422                	lw	s0,8(sp)
204012dc:	0141                	addi	sp,sp,16
204012de:	8082                	ret
204012e0:	00c45783          	lhu	a5,12(s0)
204012e4:	777d                	lui	a4,0xfffff
204012e6:	177d                	addi	a4,a4,-1
204012e8:	8ff9                	and	a5,a5,a4
204012ea:	00f41623          	sh	a5,12(s0)
204012ee:	b7ed                	j	204012d8 <__sread+0x1a>

204012f0 <__seofread>:
__seofread():
204012f0:	4501                	li	a0,0
204012f2:	8082                	ret

204012f4 <__swrite>:
__swrite():
204012f4:	00c5d783          	lhu	a5,12(a1)
204012f8:	1101                	addi	sp,sp,-32
204012fa:	cc22                	sw	s0,24(sp)
204012fc:	ca26                	sw	s1,20(sp)
204012fe:	c84a                	sw	s2,16(sp)
20401300:	c64e                	sw	s3,12(sp)
20401302:	ce06                	sw	ra,28(sp)
20401304:	1007f793          	andi	a5,a5,256
20401308:	84aa                	mv	s1,a0
2040130a:	842e                	mv	s0,a1
2040130c:	8932                	mv	s2,a2
2040130e:	89b6                	mv	s3,a3
20401310:	c791                	beqz	a5,2040131c <__swrite+0x28>
20401312:	00e59583          	lh	a1,14(a1)
20401316:	4689                	li	a3,2
20401318:	4601                	li	a2,0
2040131a:	2549                	jal	2040199c <_lseek_r>
2040131c:	00c45783          	lhu	a5,12(s0)
20401320:	777d                	lui	a4,0xfffff
20401322:	177d                	addi	a4,a4,-1
20401324:	8ff9                	and	a5,a5,a4
20401326:	00f41623          	sh	a5,12(s0)
2040132a:	00e41583          	lh	a1,14(s0)
2040132e:	4462                	lw	s0,24(sp)
20401330:	40f2                	lw	ra,28(sp)
20401332:	86ce                	mv	a3,s3
20401334:	864a                	mv	a2,s2
20401336:	49b2                	lw	s3,12(sp)
20401338:	4942                	lw	s2,16(sp)
2040133a:	8526                	mv	a0,s1
2040133c:	44d2                	lw	s1,20(sp)
2040133e:	6105                	addi	sp,sp,32
20401340:	a83d                	j	2040137e <_write_r>

20401342 <__sseek>:
__sseek():
20401342:	1141                	addi	sp,sp,-16
20401344:	c422                	sw	s0,8(sp)
20401346:	842e                	mv	s0,a1
20401348:	00e59583          	lh	a1,14(a1)
2040134c:	c606                	sw	ra,12(sp)
2040134e:	25b9                	jal	2040199c <_lseek_r>
20401350:	57fd                	li	a5,-1
20401352:	00c45703          	lhu	a4,12(s0)
20401356:	00f51b63          	bne	a0,a5,2040136c <__sseek+0x2a>
2040135a:	77fd                	lui	a5,0xfffff
2040135c:	17fd                	addi	a5,a5,-1
2040135e:	8ff9                	and	a5,a5,a4
20401360:	00f41623          	sh	a5,12(s0)
20401364:	40b2                	lw	ra,12(sp)
20401366:	4422                	lw	s0,8(sp)
20401368:	0141                	addi	sp,sp,16
2040136a:	8082                	ret
2040136c:	6785                	lui	a5,0x1
2040136e:	8fd9                	or	a5,a5,a4
20401370:	00f41623          	sh	a5,12(s0)
20401374:	c828                	sw	a0,80(s0)
20401376:	b7fd                	j	20401364 <__sseek+0x22>

20401378 <__sclose>:
__sclose():
20401378:	00e59583          	lh	a1,14(a1)
2040137c:	aa11                	j	20401490 <_close_r>

2040137e <_write_r>:
_write_r():
2040137e:	1141                	addi	sp,sp,-16
20401380:	c422                	sw	s0,8(sp)
20401382:	842a                	mv	s0,a0
20401384:	852e                	mv	a0,a1
20401386:	85b2                	mv	a1,a2
20401388:	8636                	mv	a2,a3
2040138a:	5fc00797          	auipc	a5,0x5fc00
2040138e:	d807af23          	sw	zero,-610(a5) # 80001128 <errno>
20401392:	c606                	sw	ra,12(sp)
20401394:	102030ef          	jal	ra,20404496 <_write>
20401398:	57fd                	li	a5,-1
2040139a:	00f51963          	bne	a0,a5,204013ac <_write_r+0x2e>
2040139e:	5fc00797          	auipc	a5,0x5fc00
204013a2:	d8a78793          	addi	a5,a5,-630 # 80001128 <errno>
204013a6:	439c                	lw	a5,0(a5)
204013a8:	c391                	beqz	a5,204013ac <_write_r+0x2e>
204013aa:	c01c                	sw	a5,0(s0)
204013ac:	40b2                	lw	ra,12(sp)
204013ae:	4422                	lw	s0,8(sp)
204013b0:	0141                	addi	sp,sp,16
204013b2:	8082                	ret

204013b4 <__swsetup_r>:
__swsetup_r():
204013b4:	1141                	addi	sp,sp,-16
204013b6:	5fc00797          	auipc	a5,0x5fc00
204013ba:	d0278793          	addi	a5,a5,-766 # 800010b8 <_impure_ptr>
204013be:	c226                	sw	s1,4(sp)
204013c0:	84aa                	mv	s1,a0
204013c2:	4388                	lw	a0,0(a5)
204013c4:	c422                	sw	s0,8(sp)
204013c6:	c606                	sw	ra,12(sp)
204013c8:	842e                	mv	s0,a1
204013ca:	c509                	beqz	a0,204013d4 <__swsetup_r+0x20>
204013cc:	5d1c                	lw	a5,56(a0)
204013ce:	e399                	bnez	a5,204013d4 <__swsetup_r+0x20>
204013d0:	f9dfe0ef          	jal	ra,2040036c <__sinit>
204013d4:	00c41703          	lh	a4,12(s0)
204013d8:	01071793          	slli	a5,a4,0x10
204013dc:	83c1                	srli	a5,a5,0x10
204013de:	0087f693          	andi	a3,a5,8
204013e2:	eea1                	bnez	a3,2040143a <__swsetup_r+0x86>
204013e4:	0107f693          	andi	a3,a5,16
204013e8:	ee89                	bnez	a3,20401402 <__swsetup_r+0x4e>
204013ea:	47a5                	li	a5,9
204013ec:	c09c                	sw	a5,0(s1)
204013ee:	04076713          	ori	a4,a4,64
204013f2:	00e41623          	sh	a4,12(s0)
204013f6:	557d                	li	a0,-1
204013f8:	40b2                	lw	ra,12(sp)
204013fa:	4422                	lw	s0,8(sp)
204013fc:	4492                	lw	s1,4(sp)
204013fe:	0141                	addi	sp,sp,16
20401400:	8082                	ret
20401402:	8b91                	andi	a5,a5,4
20401404:	c78d                	beqz	a5,2040142e <__swsetup_r+0x7a>
20401406:	580c                	lw	a1,48(s0)
20401408:	c989                	beqz	a1,2040141a <__swsetup_r+0x66>
2040140a:	04040793          	addi	a5,s0,64
2040140e:	00f58463          	beq	a1,a5,20401416 <__swsetup_r+0x62>
20401412:	8526                	mv	a0,s1
20401414:	2e65                	jal	204017cc <_free_r>
20401416:	02042823          	sw	zero,48(s0)
2040141a:	00c45783          	lhu	a5,12(s0)
2040141e:	00042223          	sw	zero,4(s0)
20401422:	fdb7f793          	andi	a5,a5,-37
20401426:	00f41623          	sh	a5,12(s0)
2040142a:	481c                	lw	a5,16(s0)
2040142c:	c01c                	sw	a5,0(s0)
2040142e:	00c45783          	lhu	a5,12(s0)
20401432:	0087e793          	ori	a5,a5,8
20401436:	00f41623          	sh	a5,12(s0)
2040143a:	481c                	lw	a5,16(s0)
2040143c:	ef81                	bnez	a5,20401454 <__swsetup_r+0xa0>
2040143e:	00c45783          	lhu	a5,12(s0)
20401442:	20000713          	li	a4,512
20401446:	2807f793          	andi	a5,a5,640
2040144a:	00e78563          	beq	a5,a4,20401454 <__swsetup_r+0xa0>
2040144e:	85a2                	mv	a1,s0
20401450:	8526                	mv	a0,s1
20401452:	23d5                	jal	20401a36 <__smakebuf_r>
20401454:	00c45783          	lhu	a5,12(s0)
20401458:	0017f713          	andi	a4,a5,1
2040145c:	c705                	beqz	a4,20401484 <__swsetup_r+0xd0>
2040145e:	485c                	lw	a5,20(s0)
20401460:	00042423          	sw	zero,8(s0)
20401464:	40f007b3          	neg	a5,a5
20401468:	cc1c                	sw	a5,24(s0)
2040146a:	481c                	lw	a5,16(s0)
2040146c:	4501                	li	a0,0
2040146e:	f7c9                	bnez	a5,204013f8 <__swsetup_r+0x44>
20401470:	00c41783          	lh	a5,12(s0)
20401474:	0807f713          	andi	a4,a5,128
20401478:	d341                	beqz	a4,204013f8 <__swsetup_r+0x44>
2040147a:	0407e793          	ori	a5,a5,64
2040147e:	00f41623          	sh	a5,12(s0)
20401482:	bf95                	j	204013f6 <__swsetup_r+0x42>
20401484:	8b89                	andi	a5,a5,2
20401486:	4701                	li	a4,0
20401488:	e391                	bnez	a5,2040148c <__swsetup_r+0xd8>
2040148a:	4858                	lw	a4,20(s0)
2040148c:	c418                	sw	a4,8(s0)
2040148e:	bff1                	j	2040146a <__swsetup_r+0xb6>

20401490 <_close_r>:
_close_r():
20401490:	1141                	addi	sp,sp,-16
20401492:	c422                	sw	s0,8(sp)
20401494:	842a                	mv	s0,a0
20401496:	852e                	mv	a0,a1
20401498:	5fc00797          	auipc	a5,0x5fc00
2040149c:	c807a823          	sw	zero,-880(a5) # 80001128 <errno>
204014a0:	c606                	sw	ra,12(sp)
204014a2:	6d5020ef          	jal	ra,20404376 <_close>
204014a6:	57fd                	li	a5,-1
204014a8:	00f51963          	bne	a0,a5,204014ba <_close_r+0x2a>
204014ac:	5fc00797          	auipc	a5,0x5fc00
204014b0:	c7c78793          	addi	a5,a5,-900 # 80001128 <errno>
204014b4:	439c                	lw	a5,0(a5)
204014b6:	c391                	beqz	a5,204014ba <_close_r+0x2a>
204014b8:	c01c                	sw	a5,0(s0)
204014ba:	40b2                	lw	ra,12(sp)
204014bc:	4422                	lw	s0,8(sp)
204014be:	0141                	addi	sp,sp,16
204014c0:	8082                	ret

204014c2 <_fclose_r>:
_fclose_r():
204014c2:	1141                	addi	sp,sp,-16
204014c4:	c606                	sw	ra,12(sp)
204014c6:	c422                	sw	s0,8(sp)
204014c8:	c226                	sw	s1,4(sp)
204014ca:	c04a                	sw	s2,0(sp)
204014cc:	e989                	bnez	a1,204014de <_fclose_r+0x1c>
204014ce:	4901                	li	s2,0
204014d0:	40b2                	lw	ra,12(sp)
204014d2:	4422                	lw	s0,8(sp)
204014d4:	854a                	mv	a0,s2
204014d6:	4492                	lw	s1,4(sp)
204014d8:	4902                	lw	s2,0(sp)
204014da:	0141                	addi	sp,sp,16
204014dc:	8082                	ret
204014de:	84aa                	mv	s1,a0
204014e0:	842e                	mv	s0,a1
204014e2:	c509                	beqz	a0,204014ec <_fclose_r+0x2a>
204014e4:	5d1c                	lw	a5,56(a0)
204014e6:	e399                	bnez	a5,204014ec <_fclose_r+0x2a>
204014e8:	e85fe0ef          	jal	ra,2040036c <__sinit>
204014ec:	00c41783          	lh	a5,12(s0)
204014f0:	dff9                	beqz	a5,204014ce <_fclose_r+0xc>
204014f2:	85a2                	mv	a1,s0
204014f4:	8526                	mv	a0,s1
204014f6:	2085                	jal	20401556 <__sflush_r>
204014f8:	545c                	lw	a5,44(s0)
204014fa:	892a                	mv	s2,a0
204014fc:	c799                	beqz	a5,2040150a <_fclose_r+0x48>
204014fe:	4c4c                	lw	a1,28(s0)
20401500:	8526                	mv	a0,s1
20401502:	9782                	jalr	a5
20401504:	00055363          	bgez	a0,2040150a <_fclose_r+0x48>
20401508:	597d                	li	s2,-1
2040150a:	00c45783          	lhu	a5,12(s0)
2040150e:	0807f793          	andi	a5,a5,128
20401512:	c781                	beqz	a5,2040151a <_fclose_r+0x58>
20401514:	480c                	lw	a1,16(s0)
20401516:	8526                	mv	a0,s1
20401518:	2c55                	jal	204017cc <_free_r>
2040151a:	580c                	lw	a1,48(s0)
2040151c:	c989                	beqz	a1,2040152e <_fclose_r+0x6c>
2040151e:	04040793          	addi	a5,s0,64
20401522:	00f58463          	beq	a1,a5,2040152a <_fclose_r+0x68>
20401526:	8526                	mv	a0,s1
20401528:	2455                	jal	204017cc <_free_r>
2040152a:	02042823          	sw	zero,48(s0)
2040152e:	406c                	lw	a1,68(s0)
20401530:	c589                	beqz	a1,2040153a <_fclose_r+0x78>
20401532:	8526                	mv	a0,s1
20401534:	2c61                	jal	204017cc <_free_r>
20401536:	04042223          	sw	zero,68(s0)
2040153a:	f1dfe0ef          	jal	ra,20400456 <__sfp_lock_acquire>
2040153e:	00041623          	sh	zero,12(s0)
20401542:	f17fe0ef          	jal	ra,20400458 <__sfp_lock_release>
20401546:	b769                	j	204014d0 <_fclose_r+0xe>

20401548 <fclose>:
fclose():
20401548:	5fc00797          	auipc	a5,0x5fc00
2040154c:	b7078793          	addi	a5,a5,-1168 # 800010b8 <_impure_ptr>
20401550:	85aa                	mv	a1,a0
20401552:	4388                	lw	a0,0(a5)
20401554:	b7bd                	j	204014c2 <_fclose_r>

20401556 <__sflush_r>:
__sflush_r():
20401556:	00c59783          	lh	a5,12(a1)
2040155a:	1101                	addi	sp,sp,-32
2040155c:	cc22                	sw	s0,24(sp)
2040155e:	01079713          	slli	a4,a5,0x10
20401562:	8341                	srli	a4,a4,0x10
20401564:	ca26                	sw	s1,20(sp)
20401566:	ce06                	sw	ra,28(sp)
20401568:	c84a                	sw	s2,16(sp)
2040156a:	c64e                	sw	s3,12(sp)
2040156c:	00877693          	andi	a3,a4,8
20401570:	84aa                	mv	s1,a0
20401572:	842e                	mv	s0,a1
20401574:	eee5                	bnez	a3,2040166c <__sflush_r+0x116>
20401576:	6705                	lui	a4,0x1
20401578:	80070713          	addi	a4,a4,-2048 # 800 <__heap_size+0x400>
2040157c:	8fd9                	or	a5,a5,a4
2040157e:	41d8                	lw	a4,4(a1)
20401580:	00f59623          	sh	a5,12(a1)
20401584:	00e04d63          	bgtz	a4,2040159e <__sflush_r+0x48>
20401588:	5dd8                	lw	a4,60(a1)
2040158a:	00e04a63          	bgtz	a4,2040159e <__sflush_r+0x48>
2040158e:	4501                	li	a0,0
20401590:	40f2                	lw	ra,28(sp)
20401592:	4462                	lw	s0,24(sp)
20401594:	44d2                	lw	s1,20(sp)
20401596:	4942                	lw	s2,16(sp)
20401598:	49b2                	lw	s3,12(sp)
2040159a:	6105                	addi	sp,sp,32
2040159c:	8082                	ret
2040159e:	5418                	lw	a4,40(s0)
204015a0:	d77d                	beqz	a4,2040158e <__sflush_r+0x38>
204015a2:	0004a903          	lw	s2,0(s1)
204015a6:	01379693          	slli	a3,a5,0x13
204015aa:	0004a023          	sw	zero,0(s1)
204015ae:	0806d563          	bgez	a3,20401638 <__sflush_r+0xe2>
204015b2:	4830                	lw	a2,80(s0)
204015b4:	00c45783          	lhu	a5,12(s0)
204015b8:	8b91                	andi	a5,a5,4
204015ba:	c799                	beqz	a5,204015c8 <__sflush_r+0x72>
204015bc:	405c                	lw	a5,4(s0)
204015be:	8e1d                	sub	a2,a2,a5
204015c0:	581c                	lw	a5,48(s0)
204015c2:	c399                	beqz	a5,204015c8 <__sflush_r+0x72>
204015c4:	5c5c                	lw	a5,60(s0)
204015c6:	8e1d                	sub	a2,a2,a5
204015c8:	541c                	lw	a5,40(s0)
204015ca:	4c4c                	lw	a1,28(s0)
204015cc:	4681                	li	a3,0
204015ce:	8526                	mv	a0,s1
204015d0:	9782                	jalr	a5
204015d2:	57fd                	li	a5,-1
204015d4:	00c45683          	lhu	a3,12(s0)
204015d8:	00f51d63          	bne	a0,a5,204015f2 <__sflush_r+0x9c>
204015dc:	409c                	lw	a5,0(s1)
204015de:	4775                	li	a4,29
204015e0:	08f76063          	bltu	a4,a5,20401660 <__sflush_r+0x10a>
204015e4:	20400737          	lui	a4,0x20400
204015e8:	0705                	addi	a4,a4,1
204015ea:	00f75733          	srl	a4,a4,a5
204015ee:	8b05                	andi	a4,a4,1
204015f0:	cb25                	beqz	a4,20401660 <__sflush_r+0x10a>
204015f2:	77fd                	lui	a5,0xfffff
204015f4:	7ff78793          	addi	a5,a5,2047 # fffff7ff <metal_segment_heap_target_end+0x7fffb7ff>
204015f8:	4818                	lw	a4,16(s0)
204015fa:	8ff5                	and	a5,a5,a3
204015fc:	07c2                	slli	a5,a5,0x10
204015fe:	87c1                	srai	a5,a5,0x10
20401600:	c018                	sw	a4,0(s0)
20401602:	00f41623          	sh	a5,12(s0)
20401606:	00042223          	sw	zero,4(s0)
2040160a:	01379713          	slli	a4,a5,0x13
2040160e:	00075863          	bgez	a4,2040161e <__sflush_r+0xc8>
20401612:	57fd                	li	a5,-1
20401614:	00f51463          	bne	a0,a5,2040161c <__sflush_r+0xc6>
20401618:	409c                	lw	a5,0(s1)
2040161a:	e391                	bnez	a5,2040161e <__sflush_r+0xc8>
2040161c:	c828                	sw	a0,80(s0)
2040161e:	580c                	lw	a1,48(s0)
20401620:	0124a023          	sw	s2,0(s1)
20401624:	d5ad                	beqz	a1,2040158e <__sflush_r+0x38>
20401626:	04040793          	addi	a5,s0,64
2040162a:	00f58463          	beq	a1,a5,20401632 <__sflush_r+0xdc>
2040162e:	8526                	mv	a0,s1
20401630:	2a71                	jal	204017cc <_free_r>
20401632:	02042823          	sw	zero,48(s0)
20401636:	bfa1                	j	2040158e <__sflush_r+0x38>
20401638:	4c4c                	lw	a1,28(s0)
2040163a:	4601                	li	a2,0
2040163c:	4685                	li	a3,1
2040163e:	8526                	mv	a0,s1
20401640:	9702                	jalr	a4
20401642:	57fd                	li	a5,-1
20401644:	862a                	mv	a2,a0
20401646:	f6f517e3          	bne	a0,a5,204015b4 <__sflush_r+0x5e>
2040164a:	409c                	lw	a5,0(s1)
2040164c:	d7a5                	beqz	a5,204015b4 <__sflush_r+0x5e>
2040164e:	4775                	li	a4,29
20401650:	00e78563          	beq	a5,a4,2040165a <__sflush_r+0x104>
20401654:	4759                	li	a4,22
20401656:	04e79463          	bne	a5,a4,2040169e <__sflush_r+0x148>
2040165a:	0124a023          	sw	s2,0(s1)
2040165e:	bf05                	j	2040158e <__sflush_r+0x38>
20401660:	0406e793          	ori	a5,a3,64
20401664:	00f41623          	sh	a5,12(s0)
20401668:	557d                	li	a0,-1
2040166a:	b71d                	j	20401590 <__sflush_r+0x3a>
2040166c:	0105a983          	lw	s3,16(a1)
20401670:	f0098fe3          	beqz	s3,2040158e <__sflush_r+0x38>
20401674:	0005a903          	lw	s2,0(a1)
20401678:	8b0d                	andi	a4,a4,3
2040167a:	0135a023          	sw	s3,0(a1)
2040167e:	41390933          	sub	s2,s2,s3
20401682:	4781                	li	a5,0
20401684:	e311                	bnez	a4,20401688 <__sflush_r+0x132>
20401686:	49dc                	lw	a5,20(a1)
20401688:	c41c                	sw	a5,8(s0)
2040168a:	f12052e3          	blez	s2,2040158e <__sflush_r+0x38>
2040168e:	505c                	lw	a5,36(s0)
20401690:	4c4c                	lw	a1,28(s0)
20401692:	86ca                	mv	a3,s2
20401694:	864e                	mv	a2,s3
20401696:	8526                	mv	a0,s1
20401698:	9782                	jalr	a5
2040169a:	00a04763          	bgtz	a0,204016a8 <__sflush_r+0x152>
2040169e:	00c45783          	lhu	a5,12(s0)
204016a2:	0407e793          	ori	a5,a5,64
204016a6:	bf7d                	j	20401664 <__sflush_r+0x10e>
204016a8:	99aa                	add	s3,s3,a0
204016aa:	40a90933          	sub	s2,s2,a0
204016ae:	bff1                	j	2040168a <__sflush_r+0x134>

204016b0 <_fflush_r>:
_fflush_r():
204016b0:	1101                	addi	sp,sp,-32
204016b2:	cc22                	sw	s0,24(sp)
204016b4:	ce06                	sw	ra,28(sp)
204016b6:	842a                	mv	s0,a0
204016b8:	c519                	beqz	a0,204016c6 <_fflush_r+0x16>
204016ba:	5d1c                	lw	a5,56(a0)
204016bc:	e789                	bnez	a5,204016c6 <_fflush_r+0x16>
204016be:	c62e                	sw	a1,12(sp)
204016c0:	cadfe0ef          	jal	ra,2040036c <__sinit>
204016c4:	45b2                	lw	a1,12(sp)
204016c6:	00c59783          	lh	a5,12(a1)
204016ca:	c791                	beqz	a5,204016d6 <_fflush_r+0x26>
204016cc:	8522                	mv	a0,s0
204016ce:	4462                	lw	s0,24(sp)
204016d0:	40f2                	lw	ra,28(sp)
204016d2:	6105                	addi	sp,sp,32
204016d4:	b549                	j	20401556 <__sflush_r>
204016d6:	40f2                	lw	ra,28(sp)
204016d8:	4462                	lw	s0,24(sp)
204016da:	4501                	li	a0,0
204016dc:	6105                	addi	sp,sp,32
204016de:	8082                	ret

204016e0 <fflush>:
fflush():
204016e0:	85aa                	mv	a1,a0
204016e2:	e911                	bnez	a0,204016f6 <fflush+0x16>
204016e4:	83818793          	addi	a5,gp,-1992 # 800010f0 <_global_impure_ptr>
204016e8:	4388                	lw	a0,0(a5)
204016ea:	00000597          	auipc	a1,0x0
204016ee:	fc658593          	addi	a1,a1,-58 # 204016b0 <_fflush_r>
204016f2:	8d2ff06f          	j	204007c4 <_fwalk_reent>
204016f6:	5fc00797          	auipc	a5,0x5fc00
204016fa:	9c278793          	addi	a5,a5,-1598 # 800010b8 <_impure_ptr>
204016fe:	4388                	lw	a0,0(a5)
20401700:	bf45                	j	204016b0 <_fflush_r>

20401702 <_malloc_trim_r>:
_malloc_trim_r():
20401702:	1101                	addi	sp,sp,-32
20401704:	cc22                	sw	s0,24(sp)
20401706:	ca26                	sw	s1,20(sp)
20401708:	c84a                	sw	s2,16(sp)
2040170a:	c64e                	sw	s3,12(sp)
2040170c:	842e                	mv	s0,a1
2040170e:	ce06                	sw	ra,28(sp)
20401710:	892a                	mv	s2,a0
20401712:	5fbff997          	auipc	s3,0x5fbff
20401716:	d1698993          	addi	s3,s3,-746 # 80000428 <__malloc_av_>
2040171a:	fe4ff0ef          	jal	ra,20400efe <__malloc_lock>
2040171e:	0089a783          	lw	a5,8(s3)
20401722:	6705                	lui	a4,0x1
20401724:	43c4                	lw	s1,4(a5)
20401726:	fef70793          	addi	a5,a4,-17 # fef <__heap_size+0xbef>
2040172a:	40878433          	sub	s0,a5,s0
2040172e:	98f1                	andi	s1,s1,-4
20401730:	9426                	add	s0,s0,s1
20401732:	8031                	srli	s0,s0,0xc
20401734:	147d                	addi	s0,s0,-1
20401736:	0432                	slli	s0,s0,0xc
20401738:	00e45d63          	bge	s0,a4,20401752 <_malloc_trim_r+0x50>
2040173c:	854a                	mv	a0,s2
2040173e:	fc2ff0ef          	jal	ra,20400f00 <__malloc_unlock>
20401742:	4501                	li	a0,0
20401744:	40f2                	lw	ra,28(sp)
20401746:	4462                	lw	s0,24(sp)
20401748:	44d2                	lw	s1,20(sp)
2040174a:	4942                	lw	s2,16(sp)
2040174c:	49b2                	lw	s3,12(sp)
2040174e:	6105                	addi	sp,sp,32
20401750:	8082                	ret
20401752:	4581                	li	a1,0
20401754:	854a                	mv	a0,s2
20401756:	3e1d                	jal	2040128c <_sbrk_r>
20401758:	0089a783          	lw	a5,8(s3)
2040175c:	97a6                	add	a5,a5,s1
2040175e:	fcf51fe3          	bne	a0,a5,2040173c <_malloc_trim_r+0x3a>
20401762:	408005b3          	neg	a1,s0
20401766:	854a                	mv	a0,s2
20401768:	3615                	jal	2040128c <_sbrk_r>
2040176a:	57fd                	li	a5,-1
2040176c:	02f51a63          	bne	a0,a5,204017a0 <_malloc_trim_r+0x9e>
20401770:	4581                	li	a1,0
20401772:	854a                	mv	a0,s2
20401774:	3e21                	jal	2040128c <_sbrk_r>
20401776:	0089a703          	lw	a4,8(s3)
2040177a:	46bd                	li	a3,15
2040177c:	40e507b3          	sub	a5,a0,a4
20401780:	faf6dee3          	bge	a3,a5,2040173c <_malloc_trim_r+0x3a>
20401784:	5fc00697          	auipc	a3,0x5fc00
20401788:	93868693          	addi	a3,a3,-1736 # 800010bc <__malloc_sbrk_base>
2040178c:	4294                	lw	a3,0(a3)
2040178e:	0017e793          	ori	a5,a5,1
20401792:	c35c                	sw	a5,4(a4)
20401794:	8d15                	sub	a0,a0,a3
20401796:	5fc00697          	auipc	a3,0x5fc00
2040179a:	96a6a523          	sw	a0,-1686(a3) # 80001100 <__malloc_current_mallinfo>
2040179e:	bf79                	j	2040173c <_malloc_trim_r+0x3a>
204017a0:	0089a783          	lw	a5,8(s3)
204017a4:	8c81                	sub	s1,s1,s0
204017a6:	0014e493          	ori	s1,s1,1
204017aa:	c3c4                	sw	s1,4(a5)
204017ac:	5fc00797          	auipc	a5,0x5fc00
204017b0:	95478793          	addi	a5,a5,-1708 # 80001100 <__malloc_current_mallinfo>
204017b4:	439c                	lw	a5,0(a5)
204017b6:	854a                	mv	a0,s2
204017b8:	40878433          	sub	s0,a5,s0
204017bc:	5fc00797          	auipc	a5,0x5fc00
204017c0:	9487a223          	sw	s0,-1724(a5) # 80001100 <__malloc_current_mallinfo>
204017c4:	f3cff0ef          	jal	ra,20400f00 <__malloc_unlock>
204017c8:	4505                	li	a0,1
204017ca:	bfad                	j	20401744 <_malloc_trim_r+0x42>

204017cc <_free_r>:
_free_r():
204017cc:	1c058763          	beqz	a1,2040199a <_free_r+0x1ce>
204017d0:	1141                	addi	sp,sp,-16
204017d2:	c422                	sw	s0,8(sp)
204017d4:	c226                	sw	s1,4(sp)
204017d6:	842a                	mv	s0,a0
204017d8:	84ae                	mv	s1,a1
204017da:	c606                	sw	ra,12(sp)
204017dc:	f22ff0ef          	jal	ra,20400efe <__malloc_lock>
204017e0:	ffc4a583          	lw	a1,-4(s1)
204017e4:	ff848693          	addi	a3,s1,-8
204017e8:	5fbff517          	auipc	a0,0x5fbff
204017ec:	c4050513          	addi	a0,a0,-960 # 80000428 <__malloc_av_>
204017f0:	ffe5f793          	andi	a5,a1,-2
204017f4:	00f68633          	add	a2,a3,a5
204017f8:	4258                	lw	a4,4(a2)
204017fa:	00852803          	lw	a6,8(a0)
204017fe:	8985                	andi	a1,a1,1
20401800:	9b71                	andi	a4,a4,-4
20401802:	04c81863          	bne	a6,a2,20401852 <_free_r+0x86>
20401806:	97ba                	add	a5,a5,a4
20401808:	e989                	bnez	a1,2040181a <_free_r+0x4e>
2040180a:	ff84a703          	lw	a4,-8(s1)
2040180e:	8e99                	sub	a3,a3,a4
20401810:	4690                	lw	a2,8(a3)
20401812:	97ba                	add	a5,a5,a4
20401814:	46d8                	lw	a4,12(a3)
20401816:	c658                	sw	a4,12(a2)
20401818:	c710                	sw	a2,8(a4)
2040181a:	0017e713          	ori	a4,a5,1
2040181e:	c2d8                	sw	a4,4(a3)
20401820:	5fbff717          	auipc	a4,0x5fbff
20401824:	c0d72823          	sw	a3,-1008(a4) # 80000430 <__malloc_av_+0x8>
20401828:	5fc00717          	auipc	a4,0x5fc00
2040182c:	89870713          	addi	a4,a4,-1896 # 800010c0 <__malloc_trim_threshold>
20401830:	4318                	lw	a4,0(a4)
20401832:	00e7e963          	bltu	a5,a4,20401844 <_free_r+0x78>
20401836:	5fc00797          	auipc	a5,0x5fc00
2040183a:	8c678793          	addi	a5,a5,-1850 # 800010fc <__malloc_top_pad>
2040183e:	438c                	lw	a1,0(a5)
20401840:	8522                	mv	a0,s0
20401842:	35c1                	jal	20401702 <_malloc_trim_r>
20401844:	8522                	mv	a0,s0
20401846:	4422                	lw	s0,8(sp)
20401848:	40b2                	lw	ra,12(sp)
2040184a:	4492                	lw	s1,4(sp)
2040184c:	0141                	addi	sp,sp,16
2040184e:	eb2ff06f          	j	20400f00 <__malloc_unlock>
20401852:	c258                	sw	a4,4(a2)
20401854:	4801                	li	a6,0
20401856:	e195                	bnez	a1,2040187a <_free_r+0xae>
20401858:	ff84a583          	lw	a1,-8(s1)
2040185c:	5fbff897          	auipc	a7,0x5fbff
20401860:	bd488893          	addi	a7,a7,-1068 # 80000430 <__malloc_av_+0x8>
20401864:	8e8d                	sub	a3,a3,a1
20401866:	97ae                	add	a5,a5,a1
20401868:	468c                	lw	a1,8(a3)
2040186a:	09158563          	beq	a1,a7,204018f4 <_free_r+0x128>
2040186e:	00c6a883          	lw	a7,12(a3)
20401872:	0115a623          	sw	a7,12(a1)
20401876:	00b8a423          	sw	a1,8(a7)
2040187a:	00e605b3          	add	a1,a2,a4
2040187e:	41cc                	lw	a1,4(a1)
20401880:	8985                	andi	a1,a1,1
20401882:	e595                	bnez	a1,204018ae <_free_r+0xe2>
20401884:	97ba                	add	a5,a5,a4
20401886:	4618                	lw	a4,8(a2)
20401888:	06081863          	bnez	a6,204018f8 <_free_r+0x12c>
2040188c:	5fbff597          	auipc	a1,0x5fbff
20401890:	ba458593          	addi	a1,a1,-1116 # 80000430 <__malloc_av_+0x8>
20401894:	06b71263          	bne	a4,a1,204018f8 <_free_r+0x12c>
20401898:	5fbff617          	auipc	a2,0x5fbff
2040189c:	bad62223          	sw	a3,-1116(a2) # 8000043c <__malloc_av_+0x14>
204018a0:	5fbff617          	auipc	a2,0x5fbff
204018a4:	b8d62c23          	sw	a3,-1128(a2) # 80000438 <__malloc_av_+0x10>
204018a8:	c6d8                	sw	a4,12(a3)
204018aa:	c698                	sw	a4,8(a3)
204018ac:	4805                	li	a6,1
204018ae:	0017e713          	ori	a4,a5,1
204018b2:	c2d8                	sw	a4,4(a3)
204018b4:	00f68733          	add	a4,a3,a5
204018b8:	c31c                	sw	a5,0(a4)
204018ba:	f80815e3          	bnez	a6,20401844 <_free_r+0x78>
204018be:	1ff00713          	li	a4,511
204018c2:	02f76f63          	bltu	a4,a5,20401900 <_free_r+0x134>
204018c6:	838d                	srli	a5,a5,0x3
204018c8:	4027d613          	srai	a2,a5,0x2
204018cc:	4705                	li	a4,1
204018ce:	00c71733          	sll	a4,a4,a2
204018d2:	4150                	lw	a2,4(a0)
204018d4:	0785                	addi	a5,a5,1
204018d6:	078e                	slli	a5,a5,0x3
204018d8:	8f51                	or	a4,a4,a2
204018da:	97aa                	add	a5,a5,a0
204018dc:	5fbff617          	auipc	a2,0x5fbff
204018e0:	b4e62823          	sw	a4,-1200(a2) # 8000042c <__malloc_av_+0x4>
204018e4:	4398                	lw	a4,0(a5)
204018e6:	ff878613          	addi	a2,a5,-8
204018ea:	c6d0                	sw	a2,12(a3)
204018ec:	c698                	sw	a4,8(a3)
204018ee:	c394                	sw	a3,0(a5)
204018f0:	c754                	sw	a3,12(a4)
204018f2:	bf89                	j	20401844 <_free_r+0x78>
204018f4:	4805                	li	a6,1
204018f6:	b751                	j	2040187a <_free_r+0xae>
204018f8:	4650                	lw	a2,12(a2)
204018fa:	c750                	sw	a2,12(a4)
204018fc:	c618                	sw	a4,8(a2)
204018fe:	bf45                	j	204018ae <_free_r+0xe2>
20401900:	0097d613          	srli	a2,a5,0x9
20401904:	4711                	li	a4,4
20401906:	02c76e63          	bltu	a4,a2,20401942 <_free_r+0x176>
2040190a:	0067d713          	srli	a4,a5,0x6
2040190e:	03870713          	addi	a4,a4,56
20401912:	00170613          	addi	a2,a4,1
20401916:	060e                	slli	a2,a2,0x3
20401918:	962a                	add	a2,a2,a0
2040191a:	ff860593          	addi	a1,a2,-8
2040191e:	4210                	lw	a2,0(a2)
20401920:	06c59763          	bne	a1,a2,2040198e <_free_r+0x1c2>
20401924:	4785                	li	a5,1
20401926:	8709                	srai	a4,a4,0x2
20401928:	00e79733          	sll	a4,a5,a4
2040192c:	415c                	lw	a5,4(a0)
2040192e:	8f5d                	or	a4,a4,a5
20401930:	5fbff797          	auipc	a5,0x5fbff
20401934:	aee7ae23          	sw	a4,-1284(a5) # 8000042c <__malloc_av_+0x4>
20401938:	c6cc                	sw	a1,12(a3)
2040193a:	c690                	sw	a2,8(a3)
2040193c:	c594                	sw	a3,8(a1)
2040193e:	c654                	sw	a3,12(a2)
20401940:	b711                	j	20401844 <_free_r+0x78>
20401942:	4751                	li	a4,20
20401944:	00c76563          	bltu	a4,a2,2040194e <_free_r+0x182>
20401948:	05b60713          	addi	a4,a2,91
2040194c:	b7d9                	j	20401912 <_free_r+0x146>
2040194e:	05400713          	li	a4,84
20401952:	00c76763          	bltu	a4,a2,20401960 <_free_r+0x194>
20401956:	00c7d713          	srli	a4,a5,0xc
2040195a:	06e70713          	addi	a4,a4,110
2040195e:	bf55                	j	20401912 <_free_r+0x146>
20401960:	15400713          	li	a4,340
20401964:	00c76763          	bltu	a4,a2,20401972 <_free_r+0x1a6>
20401968:	00f7d713          	srli	a4,a5,0xf
2040196c:	07770713          	addi	a4,a4,119
20401970:	b74d                	j	20401912 <_free_r+0x146>
20401972:	55400593          	li	a1,1364
20401976:	07e00713          	li	a4,126
2040197a:	f8c5ece3          	bltu	a1,a2,20401912 <_free_r+0x146>
2040197e:	0127d713          	srli	a4,a5,0x12
20401982:	07c70713          	addi	a4,a4,124
20401986:	b771                	j	20401912 <_free_r+0x146>
20401988:	4610                	lw	a2,8(a2)
2040198a:	00c58663          	beq	a1,a2,20401996 <_free_r+0x1ca>
2040198e:	4258                	lw	a4,4(a2)
20401990:	9b71                	andi	a4,a4,-4
20401992:	fee7ebe3          	bltu	a5,a4,20401988 <_free_r+0x1bc>
20401996:	464c                	lw	a1,12(a2)
20401998:	b745                	j	20401938 <_free_r+0x16c>
2040199a:	8082                	ret

2040199c <_lseek_r>:
_lseek_r():
2040199c:	1141                	addi	sp,sp,-16
2040199e:	c422                	sw	s0,8(sp)
204019a0:	842a                	mv	s0,a0
204019a2:	852e                	mv	a0,a1
204019a4:	85b2                	mv	a1,a2
204019a6:	8636                	mv	a2,a3
204019a8:	5fbff797          	auipc	a5,0x5fbff
204019ac:	7807a023          	sw	zero,1920(a5) # 80001128 <errno>
204019b0:	c606                	sw	ra,12(sp)
204019b2:	22d020ef          	jal	ra,204043de <_lseek>
204019b6:	57fd                	li	a5,-1
204019b8:	00f51963          	bne	a0,a5,204019ca <_lseek_r+0x2e>
204019bc:	5fbff797          	auipc	a5,0x5fbff
204019c0:	76c78793          	addi	a5,a5,1900 # 80001128 <errno>
204019c4:	439c                	lw	a5,0(a5)
204019c6:	c391                	beqz	a5,204019ca <_lseek_r+0x2e>
204019c8:	c01c                	sw	a5,0(s0)
204019ca:	40b2                	lw	ra,12(sp)
204019cc:	4422                	lw	s0,8(sp)
204019ce:	0141                	addi	sp,sp,16
204019d0:	8082                	ret

204019d2 <__swhatbuf_r>:
__swhatbuf_r():
204019d2:	7119                	addi	sp,sp,-128
204019d4:	daa6                	sw	s1,116(sp)
204019d6:	84ae                	mv	s1,a1
204019d8:	00e59583          	lh	a1,14(a1)
204019dc:	dca2                	sw	s0,120(sp)
204019de:	de86                	sw	ra,124(sp)
204019e0:	8432                	mv	s0,a2
204019e2:	0005dc63          	bgez	a1,204019fa <__swhatbuf_r+0x28>
204019e6:	00c4d783          	lhu	a5,12(s1)
204019ea:	0006a023          	sw	zero,0(a3)
204019ee:	0807f793          	andi	a5,a5,128
204019f2:	eb8d                	bnez	a5,20401a24 <__swhatbuf_r+0x52>
204019f4:	40000793          	li	a5,1024
204019f8:	a805                	j	20401a28 <__swhatbuf_r+0x56>
204019fa:	0830                	addi	a2,sp,24
204019fc:	c636                	sw	a3,12(sp)
204019fe:	2231                	jal	20401b0a <_fstat_r>
20401a00:	46b2                	lw	a3,12(sp)
20401a02:	fe0542e3          	bltz	a0,204019e6 <__swhatbuf_r+0x14>
20401a06:	4772                	lw	a4,28(sp)
20401a08:	67bd                	lui	a5,0xf
20401a0a:	6505                	lui	a0,0x1
20401a0c:	8ff9                	and	a5,a5,a4
20401a0e:	7779                	lui	a4,0xffffe
20401a10:	97ba                	add	a5,a5,a4
20401a12:	0017b793          	seqz	a5,a5
20401a16:	c29c                	sw	a5,0(a3)
20401a18:	40000793          	li	a5,1024
20401a1c:	c01c                	sw	a5,0(s0)
20401a1e:	80050513          	addi	a0,a0,-2048 # 800 <__heap_size+0x400>
20401a22:	a029                	j	20401a2c <__swhatbuf_r+0x5a>
20401a24:	04000793          	li	a5,64
20401a28:	c01c                	sw	a5,0(s0)
20401a2a:	4501                	li	a0,0
20401a2c:	50f6                	lw	ra,124(sp)
20401a2e:	5466                	lw	s0,120(sp)
20401a30:	54d6                	lw	s1,116(sp)
20401a32:	6109                	addi	sp,sp,128
20401a34:	8082                	ret

20401a36 <__smakebuf_r>:
__smakebuf_r():
20401a36:	00c5d783          	lhu	a5,12(a1)
20401a3a:	1101                	addi	sp,sp,-32
20401a3c:	cc22                	sw	s0,24(sp)
20401a3e:	ce06                	sw	ra,28(sp)
20401a40:	ca26                	sw	s1,20(sp)
20401a42:	c84a                	sw	s2,16(sp)
20401a44:	8b89                	andi	a5,a5,2
20401a46:	842e                	mv	s0,a1
20401a48:	cf89                	beqz	a5,20401a62 <__smakebuf_r+0x2c>
20401a4a:	04340793          	addi	a5,s0,67
20401a4e:	c01c                	sw	a5,0(s0)
20401a50:	c81c                	sw	a5,16(s0)
20401a52:	4785                	li	a5,1
20401a54:	c85c                	sw	a5,20(s0)
20401a56:	40f2                	lw	ra,28(sp)
20401a58:	4462                	lw	s0,24(sp)
20401a5a:	44d2                	lw	s1,20(sp)
20401a5c:	4942                	lw	s2,16(sp)
20401a5e:	6105                	addi	sp,sp,32
20401a60:	8082                	ret
20401a62:	0074                	addi	a3,sp,12
20401a64:	0030                	addi	a2,sp,8
20401a66:	84aa                	mv	s1,a0
20401a68:	37ad                	jal	204019d2 <__swhatbuf_r>
20401a6a:	45a2                	lw	a1,8(sp)
20401a6c:	892a                	mv	s2,a0
20401a6e:	8526                	mv	a0,s1
20401a70:	dc1fe0ef          	jal	ra,20400830 <_malloc_r>
20401a74:	ed01                	bnez	a0,20401a8c <__smakebuf_r+0x56>
20401a76:	00c41783          	lh	a5,12(s0)
20401a7a:	2007f713          	andi	a4,a5,512
20401a7e:	ff61                	bnez	a4,20401a56 <__smakebuf_r+0x20>
20401a80:	9bf1                	andi	a5,a5,-4
20401a82:	0027e793          	ori	a5,a5,2
20401a86:	00f41623          	sh	a5,12(s0)
20401a8a:	b7c1                	j	20401a4a <__smakebuf_r+0x14>
20401a8c:	fffff797          	auipc	a5,0xfffff
20401a90:	88478793          	addi	a5,a5,-1916 # 20400310 <_cleanup_r>
20401a94:	dcdc                	sw	a5,60(s1)
20401a96:	00c45783          	lhu	a5,12(s0)
20401a9a:	c008                	sw	a0,0(s0)
20401a9c:	c808                	sw	a0,16(s0)
20401a9e:	0807e793          	ori	a5,a5,128
20401aa2:	00f41623          	sh	a5,12(s0)
20401aa6:	47a2                	lw	a5,8(sp)
20401aa8:	c85c                	sw	a5,20(s0)
20401aaa:	47b2                	lw	a5,12(sp)
20401aac:	cf89                	beqz	a5,20401ac6 <__smakebuf_r+0x90>
20401aae:	00e41583          	lh	a1,14(s0)
20401ab2:	8526                	mv	a0,s1
20401ab4:	2069                	jal	20401b3e <_isatty_r>
20401ab6:	c901                	beqz	a0,20401ac6 <__smakebuf_r+0x90>
20401ab8:	00c45783          	lhu	a5,12(s0)
20401abc:	9bf1                	andi	a5,a5,-4
20401abe:	0017e793          	ori	a5,a5,1
20401ac2:	00f41623          	sh	a5,12(s0)
20401ac6:	00c45783          	lhu	a5,12(s0)
20401aca:	00f96933          	or	s2,s2,a5
20401ace:	01241623          	sh	s2,12(s0)
20401ad2:	b751                	j	20401a56 <__smakebuf_r+0x20>

20401ad4 <_read_r>:
_read_r():
20401ad4:	1141                	addi	sp,sp,-16
20401ad6:	c422                	sw	s0,8(sp)
20401ad8:	842a                	mv	s0,a0
20401ada:	852e                	mv	a0,a1
20401adc:	85b2                	mv	a1,a2
20401ade:	8636                	mv	a2,a3
20401ae0:	5fbff797          	auipc	a5,0x5fbff
20401ae4:	6407a423          	sw	zero,1608(a5) # 80001128 <errno>
20401ae8:	c606                	sw	ra,12(sp)
20401aea:	11f020ef          	jal	ra,20404408 <_read>
20401aee:	57fd                	li	a5,-1
20401af0:	00f51963          	bne	a0,a5,20401b02 <_read_r+0x2e>
20401af4:	5fbff797          	auipc	a5,0x5fbff
20401af8:	63478793          	addi	a5,a5,1588 # 80001128 <errno>
20401afc:	439c                	lw	a5,0(a5)
20401afe:	c391                	beqz	a5,20401b02 <_read_r+0x2e>
20401b00:	c01c                	sw	a5,0(s0)
20401b02:	40b2                	lw	ra,12(sp)
20401b04:	4422                	lw	s0,8(sp)
20401b06:	0141                	addi	sp,sp,16
20401b08:	8082                	ret

20401b0a <_fstat_r>:
_fstat_r():
20401b0a:	1141                	addi	sp,sp,-16
20401b0c:	c422                	sw	s0,8(sp)
20401b0e:	842a                	mv	s0,a0
20401b10:	852e                	mv	a0,a1
20401b12:	85b2                	mv	a1,a2
20401b14:	5fbff797          	auipc	a5,0x5fbff
20401b18:	6007aa23          	sw	zero,1556(a5) # 80001128 <errno>
20401b1c:	c606                	sw	ra,12(sp)
20401b1e:	07b020ef          	jal	ra,20404398 <_fstat>
20401b22:	57fd                	li	a5,-1
20401b24:	00f51963          	bne	a0,a5,20401b36 <_fstat_r+0x2c>
20401b28:	5fbff797          	auipc	a5,0x5fbff
20401b2c:	60078793          	addi	a5,a5,1536 # 80001128 <errno>
20401b30:	439c                	lw	a5,0(a5)
20401b32:	c391                	beqz	a5,20401b36 <_fstat_r+0x2c>
20401b34:	c01c                	sw	a5,0(s0)
20401b36:	40b2                	lw	ra,12(sp)
20401b38:	4422                	lw	s0,8(sp)
20401b3a:	0141                	addi	sp,sp,16
20401b3c:	8082                	ret

20401b3e <_isatty_r>:
_isatty_r():
20401b3e:	1141                	addi	sp,sp,-16
20401b40:	c422                	sw	s0,8(sp)
20401b42:	842a                	mv	s0,a0
20401b44:	852e                	mv	a0,a1
20401b46:	5fbff797          	auipc	a5,0x5fbff
20401b4a:	5e07a123          	sw	zero,1506(a5) # 80001128 <errno>
20401b4e:	c606                	sw	ra,12(sp)
20401b50:	06f020ef          	jal	ra,204043be <_isatty>
20401b54:	57fd                	li	a5,-1
20401b56:	00f51963          	bne	a0,a5,20401b68 <_isatty_r+0x2a>
20401b5a:	5fbff797          	auipc	a5,0x5fbff
20401b5e:	5ce78793          	addi	a5,a5,1486 # 80001128 <errno>
20401b62:	439c                	lw	a5,0(a5)
20401b64:	c391                	beqz	a5,20401b68 <_isatty_r+0x2a>
20401b66:	c01c                	sw	a5,0(s0)
20401b68:	40b2                	lw	ra,12(sp)
20401b6a:	4422                	lw	s0,8(sp)
20401b6c:	0141                	addi	sp,sp,16
20401b6e:	8082                	ret

20401b70 <early_trap_vector>:
early_trap_vector():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/entry.S:84
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    j early_trap_vector
20401b70:	a001                	j	20401b70 <early_trap_vector>

20401b72 <metal_spi_init>:
metal_spi_init():
/scratch/haotianw/freedom-e-sdk/freedom-metal/metal/spi.h:51

/*! @brief Initialize a SPI device with a certain baud rate
 * @param spi The handle for the SPI device to initialize
 * @param baud_rate The baud rate to set the SPI device to
 */
inline void metal_spi_init(struct metal_spi *spi, int baud_rate) { spi->vtable->init(spi, baud_rate); }
20401b72:	1101                	addi	sp,sp,-32
20401b74:	ce06                	sw	ra,28(sp)
20401b76:	cc22                	sw	s0,24(sp)
20401b78:	1000                	addi	s0,sp,32
20401b7a:	fea42623          	sw	a0,-20(s0)
20401b7e:	feb42423          	sw	a1,-24(s0)
20401b82:	fec42783          	lw	a5,-20(s0)
20401b86:	439c                	lw	a5,0(a5)
20401b88:	439c                	lw	a5,0(a5)
20401b8a:	fe842583          	lw	a1,-24(s0)
20401b8e:	fec42503          	lw	a0,-20(s0)
20401b92:	9782                	jalr	a5
20401b94:	0001                	nop
20401b96:	40f2                	lw	ra,28(sp)
20401b98:	4462                	lw	s0,24(sp)
20401b9a:	6105                	addi	sp,sp,32
20401b9c:	8082                	ret

20401b9e <metal_spi_set_baud_rate>:
metal_spi_set_baud_rate():
/scratch/haotianw/freedom-e-sdk/freedom-metal/metal/spi.h:76
/*! @brief Set the current baud rate of the SPI device
 * @param spi The handle for the SPI device
 * @param baud_rate The desired baud rate of the SPI device
 * @return 0 if the baud rate is successfully changed
 */
inline int metal_spi_set_baud_rate(struct metal_spi *spi, int baud_rate) { return spi->vtable->set_baud_rate(spi, baud_rate); }
20401b9e:	1101                	addi	sp,sp,-32
20401ba0:	ce06                	sw	ra,28(sp)
20401ba2:	cc22                	sw	s0,24(sp)
20401ba4:	1000                	addi	s0,sp,32
20401ba6:	fea42623          	sw	a0,-20(s0)
20401baa:	feb42423          	sw	a1,-24(s0)
20401bae:	fec42783          	lw	a5,-20(s0)
20401bb2:	439c                	lw	a5,0(a5)
20401bb4:	47dc                	lw	a5,12(a5)
20401bb6:	fe842583          	lw	a1,-24(s0)
20401bba:	fec42503          	lw	a0,-20(s0)
20401bbe:	9782                	jalr	a5
20401bc0:	87aa                	mv	a5,a0
20401bc2:	853e                	mv	a0,a5
20401bc4:	40f2                	lw	ra,28(sp)
20401bc6:	4462                	lw	s0,24(sp)
20401bc8:	6105                	addi	sp,sp,32
20401bca:	8082                	ret

20401bcc <metal_spi_get_device>:
metal_spi_get_device():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/spi.c:13
extern inline int metal_spi_transfer(struct metal_spi *spi, struct metal_spi_config *config, size_t len, char *tx_buf, char *rx_buf);
extern inline int metal_spi_get_baud_rate(struct metal_spi *spi);
extern inline int metal_spi_set_baud_rate(struct metal_spi *spi, int baud_rate);

struct metal_spi *metal_spi_get_device(int device_num)
{
20401bcc:	1101                	addi	sp,sp,-32
20401bce:	ce22                	sw	s0,28(sp)
20401bd0:	1000                	addi	s0,sp,32
20401bd2:	fea42623          	sw	a0,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/spi.c:14
    if(device_num >= __METAL_DT_MAX_SPIS) {
20401bd6:	fec42783          	lw	a5,-20(s0)
20401bda:	00f05463          	blez	a5,20401be2 <metal_spi_get_device+0x16>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/spi.c:15
        return NULL;
20401bde:	4781                	li	a5,0
20401be0:	a801                	j	20401bf0 <metal_spi_get_device+0x24>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/spi.c:18
    }

    return (struct metal_spi *) __metal_spi_table[device_num];
20401be2:	fec42703          	lw	a4,-20(s0)
20401be6:	070a                	slli	a4,a4,0x2
20401be8:	83018793          	addi	a5,gp,-2000 # 800010e8 <__metal_spi_table>
20401bec:	97ba                	add	a5,a5,a4
20401bee:	439c                	lw	a5,0(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/spi.c:19
}
20401bf0:	853e                	mv	a0,a5
20401bf2:	4472                	lw	s0,28(sp)
20401bf4:	6105                	addi	sp,sp,32
20401bf6:	8082                	ret

20401bf8 <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:8

#include <metal/drivers/fixed-clock.h>
#include <stddef.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
20401bf8:	7179                	addi	sp,sp,-48
20401bfa:	d622                	sw	s0,44(sp)
20401bfc:	1800                	addi	s0,sp,48
20401bfe:	fca42e23          	sw	a0,-36(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:9
    const struct __metal_driver_fixed_clock *clk = (void *)gclk;
20401c02:	fdc42783          	lw	a5,-36(s0)
20401c06:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:10
    return clk->rate;
20401c0a:	fec42783          	lw	a5,-20(s0)
20401c0e:	4f9c                	lw	a5,24(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:11
}
20401c10:	853e                	mv	a0,a5
20401c12:	5432                	lw	s0,44(sp)
20401c14:	6145                	addi	sp,sp,48
20401c16:	8082                	ret

20401c18 <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
20401c18:	1101                	addi	sp,sp,-32
20401c1a:	ce06                	sw	ra,28(sp)
20401c1c:	cc22                	sw	s0,24(sp)
20401c1e:	1000                	addi	s0,sp,32
20401c20:	fea42623          	sw	a0,-20(s0)
20401c24:	feb42423          	sw	a1,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:15
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
20401c28:	fec42503          	lw	a0,-20(s0)
20401c2c:	37f1                	jal	20401bf8 <__metal_driver_fixed_clock_get_rate_hz>
20401c2e:	87aa                	mv	a5,a0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:16
}
20401c30:	853e                	mv	a0,a5
20401c32:	40f2                	lw	ra,28(sp)
20401c34:	4462                	lw	s0,24(sp)
20401c36:	6105                	addi	sp,sp,32
20401c38:	8082                	ret

20401c3a <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:8

#include <metal/io.h>
#include <metal/drivers/riscv,clint0.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
20401c3a:	7179                	addi	sp,sp,-48
20401c3c:	d622                	sw	s0,44(sp)
20401c3e:	1800                	addi	s0,sp,48
20401c40:	fca42e23          	sw	a0,-36(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:13 (discriminator 1)
    __metal_io_u32 lo, hi;

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base + METAL_CLINT_MTIME_OFFSET + 4));
20401c44:	fdc42503          	lw	a0,-36(s0)
20401c48:	00852883          	lw	a7,8(a0)
20401c4c:	6531                	lui	a0,0xc
20401c4e:	1571                	addi	a0,a0,-4
20401c50:	9546                	add	a0,a0,a7
20401c52:	4108                	lw	a0,0(a0)
20401c54:	fea42623          	sw	a0,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:14 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base + METAL_CLINT_MTIME_OFFSET));
20401c58:	fdc42503          	lw	a0,-36(s0)
20401c5c:	00852883          	lw	a7,8(a0) # c008 <__heap_size+0xbc08>
20401c60:	6531                	lui	a0,0xc
20401c62:	1561                	addi	a0,a0,-8
20401c64:	9546                	add	a0,a0,a7
20401c66:	4108                	lw	a0,0(a0)
20401c68:	fea42423          	sw	a0,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:15 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base + METAL_CLINT_MTIME_OFFSET + 4)) != hi);
20401c6c:	fdc42503          	lw	a0,-36(s0)
20401c70:	00852883          	lw	a7,8(a0) # c008 <__heap_size+0xbc08>
20401c74:	6531                	lui	a0,0xc
20401c76:	1571                	addi	a0,a0,-4
20401c78:	9546                	add	a0,a0,a7
20401c7a:	4108                	lw	a0,0(a0)
20401c7c:	fec42883          	lw	a7,-20(s0)
20401c80:	fca892e3          	bne	a7,a0,20401c44 <__metal_clint0_mtime_get+0xa>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:17

    return (((unsigned long long)hi) << 32) | lo;
20401c84:	fec42503          	lw	a0,-20(s0)
20401c88:	832a                	mv	t1,a0
20401c8a:	4381                	li	t2,0
20401c8c:	00031813          	slli	a6,t1,0x0
20401c90:	4781                	li	a5,0
20401c92:	fe842503          	lw	a0,-24(s0)
20401c96:	86aa                	mv	a3,a0
20401c98:	4701                	li	a4,0
20401c9a:	00d7e5b3          	or	a1,a5,a3
20401c9e:	00e86633          	or	a2,a6,a4
20401ca2:	87ae                	mv	a5,a1
20401ca4:	8832                	mv	a6,a2
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:18
}
20401ca6:	853e                	mv	a0,a5
20401ca8:	85c2                	mv	a1,a6
20401caa:	5432                	lw	s0,44(sp)
20401cac:	6145                	addi	sp,sp,48
20401cae:	8082                	ret

20401cb0 <__metal_clint0_mtime_set>:
__metal_clint0_mtime_set():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:21

int __metal_clint0_mtime_set (struct __metal_driver_riscv_clint0 *clint, unsigned long long time)
{   
20401cb0:	1101                	addi	sp,sp,-32
20401cb2:	ce22                	sw	s0,28(sp)
20401cb4:	1000                	addi	s0,sp,32
20401cb6:	fea42623          	sw	a0,-20(s0)
20401cba:	feb42023          	sw	a1,-32(s0)
20401cbe:	fec42223          	sw	a2,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:28
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base + METAL_CLINT_MTIMECMP_OFFSET + 4)) = 0xFFFFFFFF;
20401cc2:	fec42703          	lw	a4,-20(s0)
20401cc6:	4714                	lw	a3,8(a4)
20401cc8:	6711                	lui	a4,0x4
20401cca:	0711                	addi	a4,a4,4
20401ccc:	9736                	add	a4,a4,a3
20401cce:	86ba                	mv	a3,a4
20401cd0:	577d                	li	a4,-1
20401cd2:	c298                	sw	a4,0(a3)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:29
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base + METAL_CLINT_MTIMECMP_OFFSET)) = (__metal_io_u32)time;
20401cd4:	fec42703          	lw	a4,-20(s0)
20401cd8:	4714                	lw	a3,8(a4)
20401cda:	6711                	lui	a4,0x4
20401cdc:	9736                	add	a4,a4,a3
20401cde:	86ba                	mv	a3,a4
20401ce0:	fe042703          	lw	a4,-32(s0)
20401ce4:	c298                	sw	a4,0(a3)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:30
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base + METAL_CLINT_MTIMECMP_OFFSET + 4)) = (__metal_io_u32)(time >> 32);
20401ce6:	fe442703          	lw	a4,-28(s0)
20401cea:	00075793          	srli	a5,a4,0x0
20401cee:	4801                	li	a6,0
20401cf0:	fec42703          	lw	a4,-20(s0)
20401cf4:	4714                	lw	a3,8(a4)
20401cf6:	6711                	lui	a4,0x4
20401cf8:	0711                	addi	a4,a4,4
20401cfa:	9736                	add	a4,a4,a3
20401cfc:	c31c                	sw	a5,0(a4)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:31
    return 0;
20401cfe:	4781                	li	a5,0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:32
}
20401d00:	853e                	mv	a0,a5
20401d02:	4472                	lw	s0,28(sp)
20401d04:	6105                	addi	sp,sp,32
20401d06:	8082                	ret

20401d08 <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:35

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
20401d08:	7179                	addi	sp,sp,-48
20401d0a:	d606                	sw	ra,44(sp)
20401d0c:	d422                	sw	s0,40(sp)
20401d0e:	1800                	addi	s0,sp,48
20401d10:	fca42e23          	sw	a0,-36(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:36
    struct __metal_driver_riscv_clint0 *clint =
20401d14:	fdc42783          	lw	a5,-36(s0)
20401d18:	fef42423          	sw	a5,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:39
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
20401d1c:	fe842783          	lw	a5,-24(s0)
20401d20:	4b9c                	lw	a5,16(a5)
20401d22:	efa9                	bnez	a5,20401d7c <__metal_driver_riscv_clint0_init+0x74>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:40
        struct metal_interrupt *intc = clint->interrupt_parent;
20401d24:	fe842783          	lw	a5,-24(s0)
20401d28:	4bdc                	lw	a5,20(a5)
20401d2a:	fef42223          	sw	a5,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:43

	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < clint->num_interrupts; i++) {
20401d2e:	fe042623          	sw	zero,-20(s0)
20401d32:	a815                	j	20401d66 <__metal_driver_riscv_clint0_init+0x5e>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:44 (discriminator 3)
            intc->vtable->interrupt_register(intc,
20401d34:	fe442783          	lw	a5,-28(s0)
20401d38:	439c                	lw	a5,0(a5)
20401d3a:	0047a803          	lw	a6,4(a5)
20401d3e:	fe842703          	lw	a4,-24(s0)
20401d42:	fec42783          	lw	a5,-20(s0)
20401d46:	0791                	addi	a5,a5,4
20401d48:	078a                	slli	a5,a5,0x2
20401d4a:	97ba                	add	a5,a5,a4
20401d4c:	47dc                	lw	a5,12(a5)
20401d4e:	fe842683          	lw	a3,-24(s0)
20401d52:	4601                	li	a2,0
20401d54:	85be                	mv	a1,a5
20401d56:	fe442503          	lw	a0,-28(s0)
20401d5a:	9802                	jalr	a6
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:43 (discriminator 3)
        for (int i = 0; i < clint->num_interrupts; i++) {
20401d5c:	fec42783          	lw	a5,-20(s0)
20401d60:	0785                	addi	a5,a5,1
20401d62:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:43 (discriminator 1)
20401d66:	fe842783          	lw	a5,-24(s0)
20401d6a:	4f9c                	lw	a5,24(a5)
20401d6c:	fec42703          	lw	a4,-20(s0)
20401d70:	fcf742e3          	blt	a4,a5,20401d34 <__metal_driver_riscv_clint0_init+0x2c>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:48
					     clint->interrupt_lines[i],
					     NULL, clint);
	}
	clint->init_done = 1;
20401d74:	fe842783          	lw	a5,-24(s0)
20401d78:	4705                	li	a4,1
20401d7a:	cb98                	sw	a4,16(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:50
    }	
}
20401d7c:	0001                	nop
20401d7e:	50b2                	lw	ra,44(sp)
20401d80:	5422                	lw	s0,40(sp)
20401d82:	6145                	addi	sp,sp,48
20401d84:	8082                	ret

20401d86 <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:55

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
20401d86:	7179                	addi	sp,sp,-48
20401d88:	d606                	sw	ra,44(sp)
20401d8a:	d422                	sw	s0,40(sp)
20401d8c:	1800                	addi	s0,sp,48
20401d8e:	fca42e23          	sw	a0,-36(s0)
20401d92:	fcb42c23          	sw	a1,-40(s0)
20401d96:	fcc42a23          	sw	a2,-44(s0)
20401d9a:	fcd42823          	sw	a3,-48(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:56
    int rc = -1;
20401d9e:	57fd                	li	a5,-1
20401da0:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:57
    struct __metal_driver_riscv_clint0 *clint =
20401da4:	fdc42783          	lw	a5,-36(s0)
20401da8:	fef42423          	sw	a5,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:59
                              (struct __metal_driver_riscv_clint0 *)(controller);
    struct metal_interrupt *intc = clint->interrupt_parent;
20401dac:	fe842783          	lw	a5,-24(s0)
20401db0:	4bdc                	lw	a5,20(a5)
20401db2:	fef42223          	sw	a5,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:62

    /* Register its interrupts with parent controller */
    if (intc) {
20401db6:	fe442783          	lw	a5,-28(s0)
20401dba:	c385                	beqz	a5,20401dda <__metal_driver_riscv_clint0_register+0x54>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:63
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
20401dbc:	fe442783          	lw	a5,-28(s0)
20401dc0:	439c                	lw	a5,0(a5)
20401dc2:	43dc                	lw	a5,4(a5)
20401dc4:	fd042683          	lw	a3,-48(s0)
20401dc8:	fd442603          	lw	a2,-44(s0)
20401dcc:	fd842583          	lw	a1,-40(s0)
20401dd0:	fe442503          	lw	a0,-28(s0)
20401dd4:	9782                	jalr	a5
20401dd6:	fea42623          	sw	a0,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:65
    }
    return rc;
20401dda:	fec42783          	lw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:66
}
20401dde:	853e                	mv	a0,a5
20401de0:	50b2                	lw	ra,44(sp)
20401de2:	5422                	lw	s0,40(sp)
20401de4:	6145                	addi	sp,sp,48
20401de6:	8082                	ret

20401de8 <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:69

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
20401de8:	7179                	addi	sp,sp,-48
20401dea:	d606                	sw	ra,44(sp)
20401dec:	d422                	sw	s0,40(sp)
20401dee:	1800                	addi	s0,sp,48
20401df0:	fca42e23          	sw	a0,-36(s0)
20401df4:	fcb42c23          	sw	a1,-40(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:70
    int rc = -1;
20401df8:	57fd                	li	a5,-1
20401dfa:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:71
    struct __metal_driver_riscv_clint0 *clint =
20401dfe:	fdc42783          	lw	a5,-36(s0)
20401e02:	fef42423          	sw	a5,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:74
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( id ) {
20401e06:	fd842783          	lw	a5,-40(s0)
20401e0a:	c785                	beqz	a5,20401e32 <__metal_driver_riscv_clint0_enable+0x4a>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:75
        struct metal_interrupt *intc = clint->interrupt_parent;
20401e0c:	fe842783          	lw	a5,-24(s0)
20401e10:	4bdc                	lw	a5,20(a5)
20401e12:	fef42223          	sw	a5,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:78
        
        /* Enable its interrupts with parent controller */
        if (intc) {
20401e16:	fe442783          	lw	a5,-28(s0)
20401e1a:	cf81                	beqz	a5,20401e32 <__metal_driver_riscv_clint0_enable+0x4a>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:79
            rc = intc->vtable->interrupt_enable(intc, id);
20401e1c:	fe442783          	lw	a5,-28(s0)
20401e20:	439c                	lw	a5,0(a5)
20401e22:	479c                	lw	a5,8(a5)
20401e24:	fd842583          	lw	a1,-40(s0)
20401e28:	fe442503          	lw	a0,-28(s0)
20401e2c:	9782                	jalr	a5
20401e2e:	fea42623          	sw	a0,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:82
        }
    }
}
20401e32:	0001                	nop
20401e34:	853e                	mv	a0,a5
20401e36:	50b2                	lw	ra,44(sp)
20401e38:	5422                	lw	s0,40(sp)
20401e3a:	6145                	addi	sp,sp,48
20401e3c:	8082                	ret

20401e3e <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:85

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
20401e3e:	7179                	addi	sp,sp,-48
20401e40:	d606                	sw	ra,44(sp)
20401e42:	d422                	sw	s0,40(sp)
20401e44:	1800                	addi	s0,sp,48
20401e46:	fca42e23          	sw	a0,-36(s0)
20401e4a:	fcb42c23          	sw	a1,-40(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:86
    int rc = -1;
20401e4e:	57fd                	li	a5,-1
20401e50:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:87
    struct __metal_driver_riscv_clint0 *clint =
20401e54:	fdc42783          	lw	a5,-36(s0)
20401e58:	fef42423          	sw	a5,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:90
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( id ) {
20401e5c:	fd842783          	lw	a5,-40(s0)
20401e60:	c785                	beqz	a5,20401e88 <__metal_driver_riscv_clint0_disable+0x4a>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:91
        struct metal_interrupt *intc = clint->interrupt_parent;
20401e62:	fe842783          	lw	a5,-24(s0)
20401e66:	4bdc                	lw	a5,20(a5)
20401e68:	fef42223          	sw	a5,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:94
        
        /* Disable its interrupts with parent controller */
        if (intc) {
20401e6c:	fe442783          	lw	a5,-28(s0)
20401e70:	cf81                	beqz	a5,20401e88 <__metal_driver_riscv_clint0_disable+0x4a>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:95
            rc = intc->vtable->interrupt_disable(intc, id);
20401e72:	fe442783          	lw	a5,-28(s0)
20401e76:	439c                	lw	a5,0(a5)
20401e78:	47dc                	lw	a5,12(a5)
20401e7a:	fd842583          	lw	a1,-40(s0)
20401e7e:	fe442503          	lw	a0,-28(s0)
20401e82:	9782                	jalr	a5
20401e84:	fea42623          	sw	a0,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:98
        }
    }
}
20401e88:	0001                	nop
20401e8a:	853e                	mv	a0,a5
20401e8c:	50b2                	lw	ra,44(sp)
20401e8e:	5422                	lw	s0,40(sp)
20401e90:	6145                	addi	sp,sp,48
20401e92:	8082                	ret

20401e94 <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:102

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
20401e94:	7179                	addi	sp,sp,-48
20401e96:	d606                	sw	ra,44(sp)
20401e98:	d422                	sw	s0,40(sp)
20401e9a:	1800                	addi	s0,sp,48
20401e9c:	fca42e23          	sw	a0,-36(s0)
20401ea0:	fcb42c23          	sw	a1,-40(s0)
20401ea4:	fcc42a23          	sw	a2,-44(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:104
    int hartid;
    int rc = -1;
20401ea8:	57fd                	li	a5,-1
20401eaa:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:105
    struct __metal_driver_riscv_clint0 *clint =
20401eae:	fdc42783          	lw	a5,-36(s0)
20401eb2:	fef42423          	sw	a5,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:108
                              (struct __metal_driver_riscv_clint0 *)(controller);

    switch (command) {
20401eb6:	fd842703          	lw	a4,-40(s0)
20401eba:	4795                	li	a5,5
20401ebc:	0ce7eb63          	bltu	a5,a4,20401f92 <__metal_driver_riscv_clint0_command_request+0xfe>
20401ec0:	fd842783          	lw	a5,-40(s0)
20401ec4:	00279713          	slli	a4,a5,0x2
20401ec8:	204057b7          	lui	a5,0x20405
20401ecc:	87c78793          	addi	a5,a5,-1924 # 2040487c <__metal_driver_vtable_sifive_fe310_g000_pll+0xc>
20401ed0:	97ba                	add	a5,a5,a4
20401ed2:	439c                	lw	a5,0(a5)
20401ed4:	8782                	jr	a5
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:110
    case METAL_TIMER_MTIME_GET:
        if (data) {
20401ed6:	fd442783          	lw	a5,-44(s0)
20401eda:	cfd5                	beqz	a5,20401f96 <__metal_driver_riscv_clint0_command_request+0x102>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:111
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
20401edc:	fe842503          	lw	a0,-24(s0)
20401ee0:	3ba9                	jal	20401c3a <__metal_clint0_mtime_get>
20401ee2:	87aa                	mv	a5,a0
20401ee4:	882e                	mv	a6,a1
20401ee6:	fd442703          	lw	a4,-44(s0)
20401eea:	c31c                	sw	a5,0(a4)
20401eec:	01072223          	sw	a6,4(a4) # 4004 <__heap_size+0x3c04>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:112
            rc = 0;
20401ef0:	fe042623          	sw	zero,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:114
        }
        break;
20401ef4:	a04d                	j	20401f96 <__metal_driver_riscv_clint0_command_request+0x102>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:116
    case METAL_TIMER_MTIME_SET:
        if (data) {
20401ef6:	fd442783          	lw	a5,-44(s0)
20401efa:	c3c5                	beqz	a5,20401f9a <__metal_driver_riscv_clint0_command_request+0x106>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:117
	    __metal_clint0_mtime_set(clint, *(unsigned long long *)data);
20401efc:	fd442783          	lw	a5,-44(s0)
20401f00:	0047a803          	lw	a6,4(a5)
20401f04:	439c                	lw	a5,0(a5)
20401f06:	85be                	mv	a1,a5
20401f08:	8642                	mv	a2,a6
20401f0a:	fe842503          	lw	a0,-24(s0)
20401f0e:	334d                	jal	20401cb0 <__metal_clint0_mtime_set>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:118
            rc = 0;
20401f10:	fe042623          	sw	zero,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:120
        }
        break;
20401f14:	a059                	j	20401f9a <__metal_driver_riscv_clint0_command_request+0x106>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:122
    case METAL_SOFTWARE_IPI_CLEAR:
	if (data) {
20401f16:	fd442783          	lw	a5,-44(s0)
20401f1a:	c3d1                	beqz	a5,20401f9e <__metal_driver_riscv_clint0_command_request+0x10a>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:123
	    hartid = *(int *)data;
20401f1c:	fd442783          	lw	a5,-44(s0)
20401f20:	439c                	lw	a5,0(a5)
20401f22:	fef42223          	sw	a5,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:124
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base +
20401f26:	fe842783          	lw	a5,-24(s0)
20401f2a:	479c                	lw	a5,8(a5)
20401f2c:	fe442703          	lw	a4,-28(s0)
20401f30:	070a                	slli	a4,a4,0x2
20401f32:	97ba                	add	a5,a5,a4
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:125
					       (hartid * 4))) = METAL_DISABLE;
20401f34:	0007a023          	sw	zero,0(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:126
            rc = 0;
20401f38:	fe042623          	sw	zero,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:128
        }
        break;
20401f3c:	a08d                	j	20401f9e <__metal_driver_riscv_clint0_command_request+0x10a>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:130
    case METAL_SOFTWARE_IPI_SET:
	if (data) {
20401f3e:	fd442783          	lw	a5,-44(s0)
20401f42:	c3a5                	beqz	a5,20401fa2 <__metal_driver_riscv_clint0_command_request+0x10e>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:131
	    hartid = *(int *)data;
20401f44:	fd442783          	lw	a5,-44(s0)
20401f48:	439c                	lw	a5,0(a5)
20401f4a:	fef42223          	sw	a5,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:132
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base +
20401f4e:	fe842783          	lw	a5,-24(s0)
20401f52:	479c                	lw	a5,8(a5)
20401f54:	fe442703          	lw	a4,-28(s0)
20401f58:	070a                	slli	a4,a4,0x2
20401f5a:	97ba                	add	a5,a5,a4
20401f5c:	873e                	mv	a4,a5
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:133
					       (hartid * 4))) = METAL_ENABLE;
20401f5e:	4785                	li	a5,1
20401f60:	c31c                	sw	a5,0(a4)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:134
            rc = 0;
20401f62:	fe042623          	sw	zero,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:136
        }
        break;
20401f66:	a835                	j	20401fa2 <__metal_driver_riscv_clint0_command_request+0x10e>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:138
    case METAL_SOFTWARE_MSIP_GET:
        rc = 0;
20401f68:	fe042623          	sw	zero,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:139
	if (data) {
20401f6c:	fd442783          	lw	a5,-44(s0)
20401f70:	cb9d                	beqz	a5,20401fa6 <__metal_driver_riscv_clint0_command_request+0x112>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:140
	    hartid = *(int *)data;
20401f72:	fd442783          	lw	a5,-44(s0)
20401f76:	439c                	lw	a5,0(a5)
20401f78:	fef42223          	sw	a5,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:141
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base +
20401f7c:	fe842783          	lw	a5,-24(s0)
20401f80:	479c                	lw	a5,8(a5)
20401f82:	fe442703          	lw	a4,-28(s0)
20401f86:	070a                	slli	a4,a4,0x2
20401f88:	97ba                	add	a5,a5,a4
20401f8a:	439c                	lw	a5,0(a5)
20401f8c:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:144
						    (hartid * 4)));
        }
        break;
20401f90:	a819                	j	20401fa6 <__metal_driver_riscv_clint0_command_request+0x112>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:146
    default:
	break;
20401f92:	0001                	nop
20401f94:	a811                	j	20401fa8 <__metal_driver_riscv_clint0_command_request+0x114>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:114
        break;
20401f96:	0001                	nop
20401f98:	a801                	j	20401fa8 <__metal_driver_riscv_clint0_command_request+0x114>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:120
        break;
20401f9a:	0001                	nop
20401f9c:	a031                	j	20401fa8 <__metal_driver_riscv_clint0_command_request+0x114>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:128
        break;
20401f9e:	0001                	nop
20401fa0:	a021                	j	20401fa8 <__metal_driver_riscv_clint0_command_request+0x114>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:136
        break;
20401fa2:	0001                	nop
20401fa4:	a011                	j	20401fa8 <__metal_driver_riscv_clint0_command_request+0x114>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:144
        break;
20401fa6:	0001                	nop
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:149
    }

    return rc;
20401fa8:	fec42783          	lw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:150
}
20401fac:	853e                	mv	a0,a5
20401fae:	50b2                	lw	ra,44(sp)
20401fb0:	5422                	lw	s0,40(sp)
20401fb2:	6145                	addi	sp,sp,48
20401fb4:	8082                	ret

20401fb6 <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:10
#include <metal/io.h>
#include <metal/shutdown.h>
#include <metal/machine.h>

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
20401fb6:	1101                	addi	sp,sp,-32
20401fb8:	ce22                	sw	s0,28(sp)
20401fba:	1000                	addi	s0,sp,32
20401fbc:	fea42623          	sw	a0,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:11
    if (hartid < __METAL_DT_MAX_HARTS) {
20401fc0:	fec42783          	lw	a5,-20(s0)
20401fc4:	00f04a63          	bgtz	a5,20401fd8 <__metal_driver_cpu_get+0x22>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:12
        return &(__metal_cpu_table[hartid]->cpu);
20401fc8:	fec42703          	lw	a4,-20(s0)
20401fcc:	070a                	slli	a4,a4,0x2
20401fce:	82c18793          	addi	a5,gp,-2004 # 800010e4 <__metal_cpu_table>
20401fd2:	97ba                	add	a5,a5,a4
20401fd4:	439c                	lw	a5,0(a5)
20401fd6:	a011                	j	20401fda <__metal_driver_cpu_get+0x24>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:14
    }
    return (struct metal_cpu *)NULL;
20401fd8:	4781                	li	a5,0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:15
}
20401fda:	853e                	mv	a0,a5
20401fdc:	4472                	lw	s0,28(sp)
20401fde:	6105                	addi	sp,sp,32
20401fe0:	8082                	ret

20401fe2 <__metal_myhart_id>:
__metal_myhart_id():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:18

uintptr_t __metal_myhart_id (void)
{
20401fe2:	1101                	addi	sp,sp,-32
20401fe4:	ce22                	sw	s0,28(sp)
20401fe6:	1000                	addi	s0,sp,32
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:20
    uintptr_t myhart;
    asm volatile ("csrr %0, mhartid" : "=r"(myhart));
20401fe8:	f14027f3          	csrr	a5,mhartid
20401fec:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:21
    return myhart;
20401ff0:	fec42783          	lw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:22
}
20401ff4:	853e                	mv	a0,a5
20401ff6:	4472                	lw	s0,28(sp)
20401ff8:	6105                	addi	sp,sp,32
20401ffa:	8082                	ret

20401ffc <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:32
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
20401ffc:	1101                	addi	sp,sp,-32
20401ffe:	ce22                	sw	s0,28(sp)
20402000:	1000                	addi	s0,sp,32
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:34
    uintptr_t m;
    asm volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20402002:	47a1                	li	a5,8
20402004:	3007a7f3          	csrrs	a5,mstatus,a5
20402008:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:35
}
2040200c:	0001                	nop
2040200e:	4472                	lw	s0,28(sp)
20402010:	6105                	addi	sp,sp,32
20402012:	8082                	ret

20402014 <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:37

void __metal_interrupt_global_disable (void) {
20402014:	1101                	addi	sp,sp,-32
20402016:	ce22                	sw	s0,28(sp)
20402018:	1000                	addi	s0,sp,32
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:39
    uintptr_t m;
    asm volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
2040201a:	47a1                	li	a5,8
2040201c:	3007b7f3          	csrrc	a5,mstatus,a5
20402020:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:40
}
20402024:	0001                	nop
20402026:	4472                	lw	s0,28(sp)
20402028:	6105                	addi	sp,sp,32
2040202a:	8082                	ret

2040202c <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:42

void __metal_interrupt_software_enable (void) {
2040202c:	1101                	addi	sp,sp,-32
2040202e:	ce22                	sw	s0,28(sp)
20402030:	1000                	addi	s0,sp,32
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:44
    uintptr_t m;
    asm volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20402032:	47a1                	li	a5,8
20402034:	3047a7f3          	csrrs	a5,mie,a5
20402038:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:45
}
2040203c:	0001                	nop
2040203e:	4472                	lw	s0,28(sp)
20402040:	6105                	addi	sp,sp,32
20402042:	8082                	ret

20402044 <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:47

void __metal_interrupt_software_disable (void) {
20402044:	1101                	addi	sp,sp,-32
20402046:	ce22                	sw	s0,28(sp)
20402048:	1000                	addi	s0,sp,32
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:49
    uintptr_t m;
    asm volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
2040204a:	47a1                	li	a5,8
2040204c:	3047b7f3          	csrrc	a5,mie,a5
20402050:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:50
}
20402054:	0001                	nop
20402056:	4472                	lw	s0,28(sp)
20402058:	6105                	addi	sp,sp,32
2040205a:	8082                	ret

2040205c <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:52

void __metal_interrupt_timer_enable (void) {
2040205c:	1101                	addi	sp,sp,-32
2040205e:	ce22                	sw	s0,28(sp)
20402060:	1000                	addi	s0,sp,32
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:54
    uintptr_t m;
    asm volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20402062:	08000793          	li	a5,128
20402066:	3047a7f3          	csrrs	a5,mie,a5
2040206a:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:55
}
2040206e:	0001                	nop
20402070:	4472                	lw	s0,28(sp)
20402072:	6105                	addi	sp,sp,32
20402074:	8082                	ret

20402076 <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:57

void __metal_interrupt_timer_disable (void) {
20402076:	1101                	addi	sp,sp,-32
20402078:	ce22                	sw	s0,28(sp)
2040207a:	1000                	addi	s0,sp,32
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:59
    uintptr_t m;
    asm volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
2040207c:	08000793          	li	a5,128
20402080:	3047b7f3          	csrrc	a5,mie,a5
20402084:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:60
}
20402088:	0001                	nop
2040208a:	4472                	lw	s0,28(sp)
2040208c:	6105                	addi	sp,sp,32
2040208e:	8082                	ret

20402090 <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:62

void __metal_interrupt_external_enable (void) {
20402090:	1101                	addi	sp,sp,-32
20402092:	ce22                	sw	s0,28(sp)
20402094:	1000                	addi	s0,sp,32
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:64
    uintptr_t m;
    asm volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20402096:	6785                	lui	a5,0x1
20402098:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size+0x400>
2040209c:	3047a7f3          	csrrs	a5,mie,a5
204020a0:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:65
}
204020a4:	0001                	nop
204020a6:	4472                	lw	s0,28(sp)
204020a8:	6105                	addi	sp,sp,32
204020aa:	8082                	ret

204020ac <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:67

void __metal_interrupt_external_disable (void) {
204020ac:	1101                	addi	sp,sp,-32
204020ae:	ce22                	sw	s0,28(sp)
204020b0:	1000                	addi	s0,sp,32
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:69
    unsigned long m;
    asm volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
204020b2:	6785                	lui	a5,0x1
204020b4:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size+0x400>
204020b8:	3047b7f3          	csrrc	a5,mie,a5
204020bc:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:70
}
204020c0:	0001                	nop
204020c2:	4472                	lw	s0,28(sp)
204020c4:	6105                	addi	sp,sp,32
204020c6:	8082                	ret

204020c8 <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:72

void __metal_interrupt_local_enable (int id) {
204020c8:	7179                	addi	sp,sp,-48
204020ca:	d622                	sw	s0,44(sp)
204020cc:	1800                	addi	s0,sp,48
204020ce:	fca42e23          	sw	a0,-36(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:73
    uintptr_t b = 1 << id;
204020d2:	fdc42783          	lw	a5,-36(s0)
204020d6:	4705                	li	a4,1
204020d8:	00f717b3          	sll	a5,a4,a5
204020dc:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:75
    uintptr_t m;
    asm volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
204020e0:	fec42783          	lw	a5,-20(s0)
204020e4:	3047a7f3          	csrrs	a5,mie,a5
204020e8:	fef42423          	sw	a5,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:76
}
204020ec:	0001                	nop
204020ee:	5432                	lw	s0,44(sp)
204020f0:	6145                	addi	sp,sp,48
204020f2:	8082                	ret

204020f4 <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:78

void __metal_interrupt_local_disable (int id) {
204020f4:	7179                	addi	sp,sp,-48
204020f6:	d622                	sw	s0,44(sp)
204020f8:	1800                	addi	s0,sp,48
204020fa:	fca42e23          	sw	a0,-36(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:79
    uintptr_t b = 1 << id;
204020fe:	fdc42783          	lw	a5,-36(s0)
20402102:	4705                	li	a4,1
20402104:	00f717b3          	sll	a5,a4,a5
20402108:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:81
    uintptr_t m;
    asm volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
2040210c:	fec42783          	lw	a5,-20(s0)
20402110:	3047b7f3          	csrrc	a5,mie,a5
20402114:	fef42423          	sw	a5,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:82
}
20402118:	0001                	nop
2040211a:	5432                	lw	s0,44(sp)
2040211c:	6145                	addi	sp,sp,48
2040211e:	8082                	ret

20402120 <__metal_default_exception_handler>:
__metal_default_exception_handler():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:84

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
20402120:	1101                	addi	sp,sp,-32
20402122:	ce06                	sw	ra,28(sp)
20402124:	cc22                	sw	s0,24(sp)
20402126:	1000                	addi	s0,sp,32
20402128:	fea42623          	sw	a0,-20(s0)
2040212c:	feb42423          	sw	a1,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:85
    metal_shutdown(100);
20402130:	06400513          	li	a0,100
20402134:	1aa020ef          	jal	ra,204042de <metal_shutdown>

20402138 <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:88
}

void __metal_default_interrupt_handler (int id, void *priv) {
20402138:	1101                	addi	sp,sp,-32
2040213a:	ce06                	sw	ra,28(sp)
2040213c:	cc22                	sw	s0,24(sp)
2040213e:	1000                	addi	s0,sp,32
20402140:	fea42623          	sw	a0,-20(s0)
20402144:	feb42423          	sw	a1,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:89
    metal_shutdown(200);
20402148:	0c800513          	li	a0,200
2040214c:	192020ef          	jal	ra,204042de <metal_shutdown>

20402150 <__metal_default_sw_handler>:
__metal_default_sw_handler():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:92
}

void __metal_default_sw_handler (int id, void *priv) {
20402150:	7179                	addi	sp,sp,-48
20402152:	d606                	sw	ra,44(sp)
20402154:	d422                	sw	s0,40(sp)
20402156:	1800                	addi	s0,sp,48
20402158:	fca42e23          	sw	a0,-36(s0)
2040215c:	fcb42c23          	sw	a1,-40(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:95
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402160:	3549                	jal	20401fe2 <__metal_myhart_id>
20402162:	872a                	mv	a4,a0
20402164:	070a                	slli	a4,a4,0x2
20402166:	82c18793          	addi	a5,gp,-2004 # 800010e4 <__metal_cpu_table>
2040216a:	97ba                	add	a5,a5,a4
2040216c:	439c                	lw	a5,0(a5)
2040216e:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:97

    asm volatile ("csrr %0, mcause" : "=r"(mcause));
20402172:	342027f3          	csrr	a5,mcause
20402176:	fef42423          	sw	a5,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:98
    if ( cpu ) {
2040217a:	fec42783          	lw	a5,-20(s0)
2040217e:	c795                	beqz	a5,204021aa <__metal_default_sw_handler+0x5a>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:99
        intc = (struct __metal_driver_riscv_cpu_intc *)cpu->interrupt_controller;
20402180:	fec42783          	lw	a5,-20(s0)
20402184:	47dc                	lw	a5,12(a5)
20402186:	fef42223          	sw	a5,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:100
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
2040218a:	fe842783          	lw	a5,-24(s0)
2040218e:	3ff7f793          	andi	a5,a5,1023
20402192:	fe442703          	lw	a4,-28(s0)
20402196:	0e478793          	addi	a5,a5,228
2040219a:	078a                	slli	a5,a5,0x2
2040219c:	97ba                	add	a5,a5,a4
2040219e:	439c                	lw	a5,0(a5)
204021a0:	fdc42583          	lw	a1,-36(s0)
204021a4:	fec42503          	lw	a0,-20(s0)
204021a8:	9782                	jalr	a5
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:102
    }
}
204021aa:	0001                	nop
204021ac:	50b2                	lw	ra,44(sp)
204021ae:	5422                	lw	s0,40(sp)
204021b0:	6145                	addi	sp,sp,48
204021b2:	8082                	ret

204021b4 <__metal_default_timer_handler>:
__metal_default_timer_handler():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:104

void __metal_default_timer_handler (int id, void *priv) {
204021b4:	7179                	addi	sp,sp,-48
204021b6:	d606                	sw	ra,44(sp)
204021b8:	d422                	sw	s0,40(sp)
204021ba:	1800                	addi	s0,sp,48
204021bc:	fca42e23          	sw	a0,-36(s0)
204021c0:	fcb42c23          	sw	a1,-40(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:105
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
204021c4:	3d39                	jal	20401fe2 <__metal_myhart_id>
204021c6:	87aa                	mv	a5,a0
204021c8:	853e                	mv	a0,a5
204021ca:	33f5                	jal	20401fb6 <__metal_driver_cpu_get>
204021cc:	fea42623          	sw	a0,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:106
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
204021d0:	fec42503          	lw	a0,-20(s0)
204021d4:	7e0000ef          	jal	ra,204029b4 <__metal_driver_cpu_mtime_get>
204021d8:	fea42023          	sw	a0,-32(s0)
204021dc:	feb42223          	sw	a1,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:109

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
204021e0:	fe042783          	lw	a5,-32(s0)
204021e4:	fe442803          	lw	a6,-28(s0)
204021e8:	45a9                	li	a1,10
204021ea:	4601                	li	a2,0
204021ec:	00b786b3          	add	a3,a5,a1
204021f0:	8536                	mv	a0,a3
204021f2:	00f53533          	sltu	a0,a0,a5
204021f6:	00c80733          	add	a4,a6,a2
204021fa:	00e507b3          	add	a5,a0,a4
204021fe:	873e                	mv	a4,a5
20402200:	87b6                	mv	a5,a3
20402202:	883a                	mv	a6,a4
20402204:	85be                	mv	a1,a5
20402206:	8642                	mv	a2,a6
20402208:	fec42503          	lw	a0,-20(s0)
2040220c:	017000ef          	jal	ra,20402a22 <__metal_driver_cpu_mtimecmp_set>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:110
}
20402210:	0001                	nop
20402212:	50b2                	lw	ra,44(sp)
20402214:	5422                	lw	s0,40(sp)
20402216:	6145                	addi	sp,sp,48
20402218:	8082                	ret
	...

20402280 <__metal_exception_handler>:
__metal_exception_handler():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:113

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20402280:	7119                	addi	sp,sp,-128
20402282:	de86                	sw	ra,124(sp)
20402284:	dc96                	sw	t0,120(sp)
20402286:	da9a                	sw	t1,116(sp)
20402288:	d89e                	sw	t2,112(sp)
2040228a:	d6a2                	sw	s0,108(sp)
2040228c:	d4aa                	sw	a0,104(sp)
2040228e:	d2ae                	sw	a1,100(sp)
20402290:	d0b2                	sw	a2,96(sp)
20402292:	ceb6                	sw	a3,92(sp)
20402294:	ccba                	sw	a4,88(sp)
20402296:	cabe                	sw	a5,84(sp)
20402298:	c8c2                	sw	a6,80(sp)
2040229a:	c6c6                	sw	a7,76(sp)
2040229c:	c4f2                	sw	t3,72(sp)
2040229e:	c2f6                	sw	t4,68(sp)
204022a0:	c0fa                	sw	t5,64(sp)
204022a2:	de7e                	sw	t6,60(sp)
204022a4:	0100                	addi	s0,sp,128
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:118
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204022a6:	3b35                	jal	20401fe2 <__metal_myhart_id>
204022a8:	872a                	mv	a4,a0
204022aa:	070a                	slli	a4,a4,0x2
204022ac:	82c18793          	addi	a5,gp,-2004 # 800010e4 <__metal_cpu_table>
204022b0:	97ba                	add	a5,a5,a4
204022b2:	439c                	lw	a5,0(a5)
204022b4:	faf42623          	sw	a5,-84(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:120

    asm volatile ("csrr %0, mcause" : "=r"(mcause));
204022b8:	342027f3          	csrr	a5,mcause
204022bc:	faf42423          	sw	a5,-88(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:121
    asm volatile ("csrr %0, mepc" : "=r"(mepc));
204022c0:	341027f3          	csrr	a5,mepc
204022c4:	faf42223          	sw	a5,-92(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:122
    asm volatile ("csrr %0, mtval" : "=r"(mtval));
204022c8:	343027f3          	csrr	a5,mtval
204022cc:	faf42023          	sw	a5,-96(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:123
    asm volatile ("csrr %0, mtvec" : "=r"(mtvec));
204022d0:	305027f3          	csrr	a5,mtvec
204022d4:	f8f42e23          	sw	a5,-100(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:125

    if ( cpu ) {
204022d8:	fac42783          	lw	a5,-84(s0)
204022dc:	c3f9                	beqz	a5,204023a2 <__metal_exception_handler+0x122>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:126
        intc = (struct __metal_driver_riscv_cpu_intc *)cpu->interrupt_controller;
204022de:	fac42783          	lw	a5,-84(s0)
204022e2:	47dc                	lw	a5,12(a5)
204022e4:	f8f42c23          	sw	a5,-104(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:127
        id = mcause & METAL_MCAUSE_CAUSE;
204022e8:	fa842783          	lw	a5,-88(s0)
204022ec:	3ff7f793          	andi	a5,a5,1023
204022f0:	f8f42a23          	sw	a5,-108(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:128
        if (mcause & METAL_MCAUSE_INTR) {
204022f4:	fa842783          	lw	a5,-88(s0)
204022f8:	0807d763          	bgez	a5,20402386 <__metal_exception_handler+0x106>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:129
            if ((id < METAL_INTERRUPT_ID_LC0) ||
204022fc:	f9442703          	lw	a4,-108(s0)
20402300:	47bd                	li	a5,15
20402302:	00e7d763          	bge	a5,a4,20402310 <__metal_exception_handler+0x90>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:130 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
20402306:	f9c42783          	lw	a5,-100(s0)
2040230a:	03f7f793          	andi	a5,a5,63
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:129 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_LC0) ||
2040230e:	ef9d                	bnez	a5,2040234c <__metal_exception_handler+0xcc>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:131
                priv = intc->metal_int_table[id].exint_data;
20402310:	f9842683          	lw	a3,-104(s0)
20402314:	f9442703          	lw	a4,-108(s0)
20402318:	87ba                	mv	a5,a4
2040231a:	0786                	slli	a5,a5,0x1
2040231c:	97ba                	add	a5,a5,a4
2040231e:	078e                	slli	a5,a5,0x3
20402320:	97b6                	add	a5,a5,a3
20402322:	0a07a783          	lw	a5,160(a5)
20402326:	f8f42623          	sw	a5,-116(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:132
                intc->metal_int_table[id].handler(id, priv);
2040232a:	f9842683          	lw	a3,-104(s0)
2040232e:	f9442703          	lw	a4,-108(s0)
20402332:	87ba                	mv	a5,a4
20402334:	0786                	slli	a5,a5,0x1
20402336:	97ba                	add	a5,a5,a4
20402338:	078e                	slli	a5,a5,0x3
2040233a:	97b6                	add	a5,a5,a3
2040233c:	0987a783          	lw	a5,152(a5)
20402340:	f8c42583          	lw	a1,-116(s0)
20402344:	f9442503          	lw	a0,-108(s0)
20402348:	9782                	jalr	a5
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:133
		return;
2040234a:	a8a1                	j	204023a2 <__metal_exception_handler+0x122>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:135
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
2040234c:	f9c42783          	lw	a5,-100(s0)
20402350:	03f7f713          	andi	a4,a5,63
20402354:	4789                	li	a5,2
20402356:	04f71663          	bne	a4,a5,204023a2 <__metal_exception_handler+0x122>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:139
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                asm volatile ("csrr %0, mtvt" : "=r"(mtvt));
2040235a:	307027f3          	csrr	a5,mtvt
2040235e:	f8f42823          	sw	a5,-112(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:140
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20402362:	f9842783          	lw	a5,-104(s0)
20402366:	0e47a783          	lw	a5,228(a5)
2040236a:	f8f42623          	sw	a5,-116(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:141
               	mtvt_handler = (metal_interrupt_handler_t)mtvt;
2040236e:	f9042783          	lw	a5,-112(s0)
20402372:	f8f42423          	sw	a5,-120(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:142
               	mtvt_handler(id, priv);
20402376:	f8842783          	lw	a5,-120(s0)
2040237a:	f8c42583          	lw	a1,-116(s0)
2040237e:	f9442503          	lw	a0,-108(s0)
20402382:	9782                	jalr	a5
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:143
		return;
20402384:	a839                	j	204023a2 <__metal_exception_handler+0x122>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:146
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
20402386:	f9842703          	lw	a4,-104(s0)
2040238a:	f9442783          	lw	a5,-108(s0)
2040238e:	0e478793          	addi	a5,a5,228
20402392:	078a                	slli	a5,a5,0x2
20402394:	97ba                	add	a5,a5,a4
20402396:	439c                	lw	a5,0(a5)
20402398:	f9442583          	lw	a1,-108(s0)
2040239c:	fac42503          	lw	a0,-84(s0)
204023a0:	9782                	jalr	a5
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:149
        }
    }
}
204023a2:	50f6                	lw	ra,124(sp)
204023a4:	52e6                	lw	t0,120(sp)
204023a6:	5356                	lw	t1,116(sp)
204023a8:	53c6                	lw	t2,112(sp)
204023aa:	5436                	lw	s0,108(sp)
204023ac:	5526                	lw	a0,104(sp)
204023ae:	5596                	lw	a1,100(sp)
204023b0:	5606                	lw	a2,96(sp)
204023b2:	46f6                	lw	a3,92(sp)
204023b4:	4766                	lw	a4,88(sp)
204023b6:	47d6                	lw	a5,84(sp)
204023b8:	4846                	lw	a6,80(sp)
204023ba:	48b6                	lw	a7,76(sp)
204023bc:	4e26                	lw	t3,72(sp)
204023be:	4e96                	lw	t4,68(sp)
204023c0:	4f06                	lw	t5,64(sp)
204023c2:	5ff2                	lw	t6,60(sp)
204023c4:	6109                	addi	sp,sp,128
204023c6:	30200073          	mret
	...

204023f8 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:152

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
204023f8:	7179                	addi	sp,sp,-48
204023fa:	d622                	sw	s0,44(sp)
204023fc:	1800                	addi	s0,sp,48
204023fe:	fca42e23          	sw	a0,-36(s0)
20402402:	fcb42c23          	sw	a1,-40(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:155
    uintptr_t trap_entry, val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
20402406:	305027f3          	csrr	a5,mtvec
2040240a:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:156
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
2040240e:	fec42783          	lw	a5,-20(s0)
20402412:	fc07f793          	andi	a5,a5,-64
20402416:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:157
    trap_entry = (uintptr_t)vec_table;
2040241a:	fd842783          	lw	a5,-40(s0)
2040241e:	fef42423          	sw	a5,-24(s0)
20402422:	fdc42703          	lw	a4,-36(s0)
20402426:	4785                	li	a5,1
20402428:	04f70a63          	beq	a4,a5,2040247c <__metal_controller_interrupt_vector+0x84>
2040242c:	fdc42783          	lw	a5,-36(s0)
20402430:	cfa9                	beqz	a5,2040248a <__metal_controller_interrupt_vector+0x92>
20402432:	fdc42703          	lw	a4,-36(s0)
20402436:	4789                	li	a5,2
20402438:	00f70863          	beq	a4,a5,20402448 <__metal_controller_interrupt_vector+0x50>
2040243c:	fdc42703          	lw	a4,-36(s0)
20402440:	478d                	li	a5,3
20402442:	02f70063          	beq	a4,a5,20402462 <__metal_controller_interrupt_vector+0x6a>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:175
        break;
    case METAL_DIRECT_MODE:
        asm volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
        break;
    }
}
20402446:	a881                	j	20402496 <__metal_controller_interrupt_vector+0x9e>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:161
        asm volatile ("csrw mtvt, %0" :: "r"(trap_entry | METAL_MTVEC_CLIC));
20402448:	fe842783          	lw	a5,-24(s0)
2040244c:	0027e793          	ori	a5,a5,2
20402450:	30779073          	csrw	mtvt,a5
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:162
        asm volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
20402454:	fec42783          	lw	a5,-20(s0)
20402458:	0027e793          	ori	a5,a5,2
2040245c:	30579073          	csrw	mtvec,a5
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:163
        break;
20402460:	a81d                	j	20402496 <__metal_controller_interrupt_vector+0x9e>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:165
        asm volatile ("csrw mtvt, %0" :: "r"(trap_entry | METAL_MTVEC_CLIC_VECTORED));
20402462:	fe842783          	lw	a5,-24(s0)
20402466:	0037e793          	ori	a5,a5,3
2040246a:	30779073          	csrw	mtvt,a5
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:166
        asm volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
2040246e:	fec42783          	lw	a5,-20(s0)
20402472:	0037e793          	ori	a5,a5,3
20402476:	30579073          	csrw	mtvec,a5
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:167
        break;
2040247a:	a831                	j	20402496 <__metal_controller_interrupt_vector+0x9e>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:169
        asm volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
2040247c:	fe842783          	lw	a5,-24(s0)
20402480:	0017e793          	ori	a5,a5,1
20402484:	30579073          	csrw	mtvec,a5
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:170
        break;
20402488:	a039                	j	20402496 <__metal_controller_interrupt_vector+0x9e>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:172
        asm volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
2040248a:	fe842783          	lw	a5,-24(s0)
2040248e:	9bf1                	andi	a5,a5,-4
20402490:	30579073          	csrw	mtvec,a5
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:173
        break;
20402494:	0001                	nop
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:175
}
20402496:	0001                	nop
20402498:	5432                	lw	s0,44(sp)
2040249a:	6145                	addi	sp,sp,48
2040249c:	8082                	ret

2040249e <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:178

int __metal_valid_interrupt_id (int id)
{
2040249e:	1101                	addi	sp,sp,-32
204024a0:	ce22                	sw	s0,28(sp)
204024a2:	1000                	addi	s0,sp,32
204024a4:	fea42623          	sw	a0,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:179
    switch (id) {
204024a8:	fec42783          	lw	a5,-20(s0)
204024ac:	17f5                	addi	a5,a5,-3
204024ae:	4771                	li	a4,28
204024b0:	00f76d63          	bltu	a4,a5,204024ca <__metal_valid_interrupt_id+0x2c>
204024b4:	00279713          	slli	a4,a5,0x2
204024b8:	204057b7          	lui	a5,0x20405
204024bc:	89478793          	addi	a5,a5,-1900 # 20404894 <__metal_driver_vtable_sifive_fe310_g000_pll+0x24>
204024c0:	97ba                	add	a5,a5,a4
204024c2:	439c                	lw	a5,0(a5)
204024c4:	8782                	jr	a5
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:199
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
204024c6:	4785                	li	a5,1
204024c8:	a019                	j	204024ce <__metal_valid_interrupt_id+0x30>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:201
    default:
        break;
204024ca:	0001                	nop
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:204
    }

    return 0;
204024cc:	4781                	li	a5,0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:205
}
204024ce:	853e                	mv	a0,a5
204024d0:	4472                	lw	s0,28(sp)
204024d2:	6105                	addi	sp,sp,32
204024d4:	8082                	ret

204024d6 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:210

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
204024d6:	7179                	addi	sp,sp,-48
204024d8:	d606                	sw	ra,44(sp)
204024da:	d422                	sw	s0,40(sp)
204024dc:	1800                	addi	s0,sp,48
204024de:	fca42e23          	sw	a0,-36(s0)
204024e2:	fcb42c23          	sw	a1,-40(s0)
204024e6:	fcc42a23          	sw	a2,-44(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:211
    int rc = 0;
204024ea:	fe042623          	sw	zero,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:213
  
    if ( !controller) {
204024ee:	fdc42783          	lw	a5,-36(s0)
204024f2:	e399                	bnez	a5,204024f8 <__metal_local_interrupt_enable+0x22>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:214
        return -1;
204024f4:	57fd                	li	a5,-1
204024f6:	a8a5                	j	2040256e <__metal_local_interrupt_enable+0x98>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:217
    }

    switch (id) {
204024f8:	fd842703          	lw	a4,-40(s0)
204024fc:	47fd                	li	a5,31
204024fe:	06e7e663          	bltu	a5,a4,2040256a <__metal_local_interrupt_enable+0x94>
20402502:	fd842783          	lw	a5,-40(s0)
20402506:	00279713          	slli	a4,a5,0x2
2040250a:	204057b7          	lui	a5,0x20405
2040250e:	90878793          	addi	a5,a5,-1784 # 20404908 <__metal_driver_vtable_sifive_fe310_g000_pll+0x98>
20402512:	97ba                	add	a5,a5,a4
20402514:	439c                	lw	a5,0(a5)
20402516:	8782                	jr	a5
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:219
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
20402518:	fd442783          	lw	a5,-44(s0)
2040251c:	c399                	beqz	a5,20402522 <__metal_local_interrupt_enable+0x4c>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:220
            __metal_interrupt_global_enable();
2040251e:	3cf9                	jal	20401ffc <__metal_interrupt_global_enable>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:224
        } else {
            __metal_interrupt_global_disable();
        }
        break;
20402520:	a0a9                	j	2040256a <__metal_local_interrupt_enable+0x94>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:222
            __metal_interrupt_global_disable();
20402522:	3ccd                	jal	20402014 <__metal_interrupt_global_disable>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:224
        break;
20402524:	a099                	j	2040256a <__metal_local_interrupt_enable+0x94>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:226
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
20402526:	fd442783          	lw	a5,-44(s0)
2040252a:	c399                	beqz	a5,20402530 <__metal_local_interrupt_enable+0x5a>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:227
            __metal_interrupt_software_enable();
2040252c:	3601                	jal	2040202c <__metal_interrupt_software_enable>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:231
        } else {
            __metal_interrupt_software_disable();
        }
        break;
2040252e:	a835                	j	2040256a <__metal_local_interrupt_enable+0x94>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:229
            __metal_interrupt_software_disable();
20402530:	3e11                	jal	20402044 <__metal_interrupt_software_disable>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:231
        break;
20402532:	a825                	j	2040256a <__metal_local_interrupt_enable+0x94>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:233
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
20402534:	fd442783          	lw	a5,-44(s0)
20402538:	c399                	beqz	a5,2040253e <__metal_local_interrupt_enable+0x68>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:234
	    __metal_interrupt_timer_enable();
2040253a:	360d                	jal	2040205c <__metal_interrupt_timer_enable>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:238
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
2040253c:	a03d                	j	2040256a <__metal_local_interrupt_enable+0x94>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:236
	    __metal_interrupt_timer_disable();
2040253e:	3e25                	jal	20402076 <__metal_interrupt_timer_disable>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:238
	break;
20402540:	a02d                	j	2040256a <__metal_local_interrupt_enable+0x94>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:240
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
20402542:	fd442783          	lw	a5,-44(s0)
20402546:	c399                	beqz	a5,2040254c <__metal_local_interrupt_enable+0x76>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:241
            __metal_interrupt_external_enable();
20402548:	36a1                	jal	20402090 <__metal_interrupt_external_enable>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:245
        } else {
            __metal_interrupt_external_disable();
        }
        break;
2040254a:	a005                	j	2040256a <__metal_local_interrupt_enable+0x94>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:243
            __metal_interrupt_external_disable();
2040254c:	3685                	jal	204020ac <__metal_interrupt_external_disable>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:245
        break;
2040254e:	a831                	j	2040256a <__metal_local_interrupt_enable+0x94>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:262
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
20402550:	fd442783          	lw	a5,-44(s0)
20402554:	c791                	beqz	a5,20402560 <__metal_local_interrupt_enable+0x8a>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:263
            __metal_interrupt_local_enable(id);
20402556:	fd842783          	lw	a5,-40(s0)
2040255a:	853e                	mv	a0,a5
2040255c:	36b5                	jal	204020c8 <__metal_interrupt_local_enable>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:267
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
2040255e:	a029                	j	20402568 <__metal_local_interrupt_enable+0x92>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:265
            __metal_interrupt_local_disable(id);
20402560:	fd842783          	lw	a5,-40(s0)
20402564:	853e                	mv	a0,a5
20402566:	3679                	jal	204020f4 <__metal_interrupt_local_disable>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:267
        break;
20402568:	0001                	nop
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:271
    defaut:
        rc = -1;
    }
    return rc;
2040256a:	fec42783          	lw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:272
}
2040256e:	853e                	mv	a0,a5
20402570:	50b2                	lw	ra,44(sp)
20402572:	5422                	lw	s0,40(sp)
20402574:	6145                	addi	sp,sp,48
20402576:	8082                	ret

20402578 <__metal_exception_register>:
__metal_exception_register():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:276

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
20402578:	7179                	addi	sp,sp,-48
2040257a:	d622                	sw	s0,44(sp)
2040257c:	1800                	addi	s0,sp,48
2040257e:	fca42e23          	sw	a0,-36(s0)
20402582:	fcb42c23          	sw	a1,-40(s0)
20402586:	fcc42a23          	sw	a2,-44(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:277
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
2040258a:	fdc42783          	lw	a5,-36(s0)
2040258e:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:279

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
20402592:	fd842703          	lw	a4,-40(s0)
20402596:	47ad                	li	a5,11
20402598:	02e7c263          	blt	a5,a4,204025bc <__metal_exception_register+0x44>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:279 (discriminator 1)
2040259c:	fd442783          	lw	a5,-44(s0)
204025a0:	cf91                	beqz	a5,204025bc <__metal_exception_register+0x44>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:280
        intc->metal_exception_table[ecode] = isr;
204025a2:	fec42703          	lw	a4,-20(s0)
204025a6:	fd842783          	lw	a5,-40(s0)
204025aa:	0e478793          	addi	a5,a5,228
204025ae:	078a                	slli	a5,a5,0x2
204025b0:	97ba                	add	a5,a5,a4
204025b2:	fd442703          	lw	a4,-44(s0)
204025b6:	c398                	sw	a4,0(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:281
        return 0;
204025b8:	4781                	li	a5,0
204025ba:	a011                	j	204025be <__metal_exception_register+0x46>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:283
    }
    return -1;
204025bc:	57fd                	li	a5,-1
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:284
}
204025be:	853e                	mv	a0,a5
204025c0:	5432                	lw	s0,44(sp)
204025c2:	6145                	addi	sp,sp,48
204025c4:	8082                	ret

204025c6 <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:287

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
204025c6:	7179                	addi	sp,sp,-48
204025c8:	d606                	sw	ra,44(sp)
204025ca:	d422                	sw	s0,40(sp)
204025cc:	1800                	addi	s0,sp,48
204025ce:	fca42e23          	sw	a0,-36(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:288
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
204025d2:	fdc42783          	lw	a5,-36(s0)
204025d6:	fef42223          	sw	a5,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:291
    uintptr_t val;

    if ( !intc->init_done ) {
204025da:	fe442783          	lw	a5,-28(s0)
204025de:	479c                	lw	a5,8(a5)
204025e0:	ebe1                	bnez	a5,204026b0 <__metal_driver_riscv_cpu_controller_interrupt_init+0xea>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:293
        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
204025e2:	fe042623          	sw	zero,-20(s0)
204025e6:	a0b9                	j	20402634 <__metal_driver_riscv_cpu_controller_interrupt_init+0x6e>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:294 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
204025e8:	fe442683          	lw	a3,-28(s0)
204025ec:	fec42703          	lw	a4,-20(s0)
204025f0:	87ba                	mv	a5,a4
204025f2:	0786                	slli	a5,a5,0x1
204025f4:	97ba                	add	a5,a5,a4
204025f6:	078e                	slli	a5,a5,0x3
204025f8:	97b6                	add	a5,a5,a3
204025fa:	0807ac23          	sw	zero,152(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:295 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
204025fe:	fe442683          	lw	a3,-28(s0)
20402602:	fec42703          	lw	a4,-20(s0)
20402606:	87ba                	mv	a5,a4
20402608:	0786                	slli	a5,a5,0x1
2040260a:	97ba                	add	a5,a5,a4
2040260c:	078e                	slli	a5,a5,0x3
2040260e:	97b6                	add	a5,a5,a3
20402610:	0807ae23          	sw	zero,156(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:296 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
20402614:	fe442683          	lw	a3,-28(s0)
20402618:	fec42703          	lw	a4,-20(s0)
2040261c:	87ba                	mv	a5,a4
2040261e:	0786                	slli	a5,a5,0x1
20402620:	97ba                	add	a5,a5,a4
20402622:	078e                	slli	a5,a5,0x3
20402624:	97b6                	add	a5,a5,a3
20402626:	0a07a023          	sw	zero,160(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:293 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
2040262a:	fec42783          	lw	a5,-20(s0)
2040262e:	0785                	addi	a5,a5,1
20402630:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:293 (discriminator 1)
20402634:	fec42703          	lw	a4,-20(s0)
20402638:	47fd                	li	a5,31
2040263a:	fae7d7e3          	bge	a5,a4,204025e8 <__metal_driver_riscv_cpu_controller_interrupt_init+0x22>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:298
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
2040263e:	fe042423          	sw	zero,-24(s0)
20402642:	a01d                	j	20402668 <__metal_driver_riscv_cpu_controller_interrupt_init+0xa2>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:299 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
20402644:	fe442703          	lw	a4,-28(s0)
20402648:	fe842783          	lw	a5,-24(s0)
2040264c:	0e478793          	addi	a5,a5,228
20402650:	078a                	slli	a5,a5,0x2
20402652:	97ba                	add	a5,a5,a4
20402654:	20402737          	lui	a4,0x20402
20402658:	12070713          	addi	a4,a4,288 # 20402120 <__metal_default_exception_handler>
2040265c:	c398                	sw	a4,0(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:298 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
2040265e:	fe842783          	lw	a5,-24(s0)
20402662:	0785                	addi	a5,a5,1
20402664:	fef42423          	sw	a5,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:298 (discriminator 1)
20402668:	fe842703          	lw	a4,-24(s0)
2040266c:	47ad                	li	a5,11
2040266e:	fce7dbe3          	bge	a5,a4,20402644 <__metal_driver_riscv_cpu_controller_interrupt_init+0x7e>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:301
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, &__metal_exception_handler);
20402672:	204027b7          	lui	a5,0x20402
20402676:	28078593          	addi	a1,a5,640 # 20402280 <__metal_exception_handler>
2040267a:	4501                	li	a0,0
2040267c:	3bb5                	jal	204023f8 <__metal_controller_interrupt_vector>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:302
	asm volatile ("csrr %0, misa" : "=r"(val));
2040267e:	301027f3          	csrr	a5,misa
20402682:	fef42023          	sw	a5,-32(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:303
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
20402686:	fe042703          	lw	a4,-32(s0)
2040268a:	67c1                	lui	a5,0x10
2040268c:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xfc28>
20402690:	8ff9                	and	a5,a5,a4
20402692:	cb99                	beqz	a5,204026a8 <__metal_driver_riscv_cpu_controller_interrupt_init+0xe2>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:305
	    /* Floating point architecture, so turn on FP register saving*/
	    asm volatile ("csrr %0, mstatus" : "=r"(val));
20402694:	300027f3          	csrr	a5,mstatus
20402698:	fef42023          	sw	a5,-32(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:306
	    asm volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
2040269c:	fe042703          	lw	a4,-32(s0)
204026a0:	6789                	lui	a5,0x2
204026a2:	8fd9                	or	a5,a5,a4
204026a4:	30079073          	csrw	mstatus,a5
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:308
	}
	intc->init_done = 1;
204026a8:	fe442783          	lw	a5,-28(s0)
204026ac:	4705                	li	a4,1
204026ae:	c798                	sw	a4,8(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:310
    }
}
204026b0:	0001                	nop
204026b2:	50b2                	lw	ra,44(sp)
204026b4:	5422                	lw	s0,40(sp)
204026b6:	6145                	addi	sp,sp,48
204026b8:	8082                	ret

204026ba <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:315

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
204026ba:	7179                	addi	sp,sp,-48
204026bc:	d606                	sw	ra,44(sp)
204026be:	d422                	sw	s0,40(sp)
204026c0:	1800                	addi	s0,sp,48
204026c2:	fca42e23          	sw	a0,-36(s0)
204026c6:	fcb42c23          	sw	a1,-40(s0)
204026ca:	fcc42a23          	sw	a2,-44(s0)
204026ce:	fcd42823          	sw	a3,-48(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:316
    int rc = 0;
204026d2:	fe042623          	sw	zero,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:317
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
204026d6:	fdc42783          	lw	a5,-36(s0)
204026da:	fef42423          	sw	a5,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:319
 
    if ( !__metal_valid_interrupt_id(id) ) {
204026de:	fd842503          	lw	a0,-40(s0)
204026e2:	3b75                	jal	2040249e <__metal_valid_interrupt_id>
204026e4:	87aa                	mv	a5,a0
204026e6:	e399                	bnez	a5,204026ec <__metal_driver_riscv_cpu_controller_interrupt_register+0x32>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:320
        return -11;
204026e8:	57d5                	li	a5,-11
204026ea:	a239                	j	204027f8 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13e>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:323
    }

    if (isr) {
204026ec:	fd442783          	lw	a5,-44(s0)
204026f0:	cf85                	beqz	a5,20402728 <__metal_driver_riscv_cpu_controller_interrupt_register+0x6e>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:324
        intc->metal_int_table[id].handler = isr;
204026f2:	fe842683          	lw	a3,-24(s0)
204026f6:	fd842703          	lw	a4,-40(s0)
204026fa:	87ba                	mv	a5,a4
204026fc:	0786                	slli	a5,a5,0x1
204026fe:	97ba                	add	a5,a5,a4
20402700:	078e                	slli	a5,a5,0x3
20402702:	97b6                	add	a5,a5,a3
20402704:	fd442703          	lw	a4,-44(s0)
20402708:	08e7ac23          	sw	a4,152(a5) # 2098 <__heap_size+0x1c98>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:325
        intc->metal_int_table[id].exint_data = priv;
2040270c:	fe842683          	lw	a3,-24(s0)
20402710:	fd842703          	lw	a4,-40(s0)
20402714:	87ba                	mv	a5,a4
20402716:	0786                	slli	a5,a5,0x1
20402718:	97ba                	add	a5,a5,a4
2040271a:	078e                	slli	a5,a5,0x3
2040271c:	97b6                	add	a5,a5,a3
2040271e:	fd042703          	lw	a4,-48(s0)
20402722:	0ae7a023          	sw	a4,160(a5)
20402726:	a0f9                	j	204027f4 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:327
    } else {
	switch (id) {
20402728:	fd842783          	lw	a5,-40(s0)
2040272c:	17f5                	addi	a5,a5,-3
2040272e:	4771                	li	a4,28
20402730:	0cf76263          	bltu	a4,a5,204027f4 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
20402734:	00279713          	slli	a4,a5,0x2
20402738:	204057b7          	lui	a5,0x20405
2040273c:	98878793          	addi	a5,a5,-1656 # 20404988 <__metal_driver_vtable_sifive_fe310_g000_pll+0x118>
20402740:	97ba                	add	a5,a5,a4
20402742:	439c                	lw	a5,0(a5)
20402744:	8782                	jr	a5
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:329
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
20402746:	fe842683          	lw	a3,-24(s0)
2040274a:	fd842703          	lw	a4,-40(s0)
2040274e:	87ba                	mv	a5,a4
20402750:	0786                	slli	a5,a5,0x1
20402752:	97ba                	add	a5,a5,a4
20402754:	078e                	slli	a5,a5,0x3
20402756:	97b6                	add	a5,a5,a3
20402758:	20402737          	lui	a4,0x20402
2040275c:	15070713          	addi	a4,a4,336 # 20402150 <__metal_default_sw_handler>
20402760:	08e7ac23          	sw	a4,152(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:330
            intc->metal_int_table[id].sub_int = priv;
20402764:	fe842683          	lw	a3,-24(s0)
20402768:	fd842703          	lw	a4,-40(s0)
2040276c:	87ba                	mv	a5,a4
2040276e:	0786                	slli	a5,a5,0x1
20402770:	97ba                	add	a5,a5,a4
20402772:	078e                	slli	a5,a5,0x3
20402774:	97b6                	add	a5,a5,a3
20402776:	fd042703          	lw	a4,-48(s0)
2040277a:	08e7ae23          	sw	a4,156(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:331
	  break;
2040277e:	a89d                	j	204027f4 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:333
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
20402780:	fe842683          	lw	a3,-24(s0)
20402784:	fd842703          	lw	a4,-40(s0)
20402788:	87ba                	mv	a5,a4
2040278a:	0786                	slli	a5,a5,0x1
2040278c:	97ba                	add	a5,a5,a4
2040278e:	078e                	slli	a5,a5,0x3
20402790:	97b6                	add	a5,a5,a3
20402792:	20402737          	lui	a4,0x20402
20402796:	1b470713          	addi	a4,a4,436 # 204021b4 <__metal_default_timer_handler>
2040279a:	08e7ac23          	sw	a4,152(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:334
            intc->metal_int_table[id].sub_int = priv;
2040279e:	fe842683          	lw	a3,-24(s0)
204027a2:	fd842703          	lw	a4,-40(s0)
204027a6:	87ba                	mv	a5,a4
204027a8:	0786                	slli	a5,a5,0x1
204027aa:	97ba                	add	a5,a5,a4
204027ac:	078e                	slli	a5,a5,0x3
204027ae:	97b6                	add	a5,a5,a3
204027b0:	fd042703          	lw	a4,-48(s0)
204027b4:	08e7ae23          	sw	a4,156(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:335
	  break;
204027b8:	a835                	j	204027f4 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:353
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
204027ba:	fe842683          	lw	a3,-24(s0)
204027be:	fd842703          	lw	a4,-40(s0)
204027c2:	87ba                	mv	a5,a4
204027c4:	0786                	slli	a5,a5,0x1
204027c6:	97ba                	add	a5,a5,a4
204027c8:	078e                	slli	a5,a5,0x3
204027ca:	97b6                	add	a5,a5,a3
204027cc:	20402737          	lui	a4,0x20402
204027d0:	13870713          	addi	a4,a4,312 # 20402138 <__metal_default_interrupt_handler>
204027d4:	08e7ac23          	sw	a4,152(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:354
            intc->metal_int_table[id].sub_int = priv;
204027d8:	fe842683          	lw	a3,-24(s0)
204027dc:	fd842703          	lw	a4,-40(s0)
204027e0:	87ba                	mv	a5,a4
204027e2:	0786                	slli	a5,a5,0x1
204027e4:	97ba                	add	a5,a5,a4
204027e6:	078e                	slli	a5,a5,0x3
204027e8:	97b6                	add	a5,a5,a3
204027ea:	fd042703          	lw	a4,-48(s0)
204027ee:	08e7ae23          	sw	a4,156(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:355
	  break;
204027f2:	0001                	nop
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:360
	defaut:
	  rc = -12;
	}
    }
    return rc;
204027f4:	fec42783          	lw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:361
}
204027f8:	853e                	mv	a0,a5
204027fa:	50b2                	lw	ra,44(sp)
204027fc:	5422                	lw	s0,40(sp)
204027fe:	6145                	addi	sp,sp,48
20402800:	8082                	ret

20402802 <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:365

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
20402802:	1101                	addi	sp,sp,-32
20402804:	ce06                	sw	ra,28(sp)
20402806:	cc22                	sw	s0,24(sp)
20402808:	1000                	addi	s0,sp,32
2040280a:	fea42623          	sw	a0,-20(s0)
2040280e:	feb42423          	sw	a1,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:366
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
20402812:	fe842783          	lw	a5,-24(s0)
20402816:	4605                	li	a2,1
20402818:	85be                	mv	a1,a5
2040281a:	fec42503          	lw	a0,-20(s0)
2040281e:	3965                	jal	204024d6 <__metal_local_interrupt_enable>
20402820:	87aa                	mv	a5,a0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:367
}
20402822:	853e                	mv	a0,a5
20402824:	40f2                	lw	ra,28(sp)
20402826:	4462                	lw	s0,24(sp)
20402828:	6105                	addi	sp,sp,32
2040282a:	8082                	ret

2040282c <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:371

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
2040282c:	1101                	addi	sp,sp,-32
2040282e:	ce06                	sw	ra,28(sp)
20402830:	cc22                	sw	s0,24(sp)
20402832:	1000                	addi	s0,sp,32
20402834:	fea42623          	sw	a0,-20(s0)
20402838:	feb42423          	sw	a1,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:372
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
2040283c:	fe842783          	lw	a5,-24(s0)
20402840:	4601                	li	a2,0
20402842:	85be                	mv	a1,a5
20402844:	fec42503          	lw	a0,-20(s0)
20402848:	3179                	jal	204024d6 <__metal_local_interrupt_enable>
2040284a:	87aa                	mv	a5,a0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:373
}
2040284c:	853e                	mv	a0,a5
2040284e:	40f2                	lw	ra,28(sp)
20402850:	4462                	lw	s0,24(sp)
20402852:	6105                	addi	sp,sp,32
20402854:	8082                	ret

20402856 <__metal_driver_riscv_cpu_controller_interrupt_enable_vector>:
__metal_driver_riscv_cpu_controller_interrupt_enable_vector():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:377

int __metal_driver_riscv_cpu_controller_interrupt_enable_vector(struct metal_interrupt *controller,
                                                             int id, metal_vector_mode mode)
{
20402856:	7179                	addi	sp,sp,-48
20402858:	d606                	sw	ra,44(sp)
2040285a:	d422                	sw	s0,40(sp)
2040285c:	1800                	addi	s0,sp,48
2040285e:	fca42e23          	sw	a0,-36(s0)
20402862:	fcb42c23          	sw	a1,-40(s0)
20402866:	fcc42a23          	sw	a2,-44(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:378
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
2040286a:	fdc42783          	lw	a5,-36(s0)
2040286e:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:380

    if (id == METAL_INTERRUPT_ID_BASE) {
20402872:	fd842783          	lw	a5,-40(s0)
20402876:	eb9d                	bnez	a5,204028ac <__metal_driver_riscv_cpu_controller_interrupt_enable_vector+0x56>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:381
        if (mode == METAL_DIRECT_MODE) {
20402878:	fd442783          	lw	a5,-44(s0)
2040287c:	eb91                	bnez	a5,20402890 <__metal_driver_riscv_cpu_controller_interrupt_enable_vector+0x3a>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:382
            __metal_controller_interrupt_vector(mode, &__metal_exception_handler);
2040287e:	204027b7          	lui	a5,0x20402
20402882:	28078593          	addi	a1,a5,640 # 20402280 <__metal_exception_handler>
20402886:	fd442503          	lw	a0,-44(s0)
2040288a:	36bd                	jal	204023f8 <__metal_controller_interrupt_vector>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:383
            return 0;
2040288c:	4781                	li	a5,0
2040288e:	a005                	j	204028ae <__metal_driver_riscv_cpu_controller_interrupt_enable_vector+0x58>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:385
        }   
        if (mode == METAL_VECTOR_MODE) {
20402890:	fd442703          	lw	a4,-44(s0)
20402894:	4785                	li	a5,1
20402896:	00f71b63          	bne	a4,a5,204028ac <__metal_driver_riscv_cpu_controller_interrupt_enable_vector+0x56>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:386
            __metal_controller_interrupt_vector(mode, &intc->metal_mtvec_table);
2040289a:	fec42783          	lw	a5,-20(s0)
2040289e:	07c1                	addi	a5,a5,16
204028a0:	85be                	mv	a1,a5
204028a2:	fd442503          	lw	a0,-44(s0)
204028a6:	3e89                	jal	204023f8 <__metal_controller_interrupt_vector>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:387
            return 0;
204028a8:	4781                	li	a5,0
204028aa:	a011                	j	204028ae <__metal_driver_riscv_cpu_controller_interrupt_enable_vector+0x58>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:390
        }
    }
    return -1;
204028ac:	57fd                	li	a5,-1
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:391
}
204028ae:	853e                	mv	a0,a5
204028b0:	50b2                	lw	ra,44(sp)
204028b2:	5422                	lw	s0,40(sp)
204028b4:	6145                	addi	sp,sp,48
204028b6:	8082                	ret

204028b8 <__metal_driver_riscv_cpu_controller_interrupt_disable_vector>:
__metal_driver_riscv_cpu_controller_interrupt_disable_vector():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:395

int __metal_driver_riscv_cpu_controller_interrupt_disable_vector(struct metal_interrupt *controller,
                                                              int id)
{
204028b8:	7179                	addi	sp,sp,-48
204028ba:	d606                	sw	ra,44(sp)
204028bc:	d422                	sw	s0,40(sp)
204028be:	1800                	addi	s0,sp,48
204028c0:	fca42e23          	sw	a0,-36(s0)
204028c4:	fcb42c23          	sw	a1,-40(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:396
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
204028c8:	fdc42783          	lw	a5,-36(s0)
204028cc:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:398

    if (id == METAL_INTERRUPT_ID_BASE) {
204028d0:	fd842783          	lw	a5,-40(s0)
204028d4:	eb89                	bnez	a5,204028e6 <__metal_driver_riscv_cpu_controller_interrupt_disable_vector+0x2e>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:399
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, &__metal_exception_handler);
204028d6:	204027b7          	lui	a5,0x20402
204028da:	28078593          	addi	a1,a5,640 # 20402280 <__metal_exception_handler>
204028de:	4501                	li	a0,0
204028e0:	3e21                	jal	204023f8 <__metal_controller_interrupt_vector>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:400
        return 0;
204028e2:	4781                	li	a5,0
204028e4:	a011                	j	204028e8 <__metal_driver_riscv_cpu_controller_interrupt_disable_vector+0x30>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:402
    }
    return -1;
204028e6:	57fd                	li	a5,-1
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:403
}
204028e8:	853e                	mv	a0,a5
204028ea:	50b2                	lw	ra,44(sp)
204028ec:	5422                	lw	s0,40(sp)
204028ee:	6145                	addi	sp,sp,48
204028f0:	8082                	ret

204028f2 <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:407

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
204028f2:	1101                	addi	sp,sp,-32
204028f4:	ce22                	sw	s0,28(sp)
204028f6:	1000                	addi	s0,sp,32
204028f8:	fea42623          	sw	a0,-20(s0)
204028fc:	feb42423          	sw	a1,-24(s0)
20402900:	fec42223          	sw	a2,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:409
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
20402904:	4781                	li	a5,0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:410
}
20402906:	853e                	mv	a0,a5
20402908:	4472                	lw	s0,28(sp)
2040290a:	6105                	addi	sp,sp,32
2040290c:	8082                	ret

2040290e <__metal_driver_cpu_timer_get>:
__metal_driver_cpu_timer_get():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:417
extern inline int __metal_controller_interrupt_is_selective_vectored(void);

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_timer_get(struct metal_cpu *cpu)
{
2040290e:	7139                	addi	sp,sp,-64
20402910:	de22                	sw	s0,60(sp)
20402912:	0080                	addi	s0,sp,64
20402914:	fca42623          	sw	a0,-52(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:418
    unsigned long long val = 0;
20402918:	4301                	li	t1,0
2040291a:	4381                	li	t2,0
2040291c:	fe642423          	sw	t1,-24(s0)
20402920:	fe742623          	sw	t2,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:423

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    asm volatile ("csrr %0, mcycleh" : "=r"(hi));
20402924:	b8002573          	csrr	a0,mcycleh
20402928:	fea42223          	sw	a0,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:424
    asm volatile ("csrr %0, mcycle" : "=r"(lo));
2040292c:	b0002573          	csrr	a0,mcycle
20402930:	fea42023          	sw	a0,-32(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:425
    asm volatile ("csrr %0, mcycleh" : "=r"(hi1));
20402934:	b8002573          	csrr	a0,mcycleh
20402938:	fca42e23          	sw	a0,-36(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:426
    if (hi == hi1) {
2040293c:	fe442883          	lw	a7,-28(s0)
20402940:	fdc42503          	lw	a0,-36(s0)
20402944:	02a89563          	bne	a7,a0,2040296e <__metal_driver_cpu_timer_get+0x60>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:427
        val = ((unsigned long long)hi << 32) | lo;
20402948:	fe442503          	lw	a0,-28(s0)
2040294c:	85aa                	mv	a1,a0
2040294e:	4601                	li	a2,0
20402950:	00059813          	slli	a6,a1,0x0
20402954:	4781                	li	a5,0
20402956:	fe042603          	lw	a2,-32(s0)
2040295a:	86b2                	mv	a3,a2
2040295c:	4701                	li	a4,0
2040295e:	00d7e633          	or	a2,a5,a3
20402962:	fec42423          	sw	a2,-24(s0)
20402966:	00e867b3          	or	a5,a6,a4
2040296a:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:433
    }
#else
    asm volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
2040296e:	fe842783          	lw	a5,-24(s0)
20402972:	fec42803          	lw	a6,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:434
}
20402976:	853e                	mv	a0,a5
20402978:	85c2                	mv	a1,a6
2040297a:	5472                	lw	s0,60(sp)
2040297c:	6121                	addi	sp,sp,64
2040297e:	8082                	ret

20402980 <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:437

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
20402980:	7179                	addi	sp,sp,-48
20402982:	d622                	sw	s0,44(sp)
20402984:	1800                	addi	s0,sp,48
20402986:	fca42e23          	sw	a0,-36(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:438
    struct __metal_driver_cpu *_cpu = (void *)(cpu);
2040298a:	fdc42703          	lw	a4,-36(s0)
2040298e:	fee42623          	sw	a4,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:439
    if (!_cpu) {
20402992:	fec42703          	lw	a4,-20(s0)
20402996:	e701                	bnez	a4,2040299e <__metal_driver_cpu_timebase_get+0x1e>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:440
        return 0;
20402998:	4781                	li	a5,0
2040299a:	4801                	li	a6,0
2040299c:	a039                	j	204029aa <__metal_driver_cpu_timebase_get+0x2a>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:443
    }

    return _cpu->timebase;
2040299e:	fec42703          	lw	a4,-20(s0)
204029a2:	4718                	lw	a4,8(a4)
204029a4:	87ba                	mv	a5,a4
204029a6:	877d                	srai	a4,a4,0x1f
204029a8:	883a                	mv	a6,a4
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:444
}
204029aa:	853e                	mv	a0,a5
204029ac:	85c2                	mv	a1,a6
204029ae:	5432                	lw	s0,44(sp)
204029b0:	6145                	addi	sp,sp,48
204029b2:	8082                	ret

204029b4 <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:447

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
204029b4:	7139                	addi	sp,sp,-64
204029b6:	de06                	sw	ra,60(sp)
204029b8:	dc22                	sw	s0,56(sp)
204029ba:	0080                	addi	s0,sp,64
204029bc:	fca42623          	sw	a0,-52(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:448
    unsigned long long time = 0;
204029c0:	4781                	li	a5,0
204029c2:	4801                	li	a6,0
204029c4:	fcf42c23          	sw	a5,-40(s0)
204029c8:	fd042e23          	sw	a6,-36(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:451
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *_cpu = (void *)cpu;
204029cc:	fcc42783          	lw	a5,-52(s0)
204029d0:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:453

    if (_cpu->interrupt_controller) {
204029d4:	fec42783          	lw	a5,-20(s0)
204029d8:	47dc                	lw	a5,12(a5)
204029da:	cb95                	beqz	a5,20402a0e <__metal_driver_cpu_mtime_get+0x5a>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:454
        intc = (void *)_cpu->interrupt_controller;
204029dc:	fec42783          	lw	a5,-20(s0)
204029e0:	47dc                	lw	a5,12(a5)
204029e2:	fef42423          	sw	a5,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:455
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
204029e6:	fe842783          	lw	a5,-24(s0)
204029ea:	1447a783          	lw	a5,324(a5)
204029ee:	fef42223          	sw	a5,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:456
        if (tmr_intc) {
204029f2:	fe442783          	lw	a5,-28(s0)
204029f6:	cf81                	beqz	a5,20402a0e <__metal_driver_cpu_mtime_get+0x5a>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:457
            tmr_intc->vtable->command_request(tmr_intc,
204029f8:	fe442783          	lw	a5,-28(s0)
204029fc:	439c                	lw	a5,0(a5)
204029fe:	4f98                	lw	a4,24(a5)
20402a00:	fd840793          	addi	a5,s0,-40
20402a04:	863e                	mv	a2,a5
20402a06:	4585                	li	a1,1
20402a08:	fe442503          	lw	a0,-28(s0)
20402a0c:	9702                	jalr	a4
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:461
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
20402a0e:	fd842783          	lw	a5,-40(s0)
20402a12:	fdc42803          	lw	a6,-36(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:462
}
20402a16:	853e                	mv	a0,a5
20402a18:	85c2                	mv	a1,a6
20402a1a:	50f2                	lw	ra,60(sp)
20402a1c:	5462                	lw	s0,56(sp)
20402a1e:	6121                	addi	sp,sp,64
20402a20:	8082                	ret

20402a22 <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:465

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
20402a22:	7179                	addi	sp,sp,-48
20402a24:	d606                	sw	ra,44(sp)
20402a26:	d422                	sw	s0,40(sp)
20402a28:	1800                	addi	s0,sp,48
20402a2a:	fca42e23          	sw	a0,-36(s0)
20402a2e:	fcb42823          	sw	a1,-48(s0)
20402a32:	fcc42a23          	sw	a2,-44(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:466
    int rc = -1;
20402a36:	57fd                	li	a5,-1
20402a38:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:469
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *_cpu = (void *)cpu;
20402a3c:	fdc42783          	lw	a5,-36(s0)
20402a40:	fef42423          	sw	a5,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:471

    if (_cpu->interrupt_controller) {
20402a44:	fe842783          	lw	a5,-24(s0)
20402a48:	47dc                	lw	a5,12(a5)
20402a4a:	cf85                	beqz	a5,20402a82 <__metal_driver_cpu_mtimecmp_set+0x60>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:472
        intc = (void *)_cpu->interrupt_controller;
20402a4c:	fe842783          	lw	a5,-24(s0)
20402a50:	47dc                	lw	a5,12(a5)
20402a52:	fef42223          	sw	a5,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:473
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20402a56:	fe442783          	lw	a5,-28(s0)
20402a5a:	1447a783          	lw	a5,324(a5)
20402a5e:	fef42023          	sw	a5,-32(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:474
        if (tmr_intc) {
20402a62:	fe042783          	lw	a5,-32(s0)
20402a66:	cf91                	beqz	a5,20402a82 <__metal_driver_cpu_mtimecmp_set+0x60>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:475
            rc = tmr_intc->vtable->command_request(tmr_intc,
20402a68:	fe042783          	lw	a5,-32(s0)
20402a6c:	439c                	lw	a5,0(a5)
20402a6e:	4f98                	lw	a4,24(a5)
20402a70:	fd040793          	addi	a5,s0,-48
20402a74:	863e                	mv	a2,a5
20402a76:	4589                	li	a1,2
20402a78:	fe042503          	lw	a0,-32(s0)
20402a7c:	9702                	jalr	a4
20402a7e:	fea42623          	sw	a0,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:479
                                                   METAL_TIMER_MTIME_SET, &time);
        }
    }
    return rc;
20402a82:	fec42783          	lw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:480
}
20402a86:	853e                	mv	a0,a5
20402a88:	50b2                	lw	ra,44(sp)
20402a8a:	5422                	lw	s0,40(sp)
20402a8c:	6145                	addi	sp,sp,48
20402a8e:	8082                	ret

20402a90 <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:484

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
20402a90:	1101                	addi	sp,sp,-32
20402a92:	ce22                	sw	s0,28(sp)
20402a94:	1000                	addi	s0,sp,32
20402a96:	fea42623          	sw	a0,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:486
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20402a9a:	800017b7          	lui	a5,0x80001
20402a9e:	86878793          	addi	a5,a5,-1944 # 80000868 <metal_segment_heap_target_end+0xffffc868>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:495
#else
#warning "There is no interrupt controller for Timer interrupt"
    return NULL;
#endif
#endif
}
20402aa2:	853e                	mv	a0,a5
20402aa4:	4472                	lw	s0,28(sp)
20402aa6:	6105                	addi	sp,sp,32
20402aa8:	8082                	ret

20402aaa <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:498

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
20402aaa:	1101                	addi	sp,sp,-32
20402aac:	ce22                	sw	s0,28(sp)
20402aae:	1000                	addi	s0,sp,32
20402ab0:	fea42623          	sw	a0,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:499
    return METAL_INTERRUPT_ID_TMR;
20402ab4:	479d                	li	a5,7
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:500
}
20402ab6:	853e                	mv	a0,a5
20402ab8:	4472                	lw	s0,28(sp)
20402aba:	6105                	addi	sp,sp,32
20402abc:	8082                	ret

20402abe <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:504

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
20402abe:	1101                	addi	sp,sp,-32
20402ac0:	ce22                	sw	s0,28(sp)
20402ac2:	1000                	addi	s0,sp,32
20402ac4:	fea42623          	sw	a0,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:506
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20402ac8:	800017b7          	lui	a5,0x80001
20402acc:	86878793          	addi	a5,a5,-1944 # 80000868 <metal_segment_heap_target_end+0xffffc868>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:515
#else
#warning "There is no interrupt controller for Software interrupt"
    return NULL;
#endif
#endif
}
20402ad0:	853e                	mv	a0,a5
20402ad2:	4472                	lw	s0,28(sp)
20402ad4:	6105                	addi	sp,sp,32
20402ad6:	8082                	ret

20402ad8 <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:518

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
20402ad8:	1101                	addi	sp,sp,-32
20402ada:	ce22                	sw	s0,28(sp)
20402adc:	1000                	addi	s0,sp,32
20402ade:	fea42623          	sw	a0,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:519
    return METAL_INTERRUPT_ID_SW;
20402ae2:	478d                	li	a5,3
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:520
}
20402ae4:	853e                	mv	a0,a5
20402ae6:	4472                	lw	s0,28(sp)
20402ae8:	6105                	addi	sp,sp,32
20402aea:	8082                	ret

20402aec <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:523

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20402aec:	7179                	addi	sp,sp,-48
20402aee:	d606                	sw	ra,44(sp)
20402af0:	d422                	sw	s0,40(sp)
20402af2:	1800                	addi	s0,sp,48
20402af4:	fca42e23          	sw	a0,-36(s0)
20402af8:	fcb42c23          	sw	a1,-40(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:524
    int rc = -1;
20402afc:	57fd                	li	a5,-1
20402afe:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:527
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *_cpu = (void *)cpu;
20402b02:	fdc42783          	lw	a5,-36(s0)
20402b06:	fef42423          	sw	a5,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:529

    if (_cpu->interrupt_controller) {
20402b0a:	fe842783          	lw	a5,-24(s0)
20402b0e:	47dc                	lw	a5,12(a5)
20402b10:	cf85                	beqz	a5,20402b48 <__metal_driver_cpu_set_sw_ipi+0x5c>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:530
        intc = (void *)_cpu->interrupt_controller;
20402b12:	fe842783          	lw	a5,-24(s0)
20402b16:	47dc                	lw	a5,12(a5)
20402b18:	fef42223          	sw	a5,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:531
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20402b1c:	fe442783          	lw	a5,-28(s0)
20402b20:	0e47a783          	lw	a5,228(a5)
20402b24:	fef42023          	sw	a5,-32(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:532
        if (sw_intc) {
20402b28:	fe042783          	lw	a5,-32(s0)
20402b2c:	cf91                	beqz	a5,20402b48 <__metal_driver_cpu_set_sw_ipi+0x5c>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:533
            rc = sw_intc->vtable->command_request(sw_intc,
20402b2e:	fe042783          	lw	a5,-32(s0)
20402b32:	439c                	lw	a5,0(a5)
20402b34:	4f98                	lw	a4,24(a5)
20402b36:	fd840793          	addi	a5,s0,-40
20402b3a:	863e                	mv	a2,a5
20402b3c:	4591                	li	a1,4
20402b3e:	fe042503          	lw	a0,-32(s0)
20402b42:	9702                	jalr	a4
20402b44:	fea42623          	sw	a0,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:537
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
20402b48:	fec42783          	lw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:538
}
20402b4c:	853e                	mv	a0,a5
20402b4e:	50b2                	lw	ra,44(sp)
20402b50:	5422                	lw	s0,40(sp)
20402b52:	6145                	addi	sp,sp,48
20402b54:	8082                	ret

20402b56 <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:541

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20402b56:	7179                	addi	sp,sp,-48
20402b58:	d606                	sw	ra,44(sp)
20402b5a:	d422                	sw	s0,40(sp)
20402b5c:	1800                	addi	s0,sp,48
20402b5e:	fca42e23          	sw	a0,-36(s0)
20402b62:	fcb42c23          	sw	a1,-40(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:542
    int rc = -1;
20402b66:	57fd                	li	a5,-1
20402b68:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:545
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *_cpu = (void *)cpu;
20402b6c:	fdc42783          	lw	a5,-36(s0)
20402b70:	fef42423          	sw	a5,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:547

    if (_cpu->interrupt_controller) {
20402b74:	fe842783          	lw	a5,-24(s0)
20402b78:	47dc                	lw	a5,12(a5)
20402b7a:	cf85                	beqz	a5,20402bb2 <__metal_driver_cpu_clear_sw_ipi+0x5c>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:548
        intc = (void *)_cpu->interrupt_controller;
20402b7c:	fe842783          	lw	a5,-24(s0)
20402b80:	47dc                	lw	a5,12(a5)
20402b82:	fef42223          	sw	a5,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:549
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20402b86:	fe442783          	lw	a5,-28(s0)
20402b8a:	0e47a783          	lw	a5,228(a5)
20402b8e:	fef42023          	sw	a5,-32(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:550
        if (sw_intc) {
20402b92:	fe042783          	lw	a5,-32(s0)
20402b96:	cf91                	beqz	a5,20402bb2 <__metal_driver_cpu_clear_sw_ipi+0x5c>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:551
            rc = sw_intc->vtable->command_request(sw_intc,
20402b98:	fe042783          	lw	a5,-32(s0)
20402b9c:	439c                	lw	a5,0(a5)
20402b9e:	4f98                	lw	a4,24(a5)
20402ba0:	fd840793          	addi	a5,s0,-40
20402ba4:	863e                	mv	a2,a5
20402ba6:	458d                	li	a1,3
20402ba8:	fe042503          	lw	a0,-32(s0)
20402bac:	9702                	jalr	a4
20402bae:	fea42623          	sw	a0,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:555
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
20402bb2:	fec42783          	lw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:556
}
20402bb6:	853e                	mv	a0,a5
20402bb8:	50b2                	lw	ra,44(sp)
20402bba:	5422                	lw	s0,40(sp)
20402bbc:	6145                	addi	sp,sp,48
20402bbe:	8082                	ret

20402bc0 <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:559

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
20402bc0:	7179                	addi	sp,sp,-48
20402bc2:	d606                	sw	ra,44(sp)
20402bc4:	d422                	sw	s0,40(sp)
20402bc6:	1800                	addi	s0,sp,48
20402bc8:	fca42e23          	sw	a0,-36(s0)
20402bcc:	fcb42c23          	sw	a1,-40(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:560
    int rc = 0;
20402bd0:	fe042623          	sw	zero,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:563
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *_cpu = (void *)cpu;
20402bd4:	fdc42783          	lw	a5,-36(s0)
20402bd8:	fef42423          	sw	a5,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:565

    if (_cpu->interrupt_controller) {
20402bdc:	fe842783          	lw	a5,-24(s0)
20402be0:	47dc                	lw	a5,12(a5)
20402be2:	cf85                	beqz	a5,20402c1a <__metal_driver_cpu_get_msip+0x5a>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:566
        intc = (void *)_cpu->interrupt_controller;
20402be4:	fe842783          	lw	a5,-24(s0)
20402be8:	47dc                	lw	a5,12(a5)
20402bea:	fef42223          	sw	a5,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:567
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20402bee:	fe442783          	lw	a5,-28(s0)
20402bf2:	0e47a783          	lw	a5,228(a5)
20402bf6:	fef42023          	sw	a5,-32(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:568
        if (sw_intc) {
20402bfa:	fe042783          	lw	a5,-32(s0)
20402bfe:	cf91                	beqz	a5,20402c1a <__metal_driver_cpu_get_msip+0x5a>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:569
            rc = sw_intc->vtable->command_request(sw_intc,
20402c00:	fe042783          	lw	a5,-32(s0)
20402c04:	439c                	lw	a5,0(a5)
20402c06:	4f98                	lw	a4,24(a5)
20402c08:	fd840793          	addi	a5,s0,-40
20402c0c:	863e                	mv	a2,a5
20402c0e:	4595                	li	a1,5
20402c10:	fe042503          	lw	a0,-32(s0)
20402c14:	9702                	jalr	a4
20402c16:	fea42623          	sw	a0,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:573
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
20402c1a:	fec42783          	lw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:574
}
20402c1e:	853e                	mv	a0,a5
20402c20:	50b2                	lw	ra,44(sp)
20402c22:	5422                	lw	s0,40(sp)
20402c24:	6145                	addi	sp,sp,48
20402c26:	8082                	ret

20402c28 <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:578

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
20402c28:	7179                	addi	sp,sp,-48
20402c2a:	d622                	sw	s0,44(sp)
20402c2c:	1800                	addi	s0,sp,48
20402c2e:	fca42e23          	sw	a0,-36(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:579
    struct __metal_driver_cpu *cpu0 = (void *)cpu;
20402c32:	fdc42783          	lw	a5,-36(s0)
20402c36:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:580
    return (struct metal_interrupt *)cpu0->interrupt_controller;
20402c3a:	fec42783          	lw	a5,-20(s0)
20402c3e:	47dc                	lw	a5,12(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:581
}
20402c40:	853e                	mv	a0,a5
20402c42:	5432                	lw	s0,44(sp)
20402c44:	6145                	addi	sp,sp,48
20402c46:	8082                	ret

20402c48 <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:607
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
20402c48:	7179                	addi	sp,sp,-48
20402c4a:	d606                	sw	ra,44(sp)
20402c4c:	d422                	sw	s0,40(sp)
20402c4e:	1800                	addi	s0,sp,48
20402c50:	fca42e23          	sw	a0,-36(s0)
20402c54:	fcb42c23          	sw	a1,-40(s0)
20402c58:	fcc42a23          	sw	a2,-44(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:608
    struct __metal_driver_cpu *cpu0 = (void *)cpu;
20402c5c:	fdc42783          	lw	a5,-36(s0)
20402c60:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:609
    if (cpu0->interrupt_controller) {
20402c64:	fec42783          	lw	a5,-20(s0)
20402c68:	47dc                	lw	a5,12(a5)
20402c6a:	cf89                	beqz	a5,20402c84 <__metal_driver_cpu_exception_register+0x3c>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:610
	return __metal_exception_register(cpu0->interrupt_controller, ecode, isr);
20402c6c:	fec42783          	lw	a5,-20(s0)
20402c70:	47dc                	lw	a5,12(a5)
20402c72:	fd442603          	lw	a2,-44(s0)
20402c76:	fd842583          	lw	a1,-40(s0)
20402c7a:	853e                	mv	a0,a5
20402c7c:	8fdff0ef          	jal	ra,20402578 <__metal_exception_register>
20402c80:	87aa                	mv	a5,a0
20402c82:	a011                	j	20402c86 <__metal_driver_cpu_exception_register+0x3e>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:612
    }
    return -1;
20402c84:	57fd                	li	a5,-1
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:613
}
20402c86:	853e                	mv	a0,a5
20402c88:	50b2                	lw	ra,44(sp)
20402c8a:	5422                	lw	s0,40(sp)
20402c8c:	6145                	addi	sp,sp,48
20402c8e:	8082                	ret

20402c90 <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:616

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
20402c90:	1101                	addi	sp,sp,-32
20402c92:	ce22                	sw	s0,28(sp)
20402c94:	1000                	addi	s0,sp,32
20402c96:	fea42623          	sw	a0,-20(s0)
20402c9a:	feb42423          	sw	a1,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:618
    /* Per ISA compressed instruction has last two bits of opcode set */
    return (*(unsigned short*)epc & 3) ? 4 : 2;
20402c9e:	fe842783          	lw	a5,-24(s0)
20402ca2:	0007d783          	lhu	a5,0(a5)
20402ca6:	8b8d                	andi	a5,a5,3
20402ca8:	c399                	beqz	a5,20402cae <__metal_driver_cpu_get_instruction_length+0x1e>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:618 (discriminator 1)
20402caa:	4791                	li	a5,4
20402cac:	a011                	j	20402cb0 <__metal_driver_cpu_get_instruction_length+0x20>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:618 (discriminator 2)
20402cae:	4789                	li	a5,2
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:619 (discriminator 5)
}
20402cb0:	853e                	mv	a0,a5
20402cb2:	4472                	lw	s0,28(sp)
20402cb4:	6105                	addi	sp,sp,32
20402cb6:	8082                	ret

20402cb8 <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:622

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
20402cb8:	7179                	addi	sp,sp,-48
20402cba:	d622                	sw	s0,44(sp)
20402cbc:	1800                	addi	s0,sp,48
20402cbe:	fca42e23          	sw	a0,-36(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:624
    uintptr_t mepc;
    asm volatile ("csrr %0, mepc" : "=r"(mepc));
20402cc2:	341027f3          	csrr	a5,mepc
20402cc6:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:625
    return mepc;
20402cca:	fec42783          	lw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:626
}
20402cce:	853e                	mv	a0,a5
20402cd0:	5432                	lw	s0,44(sp)
20402cd2:	6145                	addi	sp,sp,48
20402cd4:	8082                	ret

20402cd6 <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:629

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
20402cd6:	1101                	addi	sp,sp,-32
20402cd8:	ce22                	sw	s0,28(sp)
20402cda:	1000                	addi	s0,sp,32
20402cdc:	fea42623          	sw	a0,-20(s0)
20402ce0:	feb42423          	sw	a1,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:630
    asm volatile ("csrw mepc, %0" :: "r"(mepc));
20402ce4:	fe842783          	lw	a5,-24(s0)
20402ce8:	34179073          	csrw	mepc,a5
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:631
    return 0;
20402cec:	4781                	li	a5,0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:632
}
20402cee:	853e                	mv	a0,a5
20402cf0:	4472                	lw	s0,28(sp)
20402cf2:	6105                	addi	sp,sp,32
20402cf4:	8082                	ret

20402cf6 <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:10
#include <metal/shutdown.h>
#include <metal/drivers/riscv,plic0.h>


unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
20402cf6:	1101                	addi	sp,sp,-32
20402cf8:	ce22                	sw	s0,28(sp)
20402cfa:	1000                	addi	s0,sp,32
20402cfc:	fea42623          	sw	a0,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:11
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(plic->control_base +
20402d00:	fec42783          	lw	a5,-20(s0)
20402d04:	4798                	lw	a4,8(a5)
20402d06:	002007b7          	lui	a5,0x200
20402d0a:	0791                	addi	a5,a5,4
20402d0c:	97ba                	add	a5,a5,a4
20402d0e:	439c                	lw	a5,0(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:13
					      METAL_PLIC_CLAIM_OFFSET));
}
20402d10:	853e                	mv	a0,a5
20402d12:	4472                	lw	s0,28(sp)
20402d14:	6105                	addi	sp,sp,32
20402d16:	8082                	ret

20402d18 <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:17

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
20402d18:	1101                	addi	sp,sp,-32
20402d1a:	ce22                	sw	s0,28(sp)
20402d1c:	1000                	addi	s0,sp,32
20402d1e:	fea42623          	sw	a0,-20(s0)
20402d22:	feb42423          	sw	a1,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:18
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(plic->control_base +
20402d26:	fec42783          	lw	a5,-20(s0)
20402d2a:	4798                	lw	a4,8(a5)
20402d2c:	002007b7          	lui	a5,0x200
20402d30:	0791                	addi	a5,a5,4
20402d32:	97ba                	add	a5,a5,a4
20402d34:	873e                	mv	a4,a5
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:19
				       METAL_PLIC_CLAIM_OFFSET)) = id;
20402d36:	fe842783          	lw	a5,-24(s0)
20402d3a:	c31c                	sw	a5,0(a4)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:20
}
20402d3c:	0001                	nop
20402d3e:	4472                	lw	s0,28(sp)
20402d40:	6105                	addi	sp,sp,32
20402d42:	8082                	ret

20402d44 <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:24

void __metal_plic0_set_threshold(struct __metal_driver_riscv_plic0 *plic,
			       unsigned int threshold)
{
20402d44:	1101                	addi	sp,sp,-32
20402d46:	ce22                	sw	s0,28(sp)
20402d48:	1000                	addi	s0,sp,32
20402d4a:	fea42623          	sw	a0,-20(s0)
20402d4e:	feb42423          	sw	a1,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:25
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(plic->control_base +
20402d52:	fec42783          	lw	a5,-20(s0)
20402d56:	4798                	lw	a4,8(a5)
20402d58:	002007b7          	lui	a5,0x200
20402d5c:	97ba                	add	a5,a5,a4
20402d5e:	873e                	mv	a4,a5
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:26
				       METAL_PLIC_THRESHOLD_OFFSET)) = threshold;
20402d60:	fe842783          	lw	a5,-24(s0)
20402d64:	c31c                	sw	a5,0(a4)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:27
}
20402d66:	0001                	nop
20402d68:	4472                	lw	s0,28(sp)
20402d6a:	6105                	addi	sp,sp,32
20402d6c:	8082                	ret

20402d6e <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:31

void __metal_plic0_set_priority(struct __metal_driver_riscv_plic0 *plic,
			      int id, unsigned int priority)
{
20402d6e:	1101                	addi	sp,sp,-32
20402d70:	ce22                	sw	s0,28(sp)
20402d72:	1000                	addi	s0,sp,32
20402d74:	fea42623          	sw	a0,-20(s0)
20402d78:	feb42423          	sw	a1,-24(s0)
20402d7c:	fec42223          	sw	a2,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:32
    if ( (plic->max_priority) &&
20402d80:	fec42783          	lw	a5,-20(s0)
20402d84:	4f9c                	lw	a5,24(a5)
20402d86:	c785                	beqz	a5,20402dae <__metal_plic0_set_priority+0x40>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:33 (discriminator 1)
	 (priority < plic->max_priority) ) {
20402d88:	fec42783          	lw	a5,-20(s0)
20402d8c:	4f9c                	lw	a5,24(a5)
20402d8e:	873e                	mv	a4,a5
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:32 (discriminator 1)
    if ( (plic->max_priority) &&
20402d90:	fe442783          	lw	a5,-28(s0)
20402d94:	00e7fd63          	bgeu	a5,a4,20402dae <__metal_plic0_set_priority+0x40>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:34
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(plic->control_base +
20402d98:	fec42783          	lw	a5,-20(s0)
20402d9c:	479c                	lw	a5,8(a5)
20402d9e:	fe842703          	lw	a4,-24(s0)
20402da2:	070a                	slli	a4,a4,0x2
20402da4:	97ba                	add	a5,a5,a4
20402da6:	873e                	mv	a4,a5
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:36
					   METAL_PLIC_PRIORITY_OFFSET +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
20402da8:	fe442783          	lw	a5,-28(s0)
20402dac:	c31c                	sw	a5,0(a4)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:38
    }
}
20402dae:	0001                	nop
20402db0:	4472                	lw	s0,28(sp)
20402db2:	6105                	addi	sp,sp,32
20402db4:	8082                	ret

20402db6 <__metal_plic0_enable>:
__metal_plic0_enable():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:41

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
20402db6:	7179                	addi	sp,sp,-48
20402db8:	d606                	sw	ra,44(sp)
20402dba:	d422                	sw	s0,40(sp)
20402dbc:	1800                	addi	s0,sp,48
20402dbe:	fca42e23          	sw	a0,-36(s0)
20402dc2:	fcb42c23          	sw	a1,-40(s0)
20402dc6:	fcc42a23          	sw	a2,-44(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:43
    unsigned int current;
    unsigned long hartid = __metal_myhart_id();
20402dca:	a18ff0ef          	jal	ra,20401fe2 <__metal_myhart_id>
20402dce:	fea42623          	sw	a0,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:45

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(plic->control_base +
20402dd2:	fdc42783          	lw	a5,-36(s0)
20402dd6:	479c                	lw	a5,8(a5)
20402dd8:	fd842703          	lw	a4,-40(s0)
20402ddc:	8715                	srai	a4,a4,0x5
20402dde:	070a                	slli	a4,a4,0x2
20402de0:	973e                	add	a4,a4,a5
20402de2:	6789                	lui	a5,0x2
20402de4:	97ba                	add	a5,a5,a4
20402de6:	439c                	lw	a5,0(a5)
20402de8:	fef42423          	sw	a5,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:52
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(plic->control_base +
					METAL_PLIC_ENABLE_OFFSET +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20402dec:	fd442783          	lw	a5,-44(s0)
20402df0:	cf81                	beqz	a5,20402e08 <__metal_plic0_enable+0x52>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:51 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
20402df2:	fd842783          	lw	a5,-40(s0)
20402df6:	8bfd                	andi	a5,a5,31
20402df8:	4705                	li	a4,1
20402dfa:	00f717b3          	sll	a5,a4,a5
20402dfe:	873e                	mv	a4,a5
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:52 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20402e00:	fe842783          	lw	a5,-24(s0)
20402e04:	8fd9                	or	a5,a5,a4
20402e06:	a829                	j	20402e20 <__metal_plic0_enable+0x6a>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:52 (discriminator 2)
20402e08:	fd842783          	lw	a5,-40(s0)
20402e0c:	8bfd                	andi	a5,a5,31
20402e0e:	4705                	li	a4,1
20402e10:	00f717b3          	sll	a5,a4,a5
20402e14:	fff7c793          	not	a5,a5
20402e18:	873e                	mv	a4,a5
20402e1a:	fe842783          	lw	a5,-24(s0)
20402e1e:	8ff9                	and	a5,a5,a4
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:48
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(plic->control_base +
20402e20:	fdc42703          	lw	a4,-36(s0)
20402e24:	4718                	lw	a4,8(a4)
20402e26:	fd842683          	lw	a3,-40(s0)
20402e2a:	8695                	srai	a3,a3,0x5
20402e2c:	068a                	slli	a3,a3,0x2
20402e2e:	96ba                	add	a3,a3,a4
20402e30:	6709                	lui	a4,0x2
20402e32:	9736                	add	a4,a4,a3
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:50
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
20402e34:	c31c                	sw	a5,0(a4)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:53
}
20402e36:	0001                	nop
20402e38:	50b2                	lw	ra,44(sp)
20402e3a:	5422                	lw	s0,40(sp)
20402e3c:	6145                	addi	sp,sp,48
20402e3e:	8082                	ret

20402e40 <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:55

void __metal_plic0_default_handler (int id, void *priv) {
20402e40:	1101                	addi	sp,sp,-32
20402e42:	ce06                	sw	ra,28(sp)
20402e44:	cc22                	sw	s0,24(sp)
20402e46:	1000                	addi	s0,sp,32
20402e48:	fea42623          	sw	a0,-20(s0)
20402e4c:	feb42423          	sw	a1,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:56
    metal_shutdown(300);
20402e50:	12c00513          	li	a0,300
20402e54:	48a010ef          	jal	ra,204042de <metal_shutdown>

20402e58 <__metal_plic0_handler>:
__metal_plic0_handler():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:60
}

void __metal_plic0_handler (int id, void *priv)
{
20402e58:	7179                	addi	sp,sp,-48
20402e5a:	d606                	sw	ra,44(sp)
20402e5c:	d422                	sw	s0,40(sp)
20402e5e:	1800                	addi	s0,sp,48
20402e60:	fca42e23          	sw	a0,-36(s0)
20402e64:	fcb42c23          	sw	a1,-40(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:61
    struct __metal_driver_riscv_plic0 *plic = priv;
20402e68:	fd842783          	lw	a5,-40(s0)
20402e6c:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:62
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
20402e70:	fec42503          	lw	a0,-20(s0)
20402e74:	3549                	jal	20402cf6 <__metal_plic0_claim_interrupt>
20402e76:	fea42423          	sw	a0,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:64

    if ( (idx < plic->num_interrupts) &&
20402e7a:	fec42783          	lw	a5,-20(s0)
20402e7e:	4fdc                	lw	a5,28(a5)
20402e80:	873e                	mv	a4,a5
20402e82:	fe842783          	lw	a5,-24(s0)
20402e86:	04e7f463          	bgeu	a5,a4,20402ece <__metal_plic0_handler+0x76>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:65 (discriminator 1)
	 (plic->metal_exint_table[idx]) ) {
20402e8a:	fec42703          	lw	a4,-20(s0)
20402e8e:	fe842783          	lw	a5,-24(s0)
20402e92:	07a1                	addi	a5,a5,8
20402e94:	078a                	slli	a5,a5,0x2
20402e96:	97ba                	add	a5,a5,a4
20402e98:	479c                	lw	a5,8(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:64 (discriminator 1)
    if ( (idx < plic->num_interrupts) &&
20402e9a:	cb95                	beqz	a5,20402ece <__metal_plic0_handler+0x76>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:66
	plic->metal_exint_table[idx](idx,
20402e9c:	fec42703          	lw	a4,-20(s0)
20402ea0:	fe842783          	lw	a5,-24(s0)
20402ea4:	07a1                	addi	a5,a5,8
20402ea6:	078a                	slli	a5,a5,0x2
20402ea8:	97ba                	add	a5,a5,a4
20402eaa:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1c08>
20402eae:	fe842603          	lw	a2,-24(s0)
20402eb2:	fec42683          	lw	a3,-20(s0)
20402eb6:	fe842703          	lw	a4,-24(s0)
20402eba:	87ba                	mv	a5,a4
20402ebc:	0786                	slli	a5,a5,0x1
20402ebe:	97ba                	add	a5,a5,a4
20402ec0:	078e                	slli	a5,a5,0x3
20402ec2:	97b6                	add	a5,a5,a3
20402ec4:	0a87a783          	lw	a5,168(a5)
20402ec8:	85be                	mv	a1,a5
20402eca:	8532                	mv	a0,a2
20402ecc:	9802                	jalr	a6
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:70
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
20402ece:	fe842583          	lw	a1,-24(s0)
20402ed2:	fec42503          	lw	a0,-20(s0)
20402ed6:	3589                	jal	20402d18 <__metal_plic0_complete_interrupt>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:71
}
20402ed8:	0001                	nop
20402eda:	50b2                	lw	ra,44(sp)
20402edc:	5422                	lw	s0,40(sp)
20402ede:	6145                	addi	sp,sp,48
20402ee0:	8082                	ret

20402ee2 <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:74

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
20402ee2:	7179                	addi	sp,sp,-48
20402ee4:	d606                	sw	ra,44(sp)
20402ee6:	d422                	sw	s0,40(sp)
20402ee8:	1800                	addi	s0,sp,48
20402eea:	fca42e23          	sw	a0,-36(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:75
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20402eee:	fdc42783          	lw	a5,-36(s0)
20402ef2:	fef42423          	sw	a5,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:77

    if ( !plic->init_done ) {
20402ef6:	fe842783          	lw	a5,-24(s0)
20402efa:	539c                	lw	a5,32(a5)
20402efc:	0e079b63          	bnez	a5,20402ff2 <__metal_driver_riscv_plic0_init+0x110>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:80
        struct metal_interrupt *intc;

        intc = plic->interrupt_parent;
20402f00:	fe842783          	lw	a5,-24(s0)
20402f04:	4b9c                	lw	a5,16(a5)
20402f06:	fef42223          	sw	a5,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:83

	/* Initialize ist parent controller, aka cpu_intc. */
	intc->vtable->interrupt_init(intc);
20402f0a:	fe442783          	lw	a5,-28(s0)
20402f0e:	439c                	lw	a5,0(a5)
20402f10:	439c                	lw	a5,0(a5)
20402f12:	fe442503          	lw	a0,-28(s0)
20402f16:	9782                	jalr	a5
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:85

	for (int i = 0; i < plic->num_interrupts; i++) {
20402f18:	fe042623          	sw	zero,-20(s0)
20402f1c:	a08d                	j	20402f7e <__metal_driver_riscv_plic0_init+0x9c>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:86 (discriminator 3)
	    __metal_plic0_enable(plic, i, METAL_DISABLE);
20402f1e:	4601                	li	a2,0
20402f20:	fec42583          	lw	a1,-20(s0)
20402f24:	fe842503          	lw	a0,-24(s0)
20402f28:	3579                	jal	20402db6 <__metal_plic0_enable>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:87 (discriminator 3)
	    __metal_plic0_set_priority(plic, i, 0);
20402f2a:	4601                	li	a2,0
20402f2c:	fec42583          	lw	a1,-20(s0)
20402f30:	fe842503          	lw	a0,-24(s0)
20402f34:	3d2d                	jal	20402d6e <__metal_plic0_set_priority>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:88 (discriminator 3)
	    plic->metal_exint_table[i] = NULL;
20402f36:	fe842703          	lw	a4,-24(s0)
20402f3a:	fec42783          	lw	a5,-20(s0)
20402f3e:	07a1                	addi	a5,a5,8
20402f40:	078a                	slli	a5,a5,0x2
20402f42:	97ba                	add	a5,a5,a4
20402f44:	0007a423          	sw	zero,8(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:89 (discriminator 3)
	    plic->metal_exdata_table[i].sub_int = NULL;
20402f48:	fe842683          	lw	a3,-24(s0)
20402f4c:	fec42703          	lw	a4,-20(s0)
20402f50:	87ba                	mv	a5,a4
20402f52:	0786                	slli	a5,a5,0x1
20402f54:	97ba                	add	a5,a5,a4
20402f56:	078e                	slli	a5,a5,0x3
20402f58:	97b6                	add	a5,a5,a3
20402f5a:	0a07a223          	sw	zero,164(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:90 (discriminator 3)
	    plic->metal_exdata_table[i].exint_data = NULL;
20402f5e:	fe842683          	lw	a3,-24(s0)
20402f62:	fec42703          	lw	a4,-20(s0)
20402f66:	87ba                	mv	a5,a4
20402f68:	0786                	slli	a5,a5,0x1
20402f6a:	97ba                	add	a5,a5,a4
20402f6c:	078e                	slli	a5,a5,0x3
20402f6e:	97b6                	add	a5,a5,a3
20402f70:	0a07a423          	sw	zero,168(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:85 (discriminator 3)
	for (int i = 0; i < plic->num_interrupts; i++) {
20402f74:	fec42783          	lw	a5,-20(s0)
20402f78:	0785                	addi	a5,a5,1
20402f7a:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:85 (discriminator 1)
20402f7e:	fe842783          	lw	a5,-24(s0)
20402f82:	4fdc                	lw	a5,28(a5)
20402f84:	fec42703          	lw	a4,-20(s0)
20402f88:	f8f74be3          	blt	a4,a5,20402f1e <__metal_driver_riscv_plic0_init+0x3c>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:93
	}

	__metal_plic0_set_threshold(plic, 0);
20402f8c:	4581                	li	a1,0
20402f8e:	fe842503          	lw	a0,-24(s0)
20402f92:	3b4d                	jal	20402d44 <__metal_plic0_set_threshold>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:96

	/* Register plic (ext) interrupt with with parent controller */
        intc->vtable->interrupt_register(intc,
20402f94:	fe442783          	lw	a5,-28(s0)
20402f98:	439c                	lw	a5,0(a5)
20402f9a:	43d8                	lw	a4,4(a5)
20402f9c:	fe842783          	lw	a5,-24(s0)
20402fa0:	4bdc                	lw	a5,20(a5)
20402fa2:	fe842683          	lw	a3,-24(s0)
20402fa6:	4601                	li	a2,0
20402fa8:	85be                	mv	a1,a5
20402faa:	fe442503          	lw	a0,-28(s0)
20402fae:	9702                	jalr	a4
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:100
                                         plic->interrupt_line,
                                         NULL, plic);
	/* Register plic handler for dispatching its device interrupts */
	intc->vtable->interrupt_register(intc,
20402fb0:	fe442783          	lw	a5,-28(s0)
20402fb4:	439c                	lw	a5,0(a5)
20402fb6:	0047a803          	lw	a6,4(a5)
20402fba:	fe842783          	lw	a5,-24(s0)
20402fbe:	4bd8                	lw	a4,20(a5)
20402fc0:	fe842683          	lw	a3,-24(s0)
20402fc4:	204037b7          	lui	a5,0x20403
20402fc8:	e5878613          	addi	a2,a5,-424 # 20402e58 <__metal_plic0_handler>
20402fcc:	85ba                	mv	a1,a4
20402fce:	fe442503          	lw	a0,-28(s0)
20402fd2:	9802                	jalr	a6
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:104
					 plic->interrupt_line,
					 __metal_plic0_handler, plic);
	/* Enable plic (ext) interrupt with with parent controller */
        intc->vtable->interrupt_enable(intc, plic->interrupt_line);
20402fd4:	fe442783          	lw	a5,-28(s0)
20402fd8:	439c                	lw	a5,0(a5)
20402fda:	4798                	lw	a4,8(a5)
20402fdc:	fe842783          	lw	a5,-24(s0)
20402fe0:	4bdc                	lw	a5,20(a5)
20402fe2:	85be                	mv	a1,a5
20402fe4:	fe442503          	lw	a0,-28(s0)
20402fe8:	9702                	jalr	a4
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:105
        plic->init_done = 1;
20402fea:	fe842783          	lw	a5,-24(s0)
20402fee:	4705                	li	a4,1
20402ff0:	d398                	sw	a4,32(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:107
    }
}
20402ff2:	0001                	nop
20402ff4:	50b2                	lw	ra,44(sp)
20402ff6:	5422                	lw	s0,40(sp)
20402ff8:	6145                	addi	sp,sp,48
20402ffa:	8082                	ret

20402ffc <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:112

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
20402ffc:	7179                	addi	sp,sp,-48
20402ffe:	d606                	sw	ra,44(sp)
20403000:	d422                	sw	s0,40(sp)
20403002:	1800                	addi	s0,sp,48
20403004:	fca42e23          	sw	a0,-36(s0)
20403008:	fcb42c23          	sw	a1,-40(s0)
2040300c:	fcc42a23          	sw	a2,-44(s0)
20403010:	fcd42823          	sw	a3,-48(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:113
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20403014:	fdc42783          	lw	a5,-36(s0)
20403018:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:115

    if (id >= plic->num_interrupts ) {
2040301c:	fec42783          	lw	a5,-20(s0)
20403020:	4fdc                	lw	a5,28(a5)
20403022:	fd842703          	lw	a4,-40(s0)
20403026:	00f74463          	blt	a4,a5,2040302e <__metal_driver_riscv_plic0_register+0x32>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:116
        return -1;
2040302a:	57fd                	li	a5,-1
2040302c:	a051                	j	204030b0 <__metal_driver_riscv_plic0_register+0xb4>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:119
    }
 
    if (isr) {
2040302e:	fd442783          	lw	a5,-44(s0)
20403032:	cf9d                	beqz	a5,20403070 <__metal_driver_riscv_plic0_register+0x74>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:120
        __metal_plic0_set_priority(plic ,id, 2);
20403034:	4609                	li	a2,2
20403036:	fd842583          	lw	a1,-40(s0)
2040303a:	fec42503          	lw	a0,-20(s0)
2040303e:	3b05                	jal	20402d6e <__metal_plic0_set_priority>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:121
	plic->metal_exint_table[id] = isr;
20403040:	fec42703          	lw	a4,-20(s0)
20403044:	fd842783          	lw	a5,-40(s0)
20403048:	07a1                	addi	a5,a5,8
2040304a:	078a                	slli	a5,a5,0x2
2040304c:	97ba                	add	a5,a5,a4
2040304e:	fd442703          	lw	a4,-44(s0)
20403052:	c798                	sw	a4,8(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:122
	plic->metal_exdata_table[id].exint_data = priv;
20403054:	fec42683          	lw	a3,-20(s0)
20403058:	fd842703          	lw	a4,-40(s0)
2040305c:	87ba                	mv	a5,a4
2040305e:	0786                	slli	a5,a5,0x1
20403060:	97ba                	add	a5,a5,a4
20403062:	078e                	slli	a5,a5,0x3
20403064:	97b6                	add	a5,a5,a3
20403066:	fd042703          	lw	a4,-48(s0)
2040306a:	0ae7a423          	sw	a4,168(a5)
2040306e:	a081                	j	204030ae <__metal_driver_riscv_plic0_register+0xb2>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:124
    } else {
        __metal_plic0_set_priority(plic, id, 1);
20403070:	4605                	li	a2,1
20403072:	fd842583          	lw	a1,-40(s0)
20403076:	fec42503          	lw	a0,-20(s0)
2040307a:	39d5                	jal	20402d6e <__metal_plic0_set_priority>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:125
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
2040307c:	fec42703          	lw	a4,-20(s0)
20403080:	fd842783          	lw	a5,-40(s0)
20403084:	07a1                	addi	a5,a5,8
20403086:	078a                	slli	a5,a5,0x2
20403088:	97ba                	add	a5,a5,a4
2040308a:	20403737          	lui	a4,0x20403
2040308e:	e4070713          	addi	a4,a4,-448 # 20402e40 <__metal_plic0_default_handler>
20403092:	c798                	sw	a4,8(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:126
	plic->metal_exdata_table[id].sub_int = priv;
20403094:	fec42683          	lw	a3,-20(s0)
20403098:	fd842703          	lw	a4,-40(s0)
2040309c:	87ba                	mv	a5,a4
2040309e:	0786                	slli	a5,a5,0x1
204030a0:	97ba                	add	a5,a5,a4
204030a2:	078e                	slli	a5,a5,0x3
204030a4:	97b6                	add	a5,a5,a3
204030a6:	fd042703          	lw	a4,-48(s0)
204030aa:	0ae7a223          	sw	a4,164(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:129
    }

    return 0;
204030ae:	4781                	li	a5,0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:130
}
204030b0:	853e                	mv	a0,a5
204030b2:	50b2                	lw	ra,44(sp)
204030b4:	5422                	lw	s0,40(sp)
204030b6:	6145                	addi	sp,sp,48
204030b8:	8082                	ret

204030ba <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:133

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
204030ba:	7179                	addi	sp,sp,-48
204030bc:	d606                	sw	ra,44(sp)
204030be:	d422                	sw	s0,40(sp)
204030c0:	1800                	addi	s0,sp,48
204030c2:	fca42e23          	sw	a0,-36(s0)
204030c6:	fcb42c23          	sw	a1,-40(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:134
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
204030ca:	fdc42783          	lw	a5,-36(s0)
204030ce:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:136

    if ( id >= plic->num_interrupts ) {
204030d2:	fec42783          	lw	a5,-20(s0)
204030d6:	4fdc                	lw	a5,28(a5)
204030d8:	fd842703          	lw	a4,-40(s0)
204030dc:	00f74463          	blt	a4,a5,204030e4 <__metal_driver_riscv_plic0_enable+0x2a>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:137
        return -1;
204030e0:	57fd                	li	a5,-1
204030e2:	a801                	j	204030f2 <__metal_driver_riscv_plic0_enable+0x38>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:140
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
204030e4:	4605                	li	a2,1
204030e6:	fd842583          	lw	a1,-40(s0)
204030ea:	fec42503          	lw	a0,-20(s0)
204030ee:	31e1                	jal	20402db6 <__metal_plic0_enable>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:141
    return 0;
204030f0:	4781                	li	a5,0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:142
}
204030f2:	853e                	mv	a0,a5
204030f4:	50b2                	lw	ra,44(sp)
204030f6:	5422                	lw	s0,40(sp)
204030f8:	6145                	addi	sp,sp,48
204030fa:	8082                	ret

204030fc <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:145

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
204030fc:	7179                	addi	sp,sp,-48
204030fe:	d606                	sw	ra,44(sp)
20403100:	d422                	sw	s0,40(sp)
20403102:	1800                	addi	s0,sp,48
20403104:	fca42e23          	sw	a0,-36(s0)
20403108:	fcb42c23          	sw	a1,-40(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:146
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
2040310c:	fdc42783          	lw	a5,-36(s0)
20403110:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:148

    if ( id >= plic->num_interrupts ) {
20403114:	fec42783          	lw	a5,-20(s0)
20403118:	4fdc                	lw	a5,28(a5)
2040311a:	fd842703          	lw	a4,-40(s0)
2040311e:	00f74463          	blt	a4,a5,20403126 <__metal_driver_riscv_plic0_disable+0x2a>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:149
        return -1;
20403122:	57fd                	li	a5,-1
20403124:	a801                	j	20403134 <__metal_driver_riscv_plic0_disable+0x38>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:151
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
20403126:	4601                	li	a2,0
20403128:	fd842583          	lw	a1,-40(s0)
2040312c:	fec42503          	lw	a0,-20(s0)
20403130:	3159                	jal	20402db6 <__metal_plic0_enable>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:152
    return 0;
20403132:	4781                	li	a5,0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:153
}
20403134:	853e                	mv	a0,a5
20403136:	50b2                	lw	ra,44(sp)
20403138:	5422                	lw	s0,40(sp)
2040313a:	6145                	addi	sp,sp,48
2040313c:	8082                	ret

2040313e <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz>:
__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,hfrosc.c:12
#define CONFIG_TRIM    0x001F0000UL
#define CONFIG_ENABLE  0x40000000UL
#define CONFIG_READY   0x80000000UL

long __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz(const struct metal_clock *clock)
{
2040313e:	7179                	addi	sp,sp,-48
20403140:	d606                	sw	ra,44(sp)
20403142:	d422                	sw	s0,40(sp)
20403144:	1800                	addi	s0,sp,48
20403146:	fca42e23          	sw	a0,-36(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,hfrosc.c:13
    struct __metal_driver_sifive_fe310_g000_hfrosc *clk = (void *)clock;
2040314a:	fdc42783          	lw	a5,-36(s0)
2040314e:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,hfrosc.c:14
    long cfg = clk->config_base->vtable->get_reg(clk->config_base, clk->config_offset);
20403152:	fec42783          	lw	a5,-20(s0)
20403156:	4fdc                	lw	a5,28(a5)
20403158:	439c                	lw	a5,0(a5)
2040315a:	4394                	lw	a3,0(a5)
2040315c:	fec42783          	lw	a5,-20(s0)
20403160:	4fd8                	lw	a4,28(a5)
20403162:	fec42783          	lw	a5,-20(s0)
20403166:	539c                	lw	a5,32(a5)
20403168:	85be                	mv	a1,a5
2040316a:	853a                	mv	a0,a4
2040316c:	9682                	jalr	a3
2040316e:	fea42423          	sw	a0,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,hfrosc.c:19
    if (cfg & CONFIG_ENABLE == 0)
        return -1;
    if (cfg & CONFIG_READY == 0)
        return -1;
    return metal_clock_get_rate_hz(clk->ref) / ((cfg & CONFIG_DIVIDER) + 1);
20403172:	fec42783          	lw	a5,-20(s0)
20403176:	4f9c                	lw	a5,24(a5)
20403178:	853e                	mv	a0,a5
2040317a:	07e010ef          	jal	ra,204041f8 <metal_clock_get_rate_hz>
2040317e:	87aa                	mv	a5,a0
20403180:	873e                	mv	a4,a5
20403182:	fe842783          	lw	a5,-24(s0)
20403186:	03f7f793          	andi	a5,a5,63
2040318a:	0785                	addi	a5,a5,1
2040318c:	02f757b3          	divu	a5,a4,a5
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,hfrosc.c:20
}
20403190:	853e                	mv	a0,a5
20403192:	50b2                	lw	ra,44(sp)
20403194:	5422                	lw	s0,40(sp)
20403196:	6145                	addi	sp,sp,48
20403198:	8082                	ret

2040319a <__metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz>:
__metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,hfrosc.c:23

long __metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz(struct metal_clock *clock, long rate)
{
2040319a:	1101                	addi	sp,sp,-32
2040319c:	ce06                	sw	ra,28(sp)
2040319e:	cc22                	sw	s0,24(sp)
204031a0:	1000                	addi	s0,sp,32
204031a2:	fea42623          	sw	a0,-20(s0)
204031a6:	feb42423          	sw	a1,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,hfrosc.c:24
    return __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz(clock);
204031aa:	fec42503          	lw	a0,-20(s0)
204031ae:	3f41                	jal	2040313e <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz>
204031b0:	87aa                	mv	a5,a0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,hfrosc.c:25
}
204031b2:	853e                	mv	a0,a5
204031b4:	40f2                	lw	ra,28(sp)
204031b6:	4462                	lw	s0,24(sp)
204031b8:	6105                	addi	sp,sp,32
204031ba:	8082                	ret

204031bc <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz>:
__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,hfxosc.c:10

#define CONFIG_ENABLE  0x40000000UL
#define CONFIG_READY   0x80000000UL

long __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz(const struct metal_clock *clock)
{
204031bc:	7179                	addi	sp,sp,-48
204031be:	d606                	sw	ra,44(sp)
204031c0:	d422                	sw	s0,40(sp)
204031c2:	1800                	addi	s0,sp,48
204031c4:	fca42e23          	sw	a0,-36(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,hfxosc.c:11
    struct __metal_driver_sifive_fe310_g000_hfxosc *clk = (void *)clock;
204031c8:	fdc42783          	lw	a5,-36(s0)
204031cc:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,hfxosc.c:12
    long cfg = clk->config_base->vtable->get_reg(clk->config_base, clk->config_offset);
204031d0:	fec42783          	lw	a5,-20(s0)
204031d4:	4fdc                	lw	a5,28(a5)
204031d6:	439c                	lw	a5,0(a5)
204031d8:	4394                	lw	a3,0(a5)
204031da:	fec42783          	lw	a5,-20(s0)
204031de:	4fd8                	lw	a4,28(a5)
204031e0:	fec42783          	lw	a5,-20(s0)
204031e4:	539c                	lw	a5,32(a5)
204031e6:	85be                	mv	a1,a5
204031e8:	853a                	mv	a0,a4
204031ea:	9682                	jalr	a3
204031ec:	fea42423          	sw	a0,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,hfxosc.c:17
    if (cfg & CONFIG_ENABLE == 0)
        return -1;
    if (cfg & CONFIG_READY == 0)
        return -1;
    return metal_clock_get_rate_hz(clk->ref);
204031f0:	fec42783          	lw	a5,-20(s0)
204031f4:	4f9c                	lw	a5,24(a5)
204031f6:	853e                	mv	a0,a5
204031f8:	000010ef          	jal	ra,204041f8 <metal_clock_get_rate_hz>
204031fc:	87aa                	mv	a5,a0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,hfxosc.c:18
}
204031fe:	853e                	mv	a0,a5
20403200:	50b2                	lw	ra,44(sp)
20403202:	5422                	lw	s0,40(sp)
20403204:	6145                	addi	sp,sp,48
20403206:	8082                	ret

20403208 <__metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz>:
__metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,hfxosc.c:21

long __metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz(struct metal_clock *clock, long rate)
{
20403208:	1101                	addi	sp,sp,-32
2040320a:	ce06                	sw	ra,28(sp)
2040320c:	cc22                	sw	s0,24(sp)
2040320e:	1000                	addi	s0,sp,32
20403210:	fea42623          	sw	a0,-20(s0)
20403214:	feb42423          	sw	a1,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,hfxosc.c:22
    return __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz(clock);
20403218:	fec42503          	lw	a0,-20(s0)
2040321c:	3745                	jal	204031bc <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz>
2040321e:	87aa                	mv	a5,a0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,hfxosc.c:23
}
20403220:	853e                	mv	a0,a5
20403222:	40f2                	lw	ra,28(sp)
20403224:	4462                	lw	s0,24(sp)
20403226:	6105                	addi	sp,sp,32
20403228:	8082                	ret

2040322a <get_pll_config_freq>:
get_pll_config_freq():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:131
 *  - config the PLL configuration
 * Returns:
 *  - PLL_CONFIG_NOT_VALID if the configuration is not valid for the input frequency
 *  - the output frequency, in hertz */
static long get_pll_config_freq(long pll_input_rate, const struct pll_config_t *config)
{
2040322a:	1101                	addi	sp,sp,-32
2040322c:	ce22                	sw	s0,28(sp)
2040322e:	1000                	addi	s0,sp,32
20403230:	fea42623          	sw	a0,-20(s0)
20403234:	feb42423          	sw	a1,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:132
    if(pll_input_rate < config->min_input_rate || pll_input_rate > config->max_input_rate)
20403238:	fe842783          	lw	a5,-24(s0)
2040323c:	4798                	lw	a4,8(a5)
2040323e:	fec42783          	lw	a5,-20(s0)
20403242:	00e7e963          	bltu	a5,a4,20403254 <get_pll_config_freq+0x2a>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:132 (discriminator 1)
20403246:	fe842783          	lw	a5,-24(s0)
2040324a:	47d8                	lw	a4,12(a5)
2040324c:	fec42783          	lw	a5,-20(s0)
20403250:	00f77463          	bgeu	a4,a5,20403258 <get_pll_config_freq+0x2e>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:133
        return PLL_CONFIG_NOT_VALID;
20403254:	57fd                	li	a5,-1
20403256:	a829                	j	20403270 <get_pll_config_freq+0x46>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:135

    return pll_input_rate * config->multiplier / config->divisor;
20403258:	fe842783          	lw	a5,-24(s0)
2040325c:	4398                	lw	a4,0(a5)
2040325e:	fec42783          	lw	a5,-20(s0)
20403262:	02f70733          	mul	a4,a4,a5
20403266:	fe842783          	lw	a5,-24(s0)
2040326a:	43dc                	lw	a5,4(a5)
2040326c:	02f757b3          	divu	a5,a4,a5
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:136
}
20403270:	853e                	mv	a0,a5
20403272:	4472                	lw	s0,28(sp)
20403274:	6105                	addi	sp,sp,32
20403276:	8082                	ret

20403278 <metal_sifive_fe310_g000_pll_init>:
metal_sifive_fe310_g000_pll_init():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:141

#ifdef __METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE

static void metal_sifive_fe310_g000_pll_init(void) __attribute__((constructor));
static void metal_sifive_fe310_g000_pll_init(void) {
20403278:	1141                	addi	sp,sp,-16
2040327a:	c606                	sw	ra,12(sp)
2040327c:	c422                	sw	s0,8(sp)
2040327e:	0800                	addi	s0,sp,16
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:143
    /* If the PLL init_rate is zero, don't initialize the PLL */
    if(__METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE->init_rate != 0)
20403280:	800017b7          	lui	a5,0x80001
20403284:	07478793          	addi	a5,a5,116 # 80001074 <metal_segment_heap_target_end+0xffffd074>
20403288:	5b9c                	lw	a5,48(a5)
2040328a:	c791                	beqz	a5,20403296 <metal_sifive_fe310_g000_pll_init+0x1e>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:144
        __metal_driver_sifive_fe310_g000_pll_init(__METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE);
2040328c:	800017b7          	lui	a5,0x80001
20403290:	07478513          	addi	a0,a5,116 # 80001074 <metal_segment_heap_target_end+0xffffd074>
20403294:	2031                	jal	204032a0 <__metal_driver_sifive_fe310_g000_pll_init>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:145
}
20403296:	0001                	nop
20403298:	40b2                	lw	ra,12(sp)
2040329a:	4422                	lw	s0,8(sp)
2040329c:	0141                	addi	sp,sp,16
2040329e:	8082                	ret

204032a0 <__metal_driver_sifive_fe310_g000_pll_init>:
__metal_driver_sifive_fe310_g000_pll_init():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:149

#endif /* __METAL_DT_SIFIVE_FE310_G000__PLL_HANDLE */

void __metal_driver_sifive_fe310_g000_pll_init(struct __metal_driver_sifive_fe310_g000_pll *pll) {
204032a0:	7179                	addi	sp,sp,-48
204032a2:	d606                	sw	ra,44(sp)
204032a4:	d422                	sw	s0,40(sp)
204032a6:	1800                	addi	s0,sp,48
204032a8:	fca42e23          	sw	a0,-36(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:150
    __metal_io_u32 *pllcfg = (__metal_io_u32 *) (pll->config_base->base + pll->config_offset);
204032ac:	fdc42783          	lw	a5,-36(s0)
204032b0:	539c                	lw	a5,32(a5)
204032b2:	43d8                	lw	a4,4(a5)
204032b4:	fdc42783          	lw	a5,-36(s0)
204032b8:	53dc                	lw	a5,36(a5)
204032ba:	97ba                	add	a5,a5,a4
204032bc:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:153

    /* If the PLL clock has had a _pre_rate_change_callback configured, call it */
    if(pll->clock._pre_rate_change_callback != NULL)
204032c0:	fdc42783          	lw	a5,-36(s0)
204032c4:	43dc                	lw	a5,4(a5)
204032c6:	cb89                	beqz	a5,204032d8 <__metal_driver_sifive_fe310_g000_pll_init+0x38>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:154
        pll->clock._pre_rate_change_callback(pll->clock._pre_rate_change_callback_priv);
204032c8:	fdc42783          	lw	a5,-36(s0)
204032cc:	43d8                	lw	a4,4(a5)
204032ce:	fdc42783          	lw	a5,-36(s0)
204032d2:	479c                	lw	a5,8(a5)
204032d4:	853e                	mv	a0,a5
204032d6:	9702                	jalr	a4
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:157

    /* If we're running off of the PLL, switch off before we start configuring it*/
    if((__METAL_ACCESS_ONCE(pllcfg) & PLL_SEL) == 0)
204032d8:	fec42783          	lw	a5,-20(s0)
204032dc:	4398                	lw	a4,0(a5)
204032de:	67c1                	lui	a5,0x10
204032e0:	8ff9                	and	a5,a5,a4
204032e2:	eb91                	bnez	a5,204032f6 <__metal_driver_sifive_fe310_g000_pll_init+0x56>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:158
        __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_SEL);
204032e4:	fec42783          	lw	a5,-20(s0)
204032e8:	4398                	lw	a4,0(a5)
204032ea:	77c1                	lui	a5,0xffff0
204032ec:	17fd                	addi	a5,a5,-1
204032ee:	8f7d                	and	a4,a4,a5
204032f0:	fec42783          	lw	a5,-20(s0)
204032f4:	c398                	sw	a4,0(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:161

    /* Make sure we're running off of the external oscillator for stability */
    if(pll->pllref != NULL)
204032f6:	fdc42783          	lw	a5,-36(s0)
204032fa:	4fdc                	lw	a5,28(a5)
204032fc:	cb91                	beqz	a5,20403310 <__metal_driver_sifive_fe310_g000_pll_init+0x70>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:162
        __METAL_ACCESS_ONCE(pllcfg) |= PLL_REFSEL;
204032fe:	fec42783          	lw	a5,-20(s0)
20403302:	4398                	lw	a4,0(a5)
20403304:	000207b7          	lui	a5,0x20
20403308:	8f5d                	or	a4,a4,a5
2040330a:	fec42783          	lw	a5,-20(s0)
2040330e:	c398                	sw	a4,0(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:167

    /* Configure the PLL to run at the requested init frequency.
     * Using the vtable instead of the user API because we want to control
     * when the callbacks occur. */
    pll->vtable->clock.set_rate_hz(&(pll->clock), pll->init_rate);
20403310:	fdc42783          	lw	a5,-36(s0)
20403314:	4bdc                	lw	a5,20(a5)
20403316:	4794                	lw	a3,8(a5)
20403318:	fdc42703          	lw	a4,-36(s0)
2040331c:	fdc42783          	lw	a5,-36(s0)
20403320:	5b9c                	lw	a5,48(a5)
20403322:	85be                	mv	a1,a5
20403324:	853a                	mv	a0,a4
20403326:	9682                	jalr	a3
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:170

    /* If the PLL clock has had a rate_change_callback configured, call it */
    if(pll->clock._post_rate_change_callback != NULL)
20403328:	fdc42783          	lw	a5,-36(s0)
2040332c:	47dc                	lw	a5,12(a5)
2040332e:	cb89                	beqz	a5,20403340 <__metal_driver_sifive_fe310_g000_pll_init+0xa0>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:171
        pll->clock._post_rate_change_callback(pll->clock._post_rate_change_callback_priv);
20403330:	fdc42783          	lw	a5,-36(s0)
20403334:	47d8                	lw	a4,12(a5)
20403336:	fdc42783          	lw	a5,-36(s0)
2040333a:	4b9c                	lw	a5,16(a5)
2040333c:	853e                	mv	a0,a5
2040333e:	9702                	jalr	a4
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:172
}
20403340:	0001                	nop
20403342:	50b2                	lw	ra,44(sp)
20403344:	5422                	lw	s0,40(sp)
20403346:	6145                	addi	sp,sp,48
20403348:	8082                	ret

2040334a <__metal_driver_sifive_fe310_g000_pll_get_rate_hz>:
__metal_driver_sifive_fe310_g000_pll_get_rate_hz():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:175

long __metal_driver_sifive_fe310_g000_pll_get_rate_hz(const struct metal_clock *clock)
{
2040334a:	7139                	addi	sp,sp,-64
2040334c:	de06                	sw	ra,60(sp)
2040334e:	dc22                	sw	s0,56(sp)
20403350:	0080                	addi	s0,sp,64
20403352:	fca42623          	sw	a0,-52(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:176
    struct __metal_driver_sifive_fe310_g000_pll *clk = (void *)clock;
20403356:	fcc42783          	lw	a5,-52(s0)
2040335a:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:177
    long cfg = clk->config_base->vtable->get_reg(clk->config_base, clk->config_offset);
2040335e:	fec42783          	lw	a5,-20(s0)
20403362:	539c                	lw	a5,32(a5)
20403364:	439c                	lw	a5,0(a5)
20403366:	4394                	lw	a3,0(a5)
20403368:	fec42783          	lw	a5,-20(s0)
2040336c:	5398                	lw	a4,32(a5)
2040336e:	fec42783          	lw	a5,-20(s0)
20403372:	53dc                	lw	a5,36(a5)
20403374:	85be                	mv	a1,a5
20403376:	853a                	mv	a0,a4
20403378:	9682                	jalr	a3
2040337a:	fea42423          	sw	a0,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:178
    long div = clk->config_base->vtable->get_reg(clk->divider_base, clk->divider_offset);
2040337e:	fec42783          	lw	a5,-20(s0)
20403382:	539c                	lw	a5,32(a5)
20403384:	439c                	lw	a5,0(a5)
20403386:	4394                	lw	a3,0(a5)
20403388:	fec42783          	lw	a5,-20(s0)
2040338c:	5798                	lw	a4,40(a5)
2040338e:	fec42783          	lw	a5,-20(s0)
20403392:	57dc                	lw	a5,44(a5)
20403394:	85be                	mv	a1,a5
20403396:	853a                	mv	a0,a4
20403398:	9682                	jalr	a3
2040339a:	fea42223          	sw	a0,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:182

    /* At the end of the PLL there's one big mux: it either selects the HFROSC
     * (bypassing the PLL entirely) or uses the PLL. */
    if (__METAL_GET_FIELD(cfg, PLL_SEL) == 0)
2040339e:	fe842703          	lw	a4,-24(s0)
204033a2:	67c1                	lui	a5,0x10
204033a4:	8f7d                	and	a4,a4,a5
204033a6:	67c1                	lui	a5,0x10
204033a8:	00f77a63          	bgeu	a4,a5,204033bc <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x72>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:183
        return metal_clock_get_rate_hz(clk->pllsel0);
204033ac:	fec42783          	lw	a5,-20(s0)
204033b0:	4f9c                	lw	a5,24(a5)
204033b2:	853e                	mv	a0,a5
204033b4:	645000ef          	jal	ra,204041f8 <metal_clock_get_rate_hz>
204033b8:	87aa                	mv	a5,a0
204033ba:	a8f1                	j	20403496 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x14c>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:187

    /* There's a clock mux before the PLL that selects between the HFROSC adn
     * the HFXOSC as the PLL's input clock. */
    long ref_hz = metal_clock_get_rate_hz(__METAL_GET_FIELD(cfg, PLL_REFSEL) ? clk->pllref : clk->pllsel0);
204033bc:	fe842703          	lw	a4,-24(s0)
204033c0:	000207b7          	lui	a5,0x20
204033c4:	8f7d                	and	a4,a4,a5
204033c6:	000207b7          	lui	a5,0x20
204033ca:	00f76663          	bltu	a4,a5,204033d6 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x8c>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:187 (discriminator 1)
204033ce:	fec42783          	lw	a5,-20(s0)
204033d2:	4fdc                	lw	a5,28(a5)
204033d4:	a021                	j	204033dc <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x92>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:187 (discriminator 2)
204033d6:	fec42783          	lw	a5,-20(s0)
204033da:	4f9c                	lw	a5,24(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:187 (discriminator 4)
204033dc:	853e                	mv	a0,a5
204033de:	61b000ef          	jal	ra,204041f8 <metal_clock_get_rate_hz>
204033e2:	fea42023          	sw	a0,-32(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:191 (discriminator 4)

    /* It's possible to bypass the PLL, which is an internal bpyass.  This
     * still obays the PLL's input clock mu. */
    if (__METAL_GET_FIELD(cfg, PLL_BYPASS))
204033e6:	fe842703          	lw	a4,-24(s0)
204033ea:	000407b7          	lui	a5,0x40
204033ee:	8f7d                	and	a4,a4,a5
204033f0:	000407b7          	lui	a5,0x40
204033f4:	00f76563          	bltu	a4,a5,204033fe <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xb4>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:192
        return ref_hz;
204033f8:	fe042783          	lw	a5,-32(s0)
204033fc:	a869                	j	20403496 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x14c>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:195

    /* Logically the PLL is a three stage div-mul-div. */
    long div_r = __METAL_GET_FIELD(cfg, PLL_R) + 1;
204033fe:	fe842783          	lw	a5,-24(s0)
20403402:	8b9d                	andi	a5,a5,7
20403404:	0785                	addi	a5,a5,1
20403406:	fcf42e23          	sw	a5,-36(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:196
    long mul_f = 2 * (__METAL_GET_FIELD(cfg, PLL_F) + 1);
2040340a:	fe842783          	lw	a5,-24(s0)
2040340e:	3f07f793          	andi	a5,a5,1008
20403412:	8391                	srli	a5,a5,0x4
20403414:	0785                	addi	a5,a5,1
20403416:	0786                	slli	a5,a5,0x1
20403418:	fcf42c23          	sw	a5,-40(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:197
    if (__METAL_GET_FIELD(cfg, PLL_Q) == 0)
2040341c:	fe842703          	lw	a4,-24(s0)
20403420:	6785                	lui	a5,0x1
20403422:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x800>
20403426:	8f7d                	and	a4,a4,a5
20403428:	3ff00793          	li	a5,1023
2040342c:	00e7e463          	bltu	a5,a4,20403434 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xea>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:198
        return -1;
20403430:	57fd                	li	a5,-1
20403432:	a095                	j	20403496 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x14c>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:199
    long div_q = 1 << __METAL_GET_FIELD(cfg, PLL_Q);
20403434:	fe842703          	lw	a4,-24(s0)
20403438:	6785                	lui	a5,0x1
2040343a:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x800>
2040343e:	8ff9                	and	a5,a5,a4
20403440:	83a9                	srli	a5,a5,0xa
20403442:	4705                	li	a4,1
20403444:	00f717b3          	sll	a5,a4,a5
20403448:	fcf42a23          	sw	a5,-44(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:204

    /* In addition to the dividers inherent in the PLL, there's an additional
     * clock divider that lives after the PLL and lets us pick a more
     * interesting range of frequencies. */
    long pllout = (((ref_hz / div_r) * mul_f) / div_q);
2040344c:	fe042703          	lw	a4,-32(s0)
20403450:	fdc42783          	lw	a5,-36(s0)
20403454:	02f74733          	div	a4,a4,a5
20403458:	fd842783          	lw	a5,-40(s0)
2040345c:	02f70733          	mul	a4,a4,a5
20403460:	fd442783          	lw	a5,-44(s0)
20403464:	02f747b3          	div	a5,a4,a5
20403468:	fcf42823          	sw	a5,-48(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:205
    if (__METAL_GET_FIELD(div, DIV_1))
2040346c:	fe442783          	lw	a5,-28(s0)
20403470:	1007f713          	andi	a4,a5,256
20403474:	0ff00793          	li	a5,255
20403478:	00e7f563          	bgeu	a5,a4,20403482 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x138>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:206
        return pllout;
2040347c:	fd042783          	lw	a5,-48(s0)
20403480:	a819                	j	20403496 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x14c>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:208

    return pllout / (2 * (__METAL_GET_FIELD(div, DIV_DIV) + 1));
20403482:	fd042703          	lw	a4,-48(s0)
20403486:	fe442783          	lw	a5,-28(s0)
2040348a:	03f7f793          	andi	a5,a5,63
2040348e:	0785                	addi	a5,a5,1
20403490:	0786                	slli	a5,a5,0x1
20403492:	02f757b3          	divu	a5,a4,a5
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:209
}
20403496:	853e                	mv	a0,a5
20403498:	50f2                	lw	ra,60(sp)
2040349a:	5462                	lw	s0,56(sp)
2040349c:	6121                	addi	sp,sp,64
2040349e:	8082                	ret

204034a0 <find_closest_config>:
find_closest_config():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:220
 *  - rate desired PLL output frequency
 * Returns:
 *  -1 if no valid configuration is available
 *  the index into pll_configs of a valid configuration */
static int find_closest_config(long ref_hz, long rate)
{
204034a0:	7139                	addi	sp,sp,-64
204034a2:	de06                	sw	ra,60(sp)
204034a4:	dc22                	sw	s0,56(sp)
204034a6:	0080                	addi	s0,sp,64
204034a8:	fca42623          	sw	a0,-52(s0)
204034ac:	fcb42423          	sw	a1,-56(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:221
    int closest_index = -1;
204034b0:	57fd                	li	a5,-1
204034b2:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:222
    long closest_diff = LONG_MAX;
204034b6:	800007b7          	lui	a5,0x80000
204034ba:	fff7c793          	not	a5,a5
204034be:	fef42423          	sw	a5,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:226

    /* We're probably trying for a fast output frequency, so start from
     * the high end of the configs. */
    for(int i = (sizeof(pll_configs) / sizeof(pll_configs[0])) - 1; i >= 0; i--)
204034c2:	04300793          	li	a5,67
204034c6:	fef42223          	sw	a5,-28(s0)
204034ca:	a0a5                	j	20403532 <find_closest_config+0x92>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:228
    {
        long config_freq = get_pll_config_freq(ref_hz, &(pll_configs[i]));
204034cc:	fe442783          	lw	a5,-28(s0)
204034d0:	00579713          	slli	a4,a5,0x5
204034d4:	204057b7          	lui	a5,0x20405
204034d8:	9fc78793          	addi	a5,a5,-1540 # 204049fc <pll_configs>
204034dc:	97ba                	add	a5,a5,a4
204034de:	85be                	mv	a1,a5
204034e0:	fcc42503          	lw	a0,-52(s0)
204034e4:	3399                	jal	2040322a <get_pll_config_freq>
204034e6:	fea42023          	sw	a0,-32(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:229
        if(config_freq != PLL_CONFIG_NOT_VALID)
204034ea:	fe042703          	lw	a4,-32(s0)
204034ee:	57fd                	li	a5,-1
204034f0:	02f70c63          	beq	a4,a5,20403528 <find_closest_config+0x88>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:231
        {
            long freq_diff = abs(config_freq - rate);
204034f4:	fe042703          	lw	a4,-32(s0)
204034f8:	fc842783          	lw	a5,-56(s0)
204034fc:	8f1d                	sub	a4,a4,a5
204034fe:	41f75793          	srai	a5,a4,0x1f
20403502:	8f3d                	xor	a4,a4,a5
20403504:	40f707b3          	sub	a5,a4,a5
20403508:	fcf42e23          	sw	a5,-36(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:232
            if(freq_diff < closest_diff)
2040350c:	fdc42703          	lw	a4,-36(s0)
20403510:	fe842783          	lw	a5,-24(s0)
20403514:	00f75a63          	bge	a4,a5,20403528 <find_closest_config+0x88>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:234
            {
                closest_index = i;
20403518:	fe442783          	lw	a5,-28(s0)
2040351c:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:235
                closest_diff = freq_diff;
20403520:	fdc42783          	lw	a5,-36(s0)
20403524:	fef42423          	sw	a5,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:226 (discriminator 2)
    for(int i = (sizeof(pll_configs) / sizeof(pll_configs[0])) - 1; i >= 0; i--)
20403528:	fe442783          	lw	a5,-28(s0)
2040352c:	17fd                	addi	a5,a5,-1
2040352e:	fef42223          	sw	a5,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:226 (discriminator 1)
20403532:	fe442783          	lw	a5,-28(s0)
20403536:	f807dbe3          	bgez	a5,204034cc <find_closest_config+0x2c>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:240
            }
        }
    }

    return closest_index;
2040353a:	fec42783          	lw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:241
}
2040353e:	853e                	mv	a0,a5
20403540:	50f2                	lw	ra,60(sp)
20403542:	5462                	lw	s0,56(sp)
20403544:	6121                	addi	sp,sp,64
20403546:	8082                	ret

20403548 <configure_pll>:
configure_pll():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:245

/* Configure the PLL and wait for it to lock */
static void configure_pll(__metal_io_u32 *pllcfg, __metal_io_u32 *plloutdiv, const struct pll_config_t *config)
{
20403548:	1101                	addi	sp,sp,-32
2040354a:	ce22                	sw	s0,28(sp)
2040354c:	1000                	addi	s0,sp,32
2040354e:	fea42623          	sw	a0,-20(s0)
20403552:	feb42423          	sw	a1,-24(s0)
20403556:	fec42223          	sw	a2,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:246
    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_R);
2040355a:	fec42783          	lw	a5,-20(s0)
2040355e:	439c                	lw	a5,0(a5)
20403560:	ff87f713          	andi	a4,a5,-8
20403564:	fec42783          	lw	a5,-20(s0)
20403568:	c398                	sw	a4,0(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:247
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_R_SHIFT(config->r);
2040356a:	fec42783          	lw	a5,-20(s0)
2040356e:	4398                	lw	a4,0(a5)
20403570:	fe442783          	lw	a5,-28(s0)
20403574:	4b9c                	lw	a5,16(a5)
20403576:	8b9d                	andi	a5,a5,7
20403578:	8f5d                	or	a4,a4,a5
2040357a:	fec42783          	lw	a5,-20(s0)
2040357e:	c398                	sw	a4,0(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:249

    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_F);
20403580:	fec42783          	lw	a5,-20(s0)
20403584:	439c                	lw	a5,0(a5)
20403586:	c0f7f713          	andi	a4,a5,-1009
2040358a:	fec42783          	lw	a5,-20(s0)
2040358e:	c398                	sw	a4,0(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:250
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_F_SHIFT(config->f);
20403590:	fec42783          	lw	a5,-20(s0)
20403594:	4398                	lw	a4,0(a5)
20403596:	fe442783          	lw	a5,-28(s0)
2040359a:	4bdc                	lw	a5,20(a5)
2040359c:	0792                	slli	a5,a5,0x4
2040359e:	3f07f793          	andi	a5,a5,1008
204035a2:	8f5d                	or	a4,a4,a5
204035a4:	fec42783          	lw	a5,-20(s0)
204035a8:	c398                	sw	a4,0(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:252

    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_Q);
204035aa:	fec42783          	lw	a5,-20(s0)
204035ae:	4398                	lw	a4,0(a5)
204035b0:	77fd                	lui	a5,0xfffff
204035b2:	3ff78793          	addi	a5,a5,1023 # fffff3ff <metal_segment_heap_target_end+0x7fffb3ff>
204035b6:	8f7d                	and	a4,a4,a5
204035b8:	fec42783          	lw	a5,-20(s0)
204035bc:	c398                	sw	a4,0(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:253
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_Q_SHIFT(config->q);
204035be:	fec42783          	lw	a5,-20(s0)
204035c2:	4398                	lw	a4,0(a5)
204035c4:	fe442783          	lw	a5,-28(s0)
204035c8:	4f9c                	lw	a5,24(a5)
204035ca:	00a79693          	slli	a3,a5,0xa
204035ce:	6785                	lui	a5,0x1
204035d0:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x800>
204035d4:	8ff5                	and	a5,a5,a3
204035d6:	8f5d                	or	a4,a4,a5
204035d8:	fec42783          	lw	a5,-20(s0)
204035dc:	c398                	sw	a4,0(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:255

    if(config->d < 0)
204035de:	fe442783          	lw	a5,-28(s0)
204035e2:	4fdc                	lw	a5,28(a5)
204035e4:	0207db63          	bgez	a5,2040361a <configure_pll+0xd2>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:258
    {
        /* disable final divider */
        __METAL_ACCESS_ONCE(plloutdiv) |= DIV_1;
204035e8:	fe842783          	lw	a5,-24(s0)
204035ec:	439c                	lw	a5,0(a5)
204035ee:	1007e713          	ori	a4,a5,256
204035f2:	fe842783          	lw	a5,-24(s0)
204035f6:	c398                	sw	a4,0(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:260

        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_DIV);
204035f8:	fe842783          	lw	a5,-24(s0)
204035fc:	439c                	lw	a5,0(a5)
204035fe:	fc07f713          	andi	a4,a5,-64
20403602:	fe842783          	lw	a5,-24(s0)
20403606:	c398                	sw	a4,0(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:261
        __METAL_ACCESS_ONCE(plloutdiv) |= PLL_DIV_SHIFT(1);
20403608:	fe842783          	lw	a5,-24(s0)
2040360c:	439c                	lw	a5,0(a5)
2040360e:	0017e713          	ori	a4,a5,1
20403612:	fe842783          	lw	a5,-24(s0)
20403616:	c398                	sw	a4,0(a5)
20403618:	a82d                	j	20403652 <configure_pll+0x10a>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:265
    }
    else
    {
        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_1);
2040361a:	fe842783          	lw	a5,-24(s0)
2040361e:	439c                	lw	a5,0(a5)
20403620:	eff7f713          	andi	a4,a5,-257
20403624:	fe842783          	lw	a5,-24(s0)
20403628:	c398                	sw	a4,0(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:267

        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_DIV);
2040362a:	fe842783          	lw	a5,-24(s0)
2040362e:	439c                	lw	a5,0(a5)
20403630:	fc07f713          	andi	a4,a5,-64
20403634:	fe842783          	lw	a5,-24(s0)
20403638:	c398                	sw	a4,0(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:268
        __METAL_ACCESS_ONCE(plloutdiv) |= PLL_DIV_SHIFT(config->d);
2040363a:	fe842783          	lw	a5,-24(s0)
2040363e:	4398                	lw	a4,0(a5)
20403640:	fe442783          	lw	a5,-28(s0)
20403644:	4fdc                	lw	a5,28(a5)
20403646:	03f7f793          	andi	a5,a5,63
2040364a:	8f5d                	or	a4,a4,a5
2040364c:	fe842783          	lw	a5,-24(s0)
20403650:	c398                	sw	a4,0(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:271
    }

    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_BYPASS);
20403652:	fec42783          	lw	a5,-20(s0)
20403656:	4398                	lw	a4,0(a5)
20403658:	fffc07b7          	lui	a5,0xfffc0
2040365c:	17fd                	addi	a5,a5,-1
2040365e:	8f7d                	and	a4,a4,a5
20403660:	fec42783          	lw	a5,-20(s0)
20403664:	c398                	sw	a4,0(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:274

    /* Wait for PLL to lock */
    while((__METAL_ACCESS_ONCE(pllcfg) & PLL_LOCK) == 0) ;
20403666:	0001                	nop
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:274 (discriminator 1)
20403668:	fec42783          	lw	a5,-20(s0)
2040366c:	439c                	lw	a5,0(a5)
2040366e:	fe07dde3          	bgez	a5,20403668 <configure_pll+0x120>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:275
}
20403672:	0001                	nop
20403674:	4472                	lw	s0,28(sp)
20403676:	6105                	addi	sp,sp,32
20403678:	8082                	ret

2040367a <__metal_driver_sifive_fe310_g000_pll_set_rate_hz>:
__metal_driver_sifive_fe310_g000_pll_set_rate_hz():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:278

long __metal_driver_sifive_fe310_g000_pll_set_rate_hz(struct metal_clock *clock, long rate)
{
2040367a:	7139                	addi	sp,sp,-64
2040367c:	de06                	sw	ra,60(sp)
2040367e:	dc22                	sw	s0,56(sp)
20403680:	0080                	addi	s0,sp,64
20403682:	fca42623          	sw	a0,-52(s0)
20403686:	fcb42423          	sw	a1,-56(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:279
    struct __metal_driver_sifive_fe310_g000_pll *clk = (void *)clock;
2040368a:	fcc42783          	lw	a5,-52(s0)
2040368e:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:280
    __metal_io_u32 *pllcfg = (__metal_io_u32 *) (clk->config_base->base + clk->config_offset);
20403692:	fec42783          	lw	a5,-20(s0)
20403696:	539c                	lw	a5,32(a5)
20403698:	43d8                	lw	a4,4(a5)
2040369a:	fec42783          	lw	a5,-20(s0)
2040369e:	53dc                	lw	a5,36(a5)
204036a0:	97ba                	add	a5,a5,a4
204036a2:	fef42423          	sw	a5,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:281
    __metal_io_u32 *plloutdiv = (__metal_io_u32 *) (clk->divider_base->base + clk->divider_offset);
204036a6:	fec42783          	lw	a5,-20(s0)
204036aa:	579c                	lw	a5,40(a5)
204036ac:	43d8                	lw	a4,4(a5)
204036ae:	fec42783          	lw	a5,-20(s0)
204036b2:	57dc                	lw	a5,44(a5)
204036b4:	97ba                	add	a5,a5,a4
204036b6:	fef42223          	sw	a5,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:284

    /* We can't modify the PLL if coreclk is driven by it, so switch it off */
    if (__METAL_ACCESS_ONCE(pllcfg) & PLL_SEL)
204036ba:	fe842783          	lw	a5,-24(s0)
204036be:	4398                	lw	a4,0(a5)
204036c0:	67c1                	lui	a5,0x10
204036c2:	8ff9                	and	a5,a5,a4
204036c4:	cb91                	beqz	a5,204036d8 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x5e>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:285
        __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_SEL);
204036c6:	fe842783          	lw	a5,-24(s0)
204036ca:	4398                	lw	a4,0(a5)
204036cc:	77c1                	lui	a5,0xffff0
204036ce:	17fd                	addi	a5,a5,-1
204036d0:	8f7d                	and	a4,a4,a5
204036d2:	fe842783          	lw	a5,-24(s0)
204036d6:	c398                	sw	a4,0(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:289

    /* There's a clock mux before the PLL that selects between the HFROSC and
     * the HFXOSC as the PLL's input clock. */
    long ref_hz = metal_clock_get_rate_hz(__METAL_ACCESS_ONCE(pllcfg) & PLL_REFSEL ? clk->pllref : clk->pllsel0);
204036d8:	fe842783          	lw	a5,-24(s0)
204036dc:	4398                	lw	a4,0(a5)
204036de:	000207b7          	lui	a5,0x20
204036e2:	8ff9                	and	a5,a5,a4
204036e4:	c789                	beqz	a5,204036ee <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x74>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:289 (discriminator 1)
204036e6:	fec42783          	lw	a5,-20(s0)
204036ea:	4fdc                	lw	a5,28(a5)
204036ec:	a021                	j	204036f4 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x7a>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:289 (discriminator 2)
204036ee:	fec42783          	lw	a5,-20(s0)
204036f2:	4f9c                	lw	a5,24(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:289 (discriminator 4)
204036f4:	853e                	mv	a0,a5
204036f6:	303000ef          	jal	ra,204041f8 <metal_clock_get_rate_hz>
204036fa:	fea42023          	sw	a0,-32(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:292 (discriminator 4)

    /* if the desired rate is within 75%-125% of the input clock, bypass the PLL */
    if((ref_hz * 3 / 4) <= rate && (ref_hz * 5 / 4) >= rate)
204036fe:	fe042703          	lw	a4,-32(s0)
20403702:	87ba                	mv	a5,a4
20403704:	0786                	slli	a5,a5,0x1
20403706:	97ba                	add	a5,a5,a4
20403708:	41f7d713          	srai	a4,a5,0x1f
2040370c:	8b0d                	andi	a4,a4,3
2040370e:	97ba                	add	a5,a5,a4
20403710:	8789                	srai	a5,a5,0x2
20403712:	873e                	mv	a4,a5
20403714:	fc842783          	lw	a5,-56(s0)
20403718:	02e7cb63          	blt	a5,a4,2040374e <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0xd4>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:292 (discriminator 1)
2040371c:	fe042703          	lw	a4,-32(s0)
20403720:	87ba                	mv	a5,a4
20403722:	078a                	slli	a5,a5,0x2
20403724:	97ba                	add	a5,a5,a4
20403726:	41f7d713          	srai	a4,a5,0x1f
2040372a:	8b0d                	andi	a4,a4,3
2040372c:	97ba                	add	a5,a5,a4
2040372e:	8789                	srai	a5,a5,0x2
20403730:	873e                	mv	a4,a5
20403732:	fc842783          	lw	a5,-56(s0)
20403736:	00f74c63          	blt	a4,a5,2040374e <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0xd4>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:294
    {
        __METAL_ACCESS_ONCE(pllcfg) |= PLL_BYPASS;
2040373a:	fe842783          	lw	a5,-24(s0)
2040373e:	4398                	lw	a4,0(a5)
20403740:	000407b7          	lui	a5,0x40
20403744:	8f5d                	or	a4,a4,a5
20403746:	fe842783          	lw	a5,-24(s0)
2040374a:	c398                	sw	a4,0(a5)
2040374c:	a0b1                	j	20403798 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x11e>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:298
    }
    else
    {
        int config_index = find_closest_config(ref_hz, rate);
2040374e:	fc842583          	lw	a1,-56(s0)
20403752:	fe042503          	lw	a0,-32(s0)
20403756:	33a9                	jal	204034a0 <find_closest_config>
20403758:	fca42e23          	sw	a0,-36(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:299
        if(config_index != -1)
2040375c:	fdc42703          	lw	a4,-36(s0)
20403760:	57fd                	li	a5,-1
20403762:	02f70263          	beq	a4,a5,20403786 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x10c>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:301
        {
            configure_pll(pllcfg, plloutdiv, &(pll_configs[config_index]));
20403766:	fdc42783          	lw	a5,-36(s0)
2040376a:	00579713          	slli	a4,a5,0x5
2040376e:	204057b7          	lui	a5,0x20405
20403772:	9fc78793          	addi	a5,a5,-1540 # 204049fc <pll_configs>
20403776:	97ba                	add	a5,a5,a4
20403778:	863e                	mv	a2,a5
2040377a:	fe442583          	lw	a1,-28(s0)
2040377e:	fe842503          	lw	a0,-24(s0)
20403782:	33d9                	jal	20403548 <configure_pll>
20403784:	a811                	j	20403798 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x11e>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:306
        }
        else
        {
            /* unable to find a valid configuration */
            __METAL_ACCESS_ONCE(pllcfg) |= PLL_BYPASS;
20403786:	fe842783          	lw	a5,-24(s0)
2040378a:	4398                	lw	a4,0(a5)
2040378c:	000407b7          	lui	a5,0x40
20403790:	8f5d                	or	a4,a4,a5
20403792:	fe842783          	lw	a5,-24(s0)
20403796:	c398                	sw	a4,0(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:311
        }
    }

    /* Enable the PLL */
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_SEL;
20403798:	fe842783          	lw	a5,-24(s0)
2040379c:	4398                	lw	a4,0(a5)
2040379e:	67c1                	lui	a5,0x10
204037a0:	8f5d                	or	a4,a4,a5
204037a2:	fe842783          	lw	a5,-24(s0)
204037a6:	c398                	sw	a4,0(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:313

    return __metal_driver_sifive_fe310_g000_pll_get_rate_hz(clock);
204037a8:	fcc42503          	lw	a0,-52(s0)
204037ac:	3e79                	jal	2040334a <__metal_driver_sifive_fe310_g000_pll_get_rate_hz>
204037ae:	87aa                	mv	a5,a0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:314
}
204037b0:	853e                	mv	a0,a5
204037b2:	50f2                	lw	ra,60(sp)
204037b4:	5462                	lw	s0,56(sp)
204037b6:	6121                	addi	sp,sp,64
204037b8:	8082                	ret

204037ba <use_hfxosc>:
use_hfxosc():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:319

#ifdef __METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE
static void use_hfxosc(void) __attribute__((constructor));
static void use_hfxosc(void)
{
204037ba:	1141                	addi	sp,sp,-16
204037bc:	c606                	sw	ra,12(sp)
204037be:	c422                	sw	s0,8(sp)
204037c0:	0800                	addi	s0,sp,16
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:320
    metal_clock_set_rate_hz(
204037c2:	800017b7          	lui	a5,0x80001
204037c6:	07478793          	addi	a5,a5,116 # 80001074 <metal_segment_heap_target_end+0xffffd074>
204037ca:	5b9c                	lw	a5,48(a5)
204037cc:	85be                	mv	a1,a5
204037ce:	800017b7          	lui	a5,0x80001
204037d2:	07478513          	addi	a0,a5,116 # 80001074 <metal_segment_heap_target_end+0xffffd074>
204037d6:	249000ef          	jal	ra,2040421e <metal_clock_set_rate_hz>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:324
        &__METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE->clock,
        __METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE->init_rate
    );
}
204037da:	0001                	nop
204037dc:	40b2                	lw	ra,12(sp)
204037de:	4422                	lw	s0,8(sp)
204037e0:	0141                	addi	sp,sp,16
204037e2:	8082                	ret

204037e4 <__metal_driver_sifive_fe310_g000_prci_get_reg>:
__metal_driver_sifive_fe310_g000_prci_get_reg():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,prci.c:6
/* Copyright 2018 SiFive, Inc */
/* SPDX-License-Identifier: Apache-2.0 */

#include <metal/drivers/sifive,fe310-g000,prci.h>

long __metal_driver_sifive_fe310_g000_prci_get_reg(const struct __metal_driver_sifive_fe310_g000_prci *prci, long offset) {
204037e4:	1101                	addi	sp,sp,-32
204037e6:	ce22                	sw	s0,28(sp)
204037e8:	1000                	addi	s0,sp,32
204037ea:	fea42623          	sw	a0,-20(s0)
204037ee:	feb42423          	sw	a1,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,prci.c:7
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(prci->base + offset));
204037f2:	fec42783          	lw	a5,-20(s0)
204037f6:	43d8                	lw	a4,4(a5)
204037f8:	fe842783          	lw	a5,-24(s0)
204037fc:	97ba                	add	a5,a5,a4
204037fe:	439c                	lw	a5,0(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,prci.c:8
}
20403800:	853e                	mv	a0,a5
20403802:	4472                	lw	s0,28(sp)
20403804:	6105                	addi	sp,sp,32
20403806:	8082                	ret

20403808 <__metal_driver_sifive_fe310_g000_prci_set_reg>:
__metal_driver_sifive_fe310_g000_prci_set_reg():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,prci.c:10

long __metal_driver_sifive_fe310_g000_prci_set_reg(const struct __metal_driver_sifive_fe310_g000_prci *prci, long offset, long value) {
20403808:	1101                	addi	sp,sp,-32
2040380a:	ce22                	sw	s0,28(sp)
2040380c:	1000                	addi	s0,sp,32
2040380e:	fea42623          	sw	a0,-20(s0)
20403812:	feb42423          	sw	a1,-24(s0)
20403816:	fec42223          	sw	a2,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,prci.c:11
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(prci->base + offset)) = value;
2040381a:	fec42783          	lw	a5,-20(s0)
2040381e:	43d8                	lw	a4,4(a5)
20403820:	fe842783          	lw	a5,-24(s0)
20403824:	97ba                	add	a5,a5,a4
20403826:	873e                	mv	a4,a5
20403828:	fe442783          	lw	a5,-28(s0)
2040382c:	c31c                	sw	a5,0(a4)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,fe310-g000,prci.c:12
}
2040382e:	853e                	mv	a0,a5
20403830:	4472                	lw	s0,28(sp)
20403832:	6105                	addi	sp,sp,32
20403834:	8082                	ret

20403836 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:16

#define GPIO_IOF_EN     (0x38)
#define GPIO_IOF_SEL    (0x3C)

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
20403836:	7179                	addi	sp,sp,-48
20403838:	d622                	sw	s0,44(sp)
2040383a:	1800                	addi	s0,sp,48
2040383c:	fca42e23          	sw	a0,-36(s0)
20403840:	fcb42c23          	sw	a1,-40(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:17
    struct __metal_driver_sifive_gpio0 *gpio = (void *)ggpio;
20403844:	fdc42783          	lw	a5,-36(s0)
20403848:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:19

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_INPUT_EN))  &= ~source;
2040384c:	fec42783          	lw	a5,-20(s0)
20403850:	479c                	lw	a5,8(a5)
20403852:	0791                	addi	a5,a5,4
20403854:	439c                	lw	a5,0(a5)
20403856:	fd842703          	lw	a4,-40(s0)
2040385a:	fff74713          	not	a4,a4
2040385e:	86ba                	mv	a3,a4
20403860:	fec42703          	lw	a4,-20(s0)
20403864:	4718                	lw	a4,8(a4)
20403866:	0711                	addi	a4,a4,4
20403868:	8ff5                	and	a5,a5,a3
2040386a:	c31c                	sw	a5,0(a4)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:21

    return 0;
2040386c:	4781                	li	a5,0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:22
}
2040386e:	853e                	mv	a0,a5
20403870:	5432                	lw	s0,44(sp)
20403872:	6145                	addi	sp,sp,48
20403874:	8082                	ret

20403876 <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:25

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
20403876:	7179                	addi	sp,sp,-48
20403878:	d622                	sw	s0,44(sp)
2040387a:	1800                	addi	s0,sp,48
2040387c:	fca42e23          	sw	a0,-36(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:26
    struct __metal_driver_sifive_gpio0 *gpio = (void *)ggpio;
20403880:	fdc42783          	lw	a5,-36(s0)
20403884:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:28

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL));
20403888:	fec42783          	lw	a5,-20(s0)
2040388c:	479c                	lw	a5,8(a5)
2040388e:	07b1                	addi	a5,a5,12
20403890:	439c                	lw	a5,0(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:29
}
20403892:	853e                	mv	a0,a5
20403894:	5432                	lw	s0,44(sp)
20403896:	6145                	addi	sp,sp,48
20403898:	8082                	ret

2040389a <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:32

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
2040389a:	7179                	addi	sp,sp,-48
2040389c:	d622                	sw	s0,44(sp)
2040389e:	1800                	addi	s0,sp,48
204038a0:	fca42e23          	sw	a0,-36(s0)
204038a4:	fcb42c23          	sw	a1,-40(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:33
    struct __metal_driver_sifive_gpio0 *gpio = (void *)ggpio;
204038a8:	fdc42783          	lw	a5,-36(s0)
204038ac:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:35

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_EN))  |= source;
204038b0:	fec42783          	lw	a5,-20(s0)
204038b4:	479c                	lw	a5,8(a5)
204038b6:	07a1                	addi	a5,a5,8
204038b8:	4398                	lw	a4,0(a5)
204038ba:	fd842783          	lw	a5,-40(s0)
204038be:	fec42683          	lw	a3,-20(s0)
204038c2:	4694                	lw	a3,8(a3)
204038c4:	06a1                	addi	a3,a3,8
204038c6:	8fd9                	or	a5,a5,a4
204038c8:	c29c                	sw	a5,0(a3)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:37

    return 0;
204038ca:	4781                	li	a5,0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:38
}
204038cc:	853e                	mv	a0,a5
204038ce:	5432                	lw	s0,44(sp)
204038d0:	6145                	addi	sp,sp,48
204038d2:	8082                	ret

204038d4 <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:41

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
204038d4:	7179                	addi	sp,sp,-48
204038d6:	d622                	sw	s0,44(sp)
204038d8:	1800                	addi	s0,sp,48
204038da:	fca42e23          	sw	a0,-36(s0)
204038de:	fcb42c23          	sw	a1,-40(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:42
    struct __metal_driver_sifive_gpio0 *gpio = (void *)ggpio;
204038e2:	fdc42783          	lw	a5,-36(s0)
204038e6:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:44

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL)) |= value;
204038ea:	fec42783          	lw	a5,-20(s0)
204038ee:	479c                	lw	a5,8(a5)
204038f0:	07b1                	addi	a5,a5,12
204038f2:	4398                	lw	a4,0(a5)
204038f4:	fd842783          	lw	a5,-40(s0)
204038f8:	fec42683          	lw	a3,-20(s0)
204038fc:	4694                	lw	a3,8(a3)
204038fe:	06b1                	addi	a3,a3,12
20403900:	8fd9                	or	a5,a5,a4
20403902:	c29c                	sw	a5,0(a3)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:46

    return 0;
20403904:	4781                	li	a5,0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:47
}
20403906:	853e                	mv	a0,a5
20403908:	5432                	lw	s0,44(sp)
2040390a:	6145                	addi	sp,sp,48
2040390c:	8082                	ret

2040390e <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:50

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
2040390e:	7179                	addi	sp,sp,-48
20403910:	d622                	sw	s0,44(sp)
20403912:	1800                	addi	s0,sp,48
20403914:	fca42e23          	sw	a0,-36(s0)
20403918:	fcb42c23          	sw	a1,-40(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:51
    struct __metal_driver_sifive_gpio0 *gpio = (void *)ggpio;
2040391c:	fdc42783          	lw	a5,-36(s0)
20403920:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:53

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL)) &= ~value;
20403924:	fec42783          	lw	a5,-20(s0)
20403928:	479c                	lw	a5,8(a5)
2040392a:	07b1                	addi	a5,a5,12
2040392c:	439c                	lw	a5,0(a5)
2040392e:	fd842703          	lw	a4,-40(s0)
20403932:	fff74713          	not	a4,a4
20403936:	86ba                	mv	a3,a4
20403938:	fec42703          	lw	a4,-20(s0)
2040393c:	4718                	lw	a4,8(a4)
2040393e:	0731                	addi	a4,a4,12
20403940:	8ff5                	and	a5,a5,a3
20403942:	c31c                	sw	a5,0(a4)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:55

    return 0;
20403944:	4781                	li	a5,0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:56
}
20403946:	853e                	mv	a0,a5
20403948:	5432                	lw	s0,44(sp)
2040394a:	6145                	addi	sp,sp,48
2040394c:	8082                	ret

2040394e <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:59

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
2040394e:	7179                	addi	sp,sp,-48
20403950:	d622                	sw	s0,44(sp)
20403952:	1800                	addi	s0,sp,48
20403954:	fca42e23          	sw	a0,-36(s0)
20403958:	fcb42c23          	sw	a1,-40(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:60
    struct __metal_driver_sifive_gpio0 *gpio = (void *)ggpio;
2040395c:	fdc42783          	lw	a5,-36(s0)
20403960:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:63

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL)) ^ value;
20403964:	fec42783          	lw	a5,-20(s0)
20403968:	479c                	lw	a5,8(a5)
2040396a:	07b1                	addi	a5,a5,12
2040396c:	4398                	lw	a4,0(a5)
2040396e:	fd842783          	lw	a5,-40(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:62
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL)) =
20403972:	fec42683          	lw	a3,-20(s0)
20403976:	4694                	lw	a3,8(a3)
20403978:	06b1                	addi	a3,a3,12
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:63
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL)) ^ value;
2040397a:	8fb9                	xor	a5,a5,a4
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:62
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL)) =
2040397c:	c29c                	sw	a5,0(a3)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:65

    return 0;
2040397e:	4781                	li	a5,0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:66
}
20403980:	853e                	mv	a0,a5
20403982:	5432                	lw	s0,44(sp)
20403984:	6145                	addi	sp,sp,48
20403986:	8082                	ret

20403988 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:69

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
20403988:	7179                	addi	sp,sp,-48
2040398a:	d622                	sw	s0,44(sp)
2040398c:	1800                	addi	s0,sp,48
2040398e:	fca42e23          	sw	a0,-36(s0)
20403992:	fcb42c23          	sw	a1,-40(s0)
20403996:	fcc42a23          	sw	a2,-44(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:70
    struct __metal_driver_sifive_gpio0 *gpio = (void *)ggpio;
2040399a:	fdc42783          	lw	a5,-36(s0)
2040399e:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:72

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_IOF_SEL)) &= ~source;
204039a2:	fec42783          	lw	a5,-20(s0)
204039a6:	479c                	lw	a5,8(a5)
204039a8:	03c78793          	addi	a5,a5,60
204039ac:	439c                	lw	a5,0(a5)
204039ae:	fd842703          	lw	a4,-40(s0)
204039b2:	fff74713          	not	a4,a4
204039b6:	86ba                	mv	a3,a4
204039b8:	fec42703          	lw	a4,-20(s0)
204039bc:	4718                	lw	a4,8(a4)
204039be:	03c70713          	addi	a4,a4,60
204039c2:	8ff5                	and	a5,a5,a3
204039c4:	c31c                	sw	a5,0(a4)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:73
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_IOF_EN))  |= dest;
204039c6:	fec42783          	lw	a5,-20(s0)
204039ca:	479c                	lw	a5,8(a5)
204039cc:	03878793          	addi	a5,a5,56
204039d0:	4398                	lw	a4,0(a5)
204039d2:	fd442783          	lw	a5,-44(s0)
204039d6:	fec42683          	lw	a3,-20(s0)
204039da:	4694                	lw	a3,8(a3)
204039dc:	03868693          	addi	a3,a3,56
204039e0:	8fd9                	or	a5,a5,a4
204039e2:	c29c                	sw	a5,0(a3)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:75

    return 0;
204039e4:	4781                	li	a5,0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:76
}
204039e6:	853e                	mv	a0,a5
204039e8:	5432                	lw	s0,44(sp)
204039ea:	6145                	addi	sp,sp,48
204039ec:	8082                	ret

204039ee <configure_spi>:
configure_spi():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:58
#define METAL_SPI_REG(offset)   (((unsigned long)(((struct __metal_driver_sifive_spi0 *)(spi))->control_base) + offset))
#define METAL_SPI_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)METAL_SPI_REG(offset)))
#define METAL_SPI_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)METAL_SPI_REG(offset)))

static int configure_spi(struct __metal_driver_sifive_spi0 *spi, struct metal_spi_config *config)
{
204039ee:	1101                	addi	sp,sp,-32
204039f0:	ce22                	sw	s0,28(sp)
204039f2:	1000                	addi	s0,sp,32
204039f4:	fea42623          	sw	a0,-20(s0)
204039f8:	feb42423          	sw	a1,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:60
    /* Set protocol */
    METAL_SPI_REGW(METAL_SPI_REG_FMT) &= ~(METAL_SPI_PROTO_MASK);
204039fc:	fec42783          	lw	a5,-20(s0)
20403a00:	47dc                	lw	a5,12(a5)
20403a02:	04078793          	addi	a5,a5,64
20403a06:	439c                	lw	a5,0(a5)
20403a08:	fec42703          	lw	a4,-20(s0)
20403a0c:	4758                	lw	a4,12(a4)
20403a0e:	04070713          	addi	a4,a4,64
20403a12:	9bf1                	andi	a5,a5,-4
20403a14:	c31c                	sw	a5,0(a4)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:61
    switch(config->protocol) {
20403a16:	fe842783          	lw	a5,-24(s0)
20403a1a:	439c                	lw	a5,0(a5)
20403a1c:	4705                	li	a4,1
20403a1e:	02e78663          	beq	a5,a4,20403a4a <configure_spi+0x5c>
20403a22:	c789                	beqz	a5,20403a2c <configure_spi+0x3e>
20403a24:	4709                	li	a4,2
20403a26:	04e78163          	beq	a5,a4,20403a68 <configure_spi+0x7a>
20403a2a:	a8b1                	j	20403a86 <configure_spi+0x98>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:63
    case METAL_SPI_SINGLE:
        METAL_SPI_REGW(METAL_SPI_REG_FMT) |= METAL_SPI_PROTO_SINGLE;
20403a2c:	fec42783          	lw	a5,-20(s0)
20403a30:	47dc                	lw	a5,12(a5)
20403a32:	04078793          	addi	a5,a5,64
20403a36:	86be                	mv	a3,a5
20403a38:	fec42783          	lw	a5,-20(s0)
20403a3c:	47dc                	lw	a5,12(a5)
20403a3e:	04078793          	addi	a5,a5,64
20403a42:	873e                	mv	a4,a5
20403a44:	429c                	lw	a5,0(a3)
20403a46:	c31c                	sw	a5,0(a4)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:64
        break;
20403a48:	a089                	j	20403a8a <configure_spi+0x9c>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:66
    case METAL_SPI_DUAL:
        METAL_SPI_REGW(METAL_SPI_REG_FMT) |= METAL_SPI_PROTO_DUAL;
20403a4a:	fec42783          	lw	a5,-20(s0)
20403a4e:	47dc                	lw	a5,12(a5)
20403a50:	04078793          	addi	a5,a5,64
20403a54:	439c                	lw	a5,0(a5)
20403a56:	fec42703          	lw	a4,-20(s0)
20403a5a:	4758                	lw	a4,12(a4)
20403a5c:	04070713          	addi	a4,a4,64
20403a60:	0017e793          	ori	a5,a5,1
20403a64:	c31c                	sw	a5,0(a4)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:67
        break;
20403a66:	a015                	j	20403a8a <configure_spi+0x9c>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:69
    case METAL_SPI_QUAD:
        METAL_SPI_REGW(METAL_SPI_REG_FMT) |= METAL_SPI_PROTO_QUAD;
20403a68:	fec42783          	lw	a5,-20(s0)
20403a6c:	47dc                	lw	a5,12(a5)
20403a6e:	04078793          	addi	a5,a5,64
20403a72:	439c                	lw	a5,0(a5)
20403a74:	fec42703          	lw	a4,-20(s0)
20403a78:	4758                	lw	a4,12(a4)
20403a7a:	04070713          	addi	a4,a4,64
20403a7e:	0027e793          	ori	a5,a5,2
20403a82:	c31c                	sw	a5,0(a4)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:70
        break;
20403a84:	a019                	j	20403a8a <configure_spi+0x9c>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:73
    default:
        /* Unsupported value */
        return -1;
20403a86:	57fd                	li	a5,-1
20403a88:	a249                	j	20403c0a <configure_spi+0x21c>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:77
    }

    /* Set Polarity */
    if(config->polarity) {
20403a8a:	fe842783          	lw	a5,-24(s0)
20403a8e:	0047c783          	lbu	a5,4(a5)
20403a92:	8b85                	andi	a5,a5,1
20403a94:	0ff7f793          	andi	a5,a5,255
20403a98:	cf91                	beqz	a5,20403ab4 <configure_spi+0xc6>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:78
        METAL_SPI_REGW(METAL_SPI_REG_SCKMODE) |= (1 << METAL_SPI_SCKMODE_PHA_SHIFT);
20403a9a:	fec42783          	lw	a5,-20(s0)
20403a9e:	47dc                	lw	a5,12(a5)
20403aa0:	0791                	addi	a5,a5,4
20403aa2:	439c                	lw	a5,0(a5)
20403aa4:	fec42703          	lw	a4,-20(s0)
20403aa8:	4758                	lw	a4,12(a4)
20403aaa:	0711                	addi	a4,a4,4
20403aac:	0017e793          	ori	a5,a5,1
20403ab0:	c31c                	sw	a5,0(a4)
20403ab2:	a821                	j	20403aca <configure_spi+0xdc>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:80
    } else {
        METAL_SPI_REGW(METAL_SPI_REG_SCKMODE) &= ~(1 << METAL_SPI_SCKMODE_PHA_SHIFT);
20403ab4:	fec42783          	lw	a5,-20(s0)
20403ab8:	47dc                	lw	a5,12(a5)
20403aba:	0791                	addi	a5,a5,4
20403abc:	439c                	lw	a5,0(a5)
20403abe:	fec42703          	lw	a4,-20(s0)
20403ac2:	4758                	lw	a4,12(a4)
20403ac4:	0711                	addi	a4,a4,4
20403ac6:	9bf9                	andi	a5,a5,-2
20403ac8:	c31c                	sw	a5,0(a4)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:84
    }

    /* Set Phase */
    if(config->phase) {
20403aca:	fe842783          	lw	a5,-24(s0)
20403ace:	0047c783          	lbu	a5,4(a5)
20403ad2:	8b89                	andi	a5,a5,2
20403ad4:	0ff7f793          	andi	a5,a5,255
20403ad8:	cf91                	beqz	a5,20403af4 <configure_spi+0x106>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:85
        METAL_SPI_REGW(METAL_SPI_REG_SCKMODE) |= (1 << METAL_SPI_SCKMODE_POL_SHIFT);
20403ada:	fec42783          	lw	a5,-20(s0)
20403ade:	47dc                	lw	a5,12(a5)
20403ae0:	0791                	addi	a5,a5,4
20403ae2:	439c                	lw	a5,0(a5)
20403ae4:	fec42703          	lw	a4,-20(s0)
20403ae8:	4758                	lw	a4,12(a4)
20403aea:	0711                	addi	a4,a4,4
20403aec:	0027e793          	ori	a5,a5,2
20403af0:	c31c                	sw	a5,0(a4)
20403af2:	a821                	j	20403b0a <configure_spi+0x11c>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:87
    } else {
        METAL_SPI_REGW(METAL_SPI_REG_SCKMODE) &= ~(1 << METAL_SPI_SCKMODE_POL_SHIFT);
20403af4:	fec42783          	lw	a5,-20(s0)
20403af8:	47dc                	lw	a5,12(a5)
20403afa:	0791                	addi	a5,a5,4
20403afc:	439c                	lw	a5,0(a5)
20403afe:	fec42703          	lw	a4,-20(s0)
20403b02:	4758                	lw	a4,12(a4)
20403b04:	0711                	addi	a4,a4,4
20403b06:	9bf5                	andi	a5,a5,-3
20403b08:	c31c                	sw	a5,0(a4)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:91
    }

    /* Set Endianness */
    if(config->little_endian) {
20403b0a:	fe842783          	lw	a5,-24(s0)
20403b0e:	0047c783          	lbu	a5,4(a5)
20403b12:	8b91                	andi	a5,a5,4
20403b14:	0ff7f793          	andi	a5,a5,255
20403b18:	c385                	beqz	a5,20403b38 <configure_spi+0x14a>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:92
        METAL_SPI_REGW(METAL_SPI_REG_FMT) |= (1 << METAL_SPI_ENDIAN_LSB);
20403b1a:	fec42783          	lw	a5,-20(s0)
20403b1e:	47dc                	lw	a5,12(a5)
20403b20:	04078793          	addi	a5,a5,64
20403b24:	439c                	lw	a5,0(a5)
20403b26:	fec42703          	lw	a4,-20(s0)
20403b2a:	4758                	lw	a4,12(a4)
20403b2c:	04070713          	addi	a4,a4,64
20403b30:	0107e793          	ori	a5,a5,16
20403b34:	c31c                	sw	a5,0(a4)
20403b36:	a831                	j	20403b52 <configure_spi+0x164>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:94
    } else {
        METAL_SPI_REGW(METAL_SPI_REG_FMT) &= ~(1 << METAL_SPI_ENDIAN_LSB);
20403b38:	fec42783          	lw	a5,-20(s0)
20403b3c:	47dc                	lw	a5,12(a5)
20403b3e:	04078793          	addi	a5,a5,64
20403b42:	439c                	lw	a5,0(a5)
20403b44:	fec42703          	lw	a4,-20(s0)
20403b48:	4758                	lw	a4,12(a4)
20403b4a:	04070713          	addi	a4,a4,64
20403b4e:	9bbd                	andi	a5,a5,-17
20403b50:	c31c                	sw	a5,0(a4)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:98
    }

    /* Always populate receive FIFO */
    METAL_SPI_REGW(METAL_SPI_REG_FMT) &= ~(1 << METAL_SPI_DISABLE_RX);
20403b52:	fec42783          	lw	a5,-20(s0)
20403b56:	47dc                	lw	a5,12(a5)
20403b58:	04078793          	addi	a5,a5,64
20403b5c:	439c                	lw	a5,0(a5)
20403b5e:	fec42703          	lw	a4,-20(s0)
20403b62:	4758                	lw	a4,12(a4)
20403b64:	04070713          	addi	a4,a4,64
20403b68:	eff7f793          	andi	a5,a5,-257
20403b6c:	c31c                	sw	a5,0(a4)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:101

    /* Set CS Active */
    if(config->cs_active_high) {
20403b6e:	fe842783          	lw	a5,-24(s0)
20403b72:	0047c783          	lbu	a5,4(a5)
20403b76:	8ba1                	andi	a5,a5,8
20403b78:	0ff7f793          	andi	a5,a5,255
20403b7c:	cb81                	beqz	a5,20403b8c <configure_spi+0x19e>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:102
        METAL_SPI_REGW(METAL_SPI_REG_CSDEF) = 0;
20403b7e:	fec42783          	lw	a5,-20(s0)
20403b82:	47dc                	lw	a5,12(a5)
20403b84:	07d1                	addi	a5,a5,20
20403b86:	0007a023          	sw	zero,0(a5)
20403b8a:	a801                	j	20403b9a <configure_spi+0x1ac>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:104
    } else {
        METAL_SPI_REGW(METAL_SPI_REG_CSDEF) = 1;
20403b8c:	fec42783          	lw	a5,-20(s0)
20403b90:	47dc                	lw	a5,12(a5)
20403b92:	07d1                	addi	a5,a5,20
20403b94:	873e                	mv	a4,a5
20403b96:	4785                	li	a5,1
20403b98:	c31c                	sw	a5,0(a4)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:108
    }

    /* Set frame length */
    if((METAL_SPI_REGW(METAL_SPI_REG_FMT) & METAL_SPI_FRAME_LEN_MASK) != (8 << METAL_SPI_FRAME_LEN_SHIFT)) {
20403b9a:	fec42783          	lw	a5,-20(s0)
20403b9e:	47dc                	lw	a5,12(a5)
20403ba0:	04078793          	addi	a5,a5,64
20403ba4:	4398                	lw	a4,0(a5)
20403ba6:	001f07b7          	lui	a5,0x1f0
20403baa:	8f7d                	and	a4,a4,a5
20403bac:	000807b7          	lui	a5,0x80
20403bb0:	04f70363          	beq	a4,a5,20403bf6 <configure_spi+0x208>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:109
        METAL_SPI_REGW(METAL_SPI_REG_FMT) &= ~(METAL_SPI_FRAME_LEN_MASK);
20403bb4:	fec42783          	lw	a5,-20(s0)
20403bb8:	47dc                	lw	a5,12(a5)
20403bba:	04078793          	addi	a5,a5,64 # 80040 <__heap_size+0x7fc40>
20403bbe:	4398                	lw	a4,0(a5)
20403bc0:	fec42783          	lw	a5,-20(s0)
20403bc4:	47dc                	lw	a5,12(a5)
20403bc6:	04078793          	addi	a5,a5,64
20403bca:	86be                	mv	a3,a5
20403bcc:	ffe107b7          	lui	a5,0xffe10
20403bd0:	17fd                	addi	a5,a5,-1
20403bd2:	8ff9                	and	a5,a5,a4
20403bd4:	c29c                	sw	a5,0(a3)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:110
        METAL_SPI_REGW(METAL_SPI_REG_FMT) |= (8 << METAL_SPI_FRAME_LEN_SHIFT);
20403bd6:	fec42783          	lw	a5,-20(s0)
20403bda:	47dc                	lw	a5,12(a5)
20403bdc:	04078793          	addi	a5,a5,64 # ffe10040 <metal_segment_heap_target_end+0x7fe0c040>
20403be0:	4398                	lw	a4,0(a5)
20403be2:	fec42783          	lw	a5,-20(s0)
20403be6:	47dc                	lw	a5,12(a5)
20403be8:	04078793          	addi	a5,a5,64
20403bec:	86be                	mv	a3,a5
20403bee:	000807b7          	lui	a5,0x80
20403bf2:	8fd9                	or	a5,a5,a4
20403bf4:	c29c                	sw	a5,0(a3)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:114
    }

    /* Set CS line */
    METAL_SPI_REGW(METAL_SPI_REG_CSID) = config->csid;
20403bf6:	fec42783          	lw	a5,-20(s0)
20403bfa:	47dc                	lw	a5,12(a5)
20403bfc:	07c1                	addi	a5,a5,16
20403bfe:	873e                	mv	a4,a5
20403c00:	fe842783          	lw	a5,-24(s0)
20403c04:	479c                	lw	a5,8(a5)
20403c06:	c31c                	sw	a5,0(a4)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:116

    return 0;
20403c08:	4781                	li	a5,0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:117
}
20403c0a:	853e                	mv	a0,a5
20403c0c:	4472                	lw	s0,28(sp)
20403c0e:	6105                	addi	sp,sp,32
20403c10:	8082                	ret

20403c12 <__metal_driver_sifive_spi0_transfer>:
__metal_driver_sifive_spi0_transfer():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:124
int __metal_driver_sifive_spi0_transfer(struct metal_spi *gspi,
                                      struct metal_spi_config *config,
                                      size_t len,
                                      char *tx_buf,
                                      char *rx_buf)
{
20403c12:	7139                	addi	sp,sp,-64
20403c14:	de06                	sw	ra,60(sp)
20403c16:	dc22                	sw	s0,56(sp)
20403c18:	0080                	addi	s0,sp,64
20403c1a:	fca42e23          	sw	a0,-36(s0)
20403c1e:	fcb42c23          	sw	a1,-40(s0)
20403c22:	fcc42a23          	sw	a2,-44(s0)
20403c26:	fcd42823          	sw	a3,-48(s0)
20403c2a:	fce42623          	sw	a4,-52(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:125
    struct __metal_driver_sifive_spi0 *spi = (void *)gspi;
20403c2e:	fdc42783          	lw	a5,-36(s0)
20403c32:	fef42423          	sw	a5,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:126
    int rc = 0;
20403c36:	fe042223          	sw	zero,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:127
    int rxdata = 0;
20403c3a:	fe042023          	sw	zero,-32(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:129

    rc = configure_spi(spi, config);
20403c3e:	fd842583          	lw	a1,-40(s0)
20403c42:	fe842503          	lw	a0,-24(s0)
20403c46:	3365                	jal	204039ee <configure_spi>
20403c48:	fea42223          	sw	a0,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:130
    if(rc != 0) {
20403c4c:	fe442783          	lw	a5,-28(s0)
20403c50:	c781                	beqz	a5,20403c58 <__metal_driver_sifive_spi0_transfer+0x46>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:131
        return rc;
20403c52:	fe442783          	lw	a5,-28(s0)
20403c56:	a0c9                	j	20403d18 <__metal_driver_sifive_spi0_transfer+0x106>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:135
    }

    /* Hold the chip select line for all len transferred */
    METAL_SPI_REGW(METAL_SPI_REG_CSMODE) = METAL_SPI_CSMODE_HOLD;
20403c58:	fe842783          	lw	a5,-24(s0)
20403c5c:	47dc                	lw	a5,12(a5)
20403c5e:	07e1                	addi	a5,a5,24
20403c60:	873e                	mv	a4,a5
20403c62:	4789                	li	a5,2
20403c64:	c31c                	sw	a5,0(a4)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:137

    for(int i = 0; i < len; i++) {
20403c66:	fe042623          	sw	zero,-20(s0)
20403c6a:	a045                	j	20403d0a <__metal_driver_sifive_spi0_transfer+0xf8>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:139
        /* Wait for TXFIFO to not be full */
        while(METAL_SPI_REGW(METAL_SPI_REG_TXDATA) & METAL_SPI_TXDATA_FULL) ;
20403c6c:	0001                	nop
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:139 (discriminator 1)
20403c6e:	fe842783          	lw	a5,-24(s0)
20403c72:	47dc                	lw	a5,12(a5)
20403c74:	04878793          	addi	a5,a5,72 # 80048 <__heap_size+0x7fc48>
20403c78:	439c                	lw	a5,0(a5)
20403c7a:	fe07cae3          	bltz	a5,20403c6e <__metal_driver_sifive_spi0_transfer+0x5c>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:142

        /* Transfer byte */
        if(tx_buf) {
20403c7e:	fd042783          	lw	a5,-48(s0)
20403c82:	cf99                	beqz	a5,20403ca0 <__metal_driver_sifive_spi0_transfer+0x8e>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:143
            METAL_SPI_REGW(METAL_SPI_REG_TXDATA) = tx_buf[i];
20403c84:	fec42783          	lw	a5,-20(s0)
20403c88:	fd042703          	lw	a4,-48(s0)
20403c8c:	97ba                	add	a5,a5,a4
20403c8e:	0007c703          	lbu	a4,0(a5)
20403c92:	fe842783          	lw	a5,-24(s0)
20403c96:	47dc                	lw	a5,12(a5)
20403c98:	04878793          	addi	a5,a5,72
20403c9c:	c398                	sw	a4,0(a5)
20403c9e:	a801                	j	20403cae <__metal_driver_sifive_spi0_transfer+0x9c>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:145
        } else {
            METAL_SPI_REGW(METAL_SPI_REG_TXDATA) = 0;
20403ca0:	fe842783          	lw	a5,-24(s0)
20403ca4:	47dc                	lw	a5,12(a5)
20403ca6:	04878793          	addi	a5,a5,72
20403caa:	0007a023          	sw	zero,0(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:148
        }

        if(i == (len - 1)) {
20403cae:	fd442783          	lw	a5,-44(s0)
20403cb2:	fff78713          	addi	a4,a5,-1
20403cb6:	fec42783          	lw	a5,-20(s0)
20403cba:	00f71863          	bne	a4,a5,20403cca <__metal_driver_sifive_spi0_transfer+0xb8>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:151
            /* On the last byte, set CSMODE to auto so that the chip select
             * transitions back to high */
            METAL_SPI_REGW(METAL_SPI_REG_CSMODE) = METAL_SPI_CSMODE_AUTO;
20403cbe:	fe842783          	lw	a5,-24(s0)
20403cc2:	47dc                	lw	a5,12(a5)
20403cc4:	07e1                	addi	a5,a5,24
20403cc6:	0007a023          	sw	zero,0(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:155
        }

        /* Wait for RXFIFO to not be empty */
        while((rxdata = METAL_SPI_REGW(METAL_SPI_REG_RXDATA)) & METAL_SPI_RXDATA_EMPTY) ;
20403cca:	0001                	nop
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:155 (discriminator 1)
20403ccc:	fe842783          	lw	a5,-24(s0)
20403cd0:	47dc                	lw	a5,12(a5)
20403cd2:	04c78793          	addi	a5,a5,76
20403cd6:	439c                	lw	a5,0(a5)
20403cd8:	fef42023          	sw	a5,-32(s0)
20403cdc:	fe042783          	lw	a5,-32(s0)
20403ce0:	fe07c6e3          	bltz	a5,20403ccc <__metal_driver_sifive_spi0_transfer+0xba>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:157

        if(rx_buf) {
20403ce4:	fcc42783          	lw	a5,-52(s0)
20403ce8:	cf81                	beqz	a5,20403d00 <__metal_driver_sifive_spi0_transfer+0xee>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:158
            rx_buf[i] = (char) (rxdata & 0xFF);
20403cea:	fec42783          	lw	a5,-20(s0)
20403cee:	fcc42703          	lw	a4,-52(s0)
20403cf2:	97ba                	add	a5,a5,a4
20403cf4:	fe042703          	lw	a4,-32(s0)
20403cf8:	0ff77713          	andi	a4,a4,255
20403cfc:	00e78023          	sb	a4,0(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:137 (discriminator 2)
    for(int i = 0; i < len; i++) {
20403d00:	fec42783          	lw	a5,-20(s0)
20403d04:	0785                	addi	a5,a5,1
20403d06:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:137 (discriminator 1)
20403d0a:	fec42783          	lw	a5,-20(s0)
20403d0e:	fd442703          	lw	a4,-44(s0)
20403d12:	f4e7ede3          	bltu	a5,a4,20403c6c <__metal_driver_sifive_spi0_transfer+0x5a>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:162
        }
    }

    return 0;
20403d16:	4781                	li	a5,0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:163
}
20403d18:	853e                	mv	a0,a5
20403d1a:	50f2                	lw	ra,60(sp)
20403d1c:	5462                	lw	s0,56(sp)
20403d1e:	6121                	addi	sp,sp,64
20403d20:	8082                	ret

20403d22 <__metal_driver_sifive_spi0_get_baud_rate>:
__metal_driver_sifive_spi0_get_baud_rate():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:166

int __metal_driver_sifive_spi0_get_baud_rate(struct metal_spi *gspi)
{
20403d22:	7179                	addi	sp,sp,-48
20403d24:	d622                	sw	s0,44(sp)
20403d26:	1800                	addi	s0,sp,48
20403d28:	fca42e23          	sw	a0,-36(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:167
    struct __metal_driver_sifive_spi0 *spi = (void *)gspi;
20403d2c:	fdc42783          	lw	a5,-36(s0)
20403d30:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:168
    return spi->baud_rate;
20403d34:	fec42783          	lw	a5,-20(s0)
20403d38:	4bdc                	lw	a5,20(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:169
}
20403d3a:	853e                	mv	a0,a5
20403d3c:	5432                	lw	s0,44(sp)
20403d3e:	6145                	addi	sp,sp,48
20403d40:	8082                	ret

20403d42 <__metal_driver_sifive_spi0_set_baud_rate>:
__metal_driver_sifive_spi0_set_baud_rate():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:172

int __metal_driver_sifive_spi0_set_baud_rate(struct metal_spi *gspi, int baud_rate)
{
20403d42:	7179                	addi	sp,sp,-48
20403d44:	d606                	sw	ra,44(sp)
20403d46:	d422                	sw	s0,40(sp)
20403d48:	1800                	addi	s0,sp,48
20403d4a:	fca42e23          	sw	a0,-36(s0)
20403d4e:	fcb42c23          	sw	a1,-40(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:173
    struct __metal_driver_sifive_spi0 *spi = (void *)gspi;
20403d52:	fdc42783          	lw	a5,-36(s0)
20403d56:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:175

    spi->baud_rate = baud_rate;
20403d5a:	fd842703          	lw	a4,-40(s0)
20403d5e:	fec42783          	lw	a5,-20(s0)
20403d62:	cbd8                	sw	a4,20(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:177

    if (spi->clock != NULL) {
20403d64:	fec42783          	lw	a5,-20(s0)
20403d68:	479c                	lw	a5,8(a5)
20403d6a:	c7bd                	beqz	a5,20403dd8 <__metal_driver_sifive_spi0_set_baud_rate+0x96>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:178
        long clock_rate = spi->clock->vtable->get_rate_hz(spi->clock);
20403d6c:	fec42783          	lw	a5,-20(s0)
20403d70:	479c                	lw	a5,8(a5)
20403d72:	439c                	lw	a5,0(a5)
20403d74:	4398                	lw	a4,0(a5)
20403d76:	fec42783          	lw	a5,-20(s0)
20403d7a:	479c                	lw	a5,8(a5)
20403d7c:	853e                	mv	a0,a5
20403d7e:	9702                	jalr	a4
20403d80:	fea42423          	sw	a0,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:181

        /* Calculate divider */
        long div = (clock_rate / (2 * baud_rate)) - 1;
20403d84:	fd842783          	lw	a5,-40(s0)
20403d88:	0786                	slli	a5,a5,0x1
20403d8a:	fe842703          	lw	a4,-24(s0)
20403d8e:	02f747b3          	div	a5,a4,a5
20403d92:	17fd                	addi	a5,a5,-1
20403d94:	fef42223          	sw	a5,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:183

        if(div > METAL_SPI_SCKDIV_MASK) {
20403d98:	fe442703          	lw	a4,-28(s0)
20403d9c:	6785                	lui	a5,0x1
20403d9e:	00f74463          	blt	a4,a5,20403da6 <__metal_driver_sifive_spi0_set_baud_rate+0x64>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:186
            /* The requested baud rate is lower than we can support at
             * the current clock rate */
            return -1;
20403da2:	57fd                	li	a5,-1
20403da4:	a81d                	j	20403dda <__metal_driver_sifive_spi0_set_baud_rate+0x98>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:190
        }

        /* Set divider */
        METAL_SPI_REGW(METAL_SPI_REG_SCKDIV) &= ~METAL_SPI_SCKDIV_MASK;
20403da6:	fec42783          	lw	a5,-20(s0)
20403daa:	47dc                	lw	a5,12(a5)
20403dac:	4398                	lw	a4,0(a5)
20403dae:	fec42783          	lw	a5,-20(s0)
20403db2:	47dc                	lw	a5,12(a5)
20403db4:	86be                	mv	a3,a5
20403db6:	77fd                	lui	a5,0xfffff
20403db8:	8ff9                	and	a5,a5,a4
20403dba:	c29c                	sw	a5,0(a3)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:191
        METAL_SPI_REGW(METAL_SPI_REG_SCKDIV) |= (div & METAL_SPI_SCKDIV_MASK);
20403dbc:	fec42783          	lw	a5,-20(s0)
20403dc0:	47dc                	lw	a5,12(a5)
20403dc2:	4398                	lw	a4,0(a5)
20403dc4:	fe442683          	lw	a3,-28(s0)
20403dc8:	6785                	lui	a5,0x1
20403dca:	17fd                	addi	a5,a5,-1
20403dcc:	8ff5                	and	a5,a5,a3
20403dce:	fec42683          	lw	a3,-20(s0)
20403dd2:	46d4                	lw	a3,12(a3)
20403dd4:	8fd9                	or	a5,a5,a4
20403dd6:	c29c                	sw	a5,0(a3)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:193
    }
    return 0;
20403dd8:	4781                	li	a5,0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:194
}
20403dda:	853e                	mv	a0,a5
20403ddc:	50b2                	lw	ra,44(sp)
20403dde:	5422                	lw	s0,40(sp)
20403de0:	6145                	addi	sp,sp,48
20403de2:	8082                	ret

20403de4 <pre_rate_change_callback>:
pre_rate_change_callback():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:197

static void pre_rate_change_callback(void *priv)
{
20403de4:	7179                	addi	sp,sp,-48
20403de6:	d622                	sw	s0,44(sp)
20403de8:	1800                	addi	s0,sp,48
20403dea:	fca42e23          	sw	a0,-36(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:198
    struct __metal_driver_sifive_spi0 *spi = priv;
20403dee:	fdc42783          	lw	a5,-36(s0)
20403df2:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:203

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to zero and waiting until an interrupt is pending */

    METAL_SPI_REGW(METAL_SPI_REG_TXMARK) &= ~(METAL_SPI_TXMARK_MASK);
20403df6:	fec42783          	lw	a5,-20(s0)
20403dfa:	47dc                	lw	a5,12(a5)
20403dfc:	05078793          	addi	a5,a5,80 # 1050 <__heap_size+0xc50>
20403e00:	439c                	lw	a5,0(a5)
20403e02:	fec42703          	lw	a4,-20(s0)
20403e06:	4758                	lw	a4,12(a4)
20403e08:	05070713          	addi	a4,a4,80
20403e0c:	9bf1                	andi	a5,a5,-4
20403e0e:	c31c                	sw	a5,0(a4)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:205

    while((METAL_SPI_REGW(METAL_SPI_REG_IP) & METAL_SPI_TXWM) == 0) ;
20403e10:	0001                	nop
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:205 (discriminator 1)
20403e12:	fec42783          	lw	a5,-20(s0)
20403e16:	47dc                	lw	a5,12(a5)
20403e18:	07478793          	addi	a5,a5,116
20403e1c:	439c                	lw	a5,0(a5)
20403e1e:	8b85                	andi	a5,a5,1
20403e20:	dbed                	beqz	a5,20403e12 <pre_rate_change_callback+0x2e>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:206
}
20403e22:	0001                	nop
20403e24:	5432                	lw	s0,44(sp)
20403e26:	6145                	addi	sp,sp,48
20403e28:	8082                	ret

20403e2a <post_rate_change_callback>:
post_rate_change_callback():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:209

static void post_rate_change_callback(void *priv)
{
20403e2a:	7179                	addi	sp,sp,-48
20403e2c:	d606                	sw	ra,44(sp)
20403e2e:	d422                	sw	s0,40(sp)
20403e30:	1800                	addi	s0,sp,48
20403e32:	fca42e23          	sw	a0,-36(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:210
    struct __metal_driver_sifive_spi0 *spi = priv;
20403e36:	fdc42783          	lw	a5,-36(s0)
20403e3a:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:211
    metal_spi_set_baud_rate(&spi->spi, spi->baud_rate);
20403e3e:	fec42703          	lw	a4,-20(s0)
20403e42:	fec42783          	lw	a5,-20(s0)
20403e46:	4bdc                	lw	a5,20(a5)
20403e48:	85be                	mv	a1,a5
20403e4a:	853a                	mv	a0,a4
20403e4c:	d53fd0ef          	jal	ra,20401b9e <metal_spi_set_baud_rate>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:212
}
20403e50:	0001                	nop
20403e52:	50b2                	lw	ra,44(sp)
20403e54:	5422                	lw	s0,40(sp)
20403e56:	6145                	addi	sp,sp,48
20403e58:	8082                	ret

20403e5a <__metal_driver_sifive_spi0_init>:
__metal_driver_sifive_spi0_init():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:215

void __metal_driver_sifive_spi0_init(struct metal_spi *gspi, int baud_rate)
{
20403e5a:	7179                	addi	sp,sp,-48
20403e5c:	d606                	sw	ra,44(sp)
20403e5e:	d422                	sw	s0,40(sp)
20403e60:	1800                	addi	s0,sp,48
20403e62:	fca42e23          	sw	a0,-36(s0)
20403e66:	fcb42c23          	sw	a1,-40(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:216
    struct __metal_driver_sifive_spi0 *spi = (void *)(gspi);
20403e6a:	fdc42783          	lw	a5,-36(s0)
20403e6e:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:218

    if(spi->clock != NULL) {
20403e72:	fec42783          	lw	a5,-20(s0)
20403e76:	479c                	lw	a5,8(a5)
20403e78:	c79d                	beqz	a5,20403ea6 <__metal_driver_sifive_spi0_init+0x4c>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:219
        metal_clock_register_pre_rate_change_callback(spi->clock, &pre_rate_change_callback, spi);
20403e7a:	fec42783          	lw	a5,-20(s0)
20403e7e:	4798                	lw	a4,8(a5)
20403e80:	fec42603          	lw	a2,-20(s0)
20403e84:	204047b7          	lui	a5,0x20404
20403e88:	de478593          	addi	a1,a5,-540 # 20403de4 <pre_rate_change_callback>
20403e8c:	853a                	mv	a0,a4
20403e8e:	2ed5                	jal	20404282 <metal_clock_register_pre_rate_change_callback>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:220
        metal_clock_register_post_rate_change_callback(spi->clock, &post_rate_change_callback, spi);
20403e90:	fec42783          	lw	a5,-20(s0)
20403e94:	4798                	lw	a4,8(a5)
20403e96:	fec42603          	lw	a2,-20(s0)
20403e9a:	204047b7          	lui	a5,0x20404
20403e9e:	e2a78593          	addi	a1,a5,-470 # 20403e2a <post_rate_change_callback>
20403ea2:	853a                	mv	a0,a4
20403ea4:	2131                	jal	204042b0 <metal_clock_register_post_rate_change_callback>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:223
    }

    metal_spi_set_baud_rate(&(spi->spi), baud_rate);
20403ea6:	fec42783          	lw	a5,-20(s0)
20403eaa:	fd842583          	lw	a1,-40(s0)
20403eae:	853e                	mv	a0,a5
20403eb0:	ceffd0ef          	jal	ra,20401b9e <metal_spi_set_baud_rate>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:225

    if (spi->pinmux != NULL) {
20403eb4:	fec42783          	lw	a5,-20(s0)
20403eb8:	4f9c                	lw	a5,24(a5)
20403eba:	c78d                	beqz	a5,20403ee4 <__metal_driver_sifive_spi0_init+0x8a>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:226
        spi->pinmux->vtable->gpio.enable_io(
20403ebc:	fec42783          	lw	a5,-20(s0)
20403ec0:	4f9c                	lw	a5,24(a5)
20403ec2:	43dc                	lw	a5,4(a5)
20403ec4:	0187a803          	lw	a6,24(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:227
            (struct metal_gpio *) spi->pinmux,
20403ec8:	fec42783          	lw	a5,-20(s0)
20403ecc:	4f98                	lw	a4,24(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:228
            spi->pinmux_output_selector,
20403ece:	fec42783          	lw	a5,-20(s0)
20403ed2:	4fdc                	lw	a5,28(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:226
        spi->pinmux->vtable->gpio.enable_io(
20403ed4:	86be                	mv	a3,a5
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:229
            spi->pinmux_source_selector
20403ed6:	fec42783          	lw	a5,-20(s0)
20403eda:	539c                	lw	a5,32(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:226
        spi->pinmux->vtable->gpio.enable_io(
20403edc:	863e                	mv	a2,a5
20403ede:	85b6                	mv	a1,a3
20403ee0:	853a                	mv	a0,a4
20403ee2:	9802                	jalr	a6
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,spi0.c:232
        );
    }
}
20403ee4:	0001                	nop
20403ee6:	50b2                	lw	ra,44(sp)
20403ee8:	5422                	lw	s0,40(sp)
20403eea:	6145                	addi	sp,sp,48
20403eec:	8082                	ret

20403eee <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:37
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
20403eee:	7179                	addi	sp,sp,-48
20403ef0:	d622                	sw	s0,44(sp)
20403ef2:	1800                	addi	s0,sp,48
20403ef4:	fca42e23          	sw	a0,-36(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:38
    struct __metal_driver_sifive_uart0 *uart0 = (void *)uart;
20403ef8:	fdc42783          	lw	a5,-36(s0)
20403efc:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:39
    return (struct metal_interrupt *)uart0->interrupt_parent;
20403f00:	fec42783          	lw	a5,-20(s0)
20403f04:	53dc                	lw	a5,36(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:40
}
20403f06:	853e                	mv	a0,a5
20403f08:	5432                	lw	s0,44(sp)
20403f0a:	6145                	addi	sp,sp,48
20403f0c:	8082                	ret

20403f0e <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:43

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
20403f0e:	7179                	addi	sp,sp,-48
20403f10:	d622                	sw	s0,44(sp)
20403f12:	1800                	addi	s0,sp,48
20403f14:	fca42e23          	sw	a0,-36(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:44
    struct __metal_driver_sifive_uart0 *uart0 = (void *)uart;
20403f18:	fdc42783          	lw	a5,-36(s0)
20403f1c:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:45
    return (uart0->interrupt_line + METAL_INTERRUPT_ID_GL0);
20403f20:	fec42783          	lw	a5,-20(s0)
20403f24:	57dc                	lw	a5,44(a5)
20403f26:	02078793          	addi	a5,a5,32
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:46
}
20403f2a:	853e                	mv	a0,a5
20403f2c:	5432                	lw	s0,44(sp)
20403f2e:	6145                	addi	sp,sp,48
20403f30:	8082                	ret

20403f32 <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:49

int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, unsigned char c)
{
20403f32:	1101                	addi	sp,sp,-32
20403f34:	ce22                	sw	s0,28(sp)
20403f36:	1000                	addi	s0,sp,32
20403f38:	fea42623          	sw	a0,-20(s0)
20403f3c:	87ae                	mv	a5,a1
20403f3e:	fef405a3          	sb	a5,-21(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:50
    while ((UART_REGW(UART_REG_TXDATA) & UART_TXFULL) != 0) { }
20403f42:	0001                	nop
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:50 (discriminator 1)
20403f44:	fec42783          	lw	a5,-20(s0)
20403f48:	47dc                	lw	a5,12(a5)
20403f4a:	439c                	lw	a5,0(a5)
20403f4c:	fe07cce3          	bltz	a5,20403f44 <__metal_driver_sifive_uart0_putc+0x12>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:51
    UART_REGW(UART_REG_TXDATA) = c;
20403f50:	fec42783          	lw	a5,-20(s0)
20403f54:	47dc                	lw	a5,12(a5)
20403f56:	873e                	mv	a4,a5
20403f58:	feb44783          	lbu	a5,-21(s0)
20403f5c:	c31c                	sw	a5,0(a4)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:52
    return 0;
20403f5e:	4781                	li	a5,0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:53
}
20403f60:	853e                	mv	a0,a5
20403f62:	4472                	lw	s0,28(sp)
20403f64:	6105                	addi	sp,sp,32
20403f66:	8082                	ret

20403f68 <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:56

int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, unsigned char *c)
{
20403f68:	7179                	addi	sp,sp,-48
20403f6a:	d622                	sw	s0,44(sp)
20403f6c:	1800                	addi	s0,sp,48
20403f6e:	fca42e23          	sw	a0,-36(s0)
20403f72:	fcb42c23          	sw	a1,-40(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:57
    uint32_t ch = UART_RXEMPTY;
20403f76:	800007b7          	lui	a5,0x80000
20403f7a:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:58
    while (ch & UART_RXEMPTY) {
20403f7e:	a801                	j	20403f8e <__metal_driver_sifive_uart0_getc+0x26>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:59
        ch = UART_REGW(UART_REG_RXDATA);
20403f80:	fdc42783          	lw	a5,-36(s0)
20403f84:	47dc                	lw	a5,12(a5)
20403f86:	0791                	addi	a5,a5,4
20403f88:	439c                	lw	a5,0(a5)
20403f8a:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:58
    while (ch & UART_RXEMPTY) {
20403f8e:	fec42783          	lw	a5,-20(s0)
20403f92:	fe07c7e3          	bltz	a5,20403f80 <__metal_driver_sifive_uart0_getc+0x18>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:61
    }
    *c = ch & 0xff;
20403f96:	fec42783          	lw	a5,-20(s0)
20403f9a:	0ff7f713          	andi	a4,a5,255
20403f9e:	fd842783          	lw	a5,-40(s0)
20403fa2:	00e78023          	sb	a4,0(a5) # 80000000 <metal_segment_heap_target_end+0xffffc000>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:62
    return 0;
20403fa6:	4781                	li	a5,0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:63
}
20403fa8:	853e                	mv	a0,a5
20403faa:	5432                	lw	s0,44(sp)
20403fac:	6145                	addi	sp,sp,48
20403fae:	8082                	ret

20403fb0 <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:66

int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
20403fb0:	7179                	addi	sp,sp,-48
20403fb2:	d622                	sw	s0,44(sp)
20403fb4:	1800                	addi	s0,sp,48
20403fb6:	fca42e23          	sw	a0,-36(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:67
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20403fba:	fdc42783          	lw	a5,-36(s0)
20403fbe:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:68
    return uart->baud_rate;
20403fc2:	fec42783          	lw	a5,-20(s0)
20403fc6:	4bdc                	lw	a5,20(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:69
}
20403fc8:	853e                	mv	a0,a5
20403fca:	5432                	lw	s0,44(sp)
20403fcc:	6145                	addi	sp,sp,48
20403fce:	8082                	ret

20403fd0 <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:72

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
20403fd0:	7179                	addi	sp,sp,-48
20403fd2:	d606                	sw	ra,44(sp)
20403fd4:	d422                	sw	s0,40(sp)
20403fd6:	1800                	addi	s0,sp,48
20403fd8:	fca42e23          	sw	a0,-36(s0)
20403fdc:	fcb42c23          	sw	a1,-40(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:73
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20403fe0:	fdc42783          	lw	a5,-36(s0)
20403fe4:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:75

    uart->baud_rate = baud_rate;
20403fe8:	fd842703          	lw	a4,-40(s0)
20403fec:	fec42783          	lw	a5,-20(s0)
20403ff0:	cbd8                	sw	a4,20(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:77

    if (uart->clock != NULL) {
20403ff2:	fec42783          	lw	a5,-20(s0)
20403ff6:	479c                	lw	a5,8(a5)
20403ff8:	c3b5                	beqz	a5,2040405c <__metal_driver_sifive_uart0_set_baud_rate+0x8c>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:78
        long clock_rate = uart->clock->vtable->get_rate_hz(uart->clock);
20403ffa:	fec42783          	lw	a5,-20(s0)
20403ffe:	479c                	lw	a5,8(a5)
20404000:	439c                	lw	a5,0(a5)
20404002:	4398                	lw	a4,0(a5)
20404004:	fec42783          	lw	a5,-20(s0)
20404008:	479c                	lw	a5,8(a5)
2040400a:	853e                	mv	a0,a5
2040400c:	9702                	jalr	a4
2040400e:	fea42423          	sw	a0,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:79
        UART_REGW(UART_REG_DIV) = clock_rate / baud_rate - 1;
20404012:	fe842703          	lw	a4,-24(s0)
20404016:	fd842783          	lw	a5,-40(s0)
2040401a:	02f747b3          	div	a5,a4,a5
2040401e:	fff78713          	addi	a4,a5,-1
20404022:	fec42783          	lw	a5,-20(s0)
20404026:	47dc                	lw	a5,12(a5)
20404028:	07e1                	addi	a5,a5,24
2040402a:	c398                	sw	a4,0(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:80
        UART_REGW(UART_REG_TXCTRL) |= UART_TXEN;
2040402c:	fec42783          	lw	a5,-20(s0)
20404030:	47dc                	lw	a5,12(a5)
20404032:	07a1                	addi	a5,a5,8
20404034:	439c                	lw	a5,0(a5)
20404036:	fec42703          	lw	a4,-20(s0)
2040403a:	4758                	lw	a4,12(a4)
2040403c:	0721                	addi	a4,a4,8
2040403e:	0017e793          	ori	a5,a5,1
20404042:	c31c                	sw	a5,0(a4)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:81
        UART_REGW(UART_REG_RXCTRL) |= UART_RXEN;
20404044:	fec42783          	lw	a5,-20(s0)
20404048:	47dc                	lw	a5,12(a5)
2040404a:	07b1                	addi	a5,a5,12
2040404c:	439c                	lw	a5,0(a5)
2040404e:	fec42703          	lw	a4,-20(s0)
20404052:	4758                	lw	a4,12(a4)
20404054:	0731                	addi	a4,a4,12
20404056:	0017e793          	ori	a5,a5,1
2040405a:	c31c                	sw	a5,0(a4)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:83
    }
    return 0;
2040405c:	4781                	li	a5,0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:84
}
2040405e:	853e                	mv	a0,a5
20404060:	50b2                	lw	ra,44(sp)
20404062:	5422                	lw	s0,40(sp)
20404064:	6145                	addi	sp,sp,48
20404066:	8082                	ret

20404068 <pre_rate_change_callback>:
pre_rate_change_callback():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:87

static void pre_rate_change_callback(void *priv)
{
20404068:	7139                	addi	sp,sp,-64
2040406a:	de06                	sw	ra,60(sp)
2040406c:	dc22                	sw	s0,56(sp)
2040406e:	0080                	addi	s0,sp,64
20404070:	fca42623          	sw	a0,-52(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:88
    struct __metal_driver_sifive_uart0 *uart = priv;
20404074:	fcc42783          	lw	a5,-52(s0)
20404078:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:93

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(UART_REG_TXCTRL) &= ~(UART_TXCNT(0x7));
2040407c:	fec42783          	lw	a5,-20(s0)
20404080:	47dc                	lw	a5,12(a5)
20404082:	07a1                	addi	a5,a5,8
20404084:	4398                	lw	a4,0(a5)
20404086:	fec42783          	lw	a5,-20(s0)
2040408a:	47dc                	lw	a5,12(a5)
2040408c:	07a1                	addi	a5,a5,8
2040408e:	86be                	mv	a3,a5
20404090:	fff907b7          	lui	a5,0xfff90
20404094:	17fd                	addi	a5,a5,-1
20404096:	8ff9                	and	a5,a5,a4
20404098:	c29c                	sw	a5,0(a3)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:94
    UART_REGW(UART_REG_TXCTRL) |= UART_TXCNT(1);
2040409a:	fec42783          	lw	a5,-20(s0)
2040409e:	47dc                	lw	a5,12(a5)
204040a0:	07a1                	addi	a5,a5,8
204040a2:	4398                	lw	a4,0(a5)
204040a4:	fec42783          	lw	a5,-20(s0)
204040a8:	47dc                	lw	a5,12(a5)
204040aa:	07a1                	addi	a5,a5,8
204040ac:	86be                	mv	a3,a5
204040ae:	67c1                	lui	a5,0x10
204040b0:	8fd9                	or	a5,a5,a4
204040b2:	c29c                	sw	a5,0(a3)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:96

    while((UART_REGW(UART_REG_IP) & UART_TXWM) == 0) ;
204040b4:	0001                	nop
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:96 (discriminator 1)
204040b6:	fec42783          	lw	a5,-20(s0)
204040ba:	47dc                	lw	a5,12(a5)
204040bc:	07d1                	addi	a5,a5,20
204040be:	439c                	lw	a5,0(a5)
204040c0:	8b85                	andi	a5,a5,1
204040c2:	dbf5                	beqz	a5,204040b6 <pre_rate_change_callback+0x4e>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:102

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(UART_REG_TXCTRL) & (1 << 1)) ? 9 : 10;
204040c4:	fec42783          	lw	a5,-20(s0)
204040c8:	47dc                	lw	a5,12(a5)
204040ca:	07a1                	addi	a5,a5,8
204040cc:	439c                	lw	a5,0(a5)
204040ce:	8b89                	andi	a5,a5,2
204040d0:	c399                	beqz	a5,204040d6 <pre_rate_change_callback+0x6e>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:102 (discriminator 1)
204040d2:	47a5                	li	a5,9
204040d4:	a011                	j	204040d8 <pre_rate_change_callback+0x70>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:102 (discriminator 2)
204040d6:	47a9                	li	a5,10
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:102 (discriminator 4)
204040d8:	fef42423          	sw	a5,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:103 (discriminator 4)
    long clk_freq = uart->clock->vtable->get_rate_hz(uart->clock);
204040dc:	fec42783          	lw	a5,-20(s0)
204040e0:	479c                	lw	a5,8(a5)
204040e2:	439c                	lw	a5,0(a5)
204040e4:	4398                	lw	a4,0(a5)
204040e6:	fec42783          	lw	a5,-20(s0)
204040ea:	479c                	lw	a5,8(a5)
204040ec:	853e                	mv	a0,a5
204040ee:	9702                	jalr	a4
204040f0:	fea42223          	sw	a0,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:104 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
204040f4:	fe842703          	lw	a4,-24(s0)
204040f8:	fe442783          	lw	a5,-28(s0)
204040fc:	02f707b3          	mul	a5,a4,a5
20404100:	873e                	mv	a4,a5
20404102:	fec42783          	lw	a5,-20(s0)
20404106:	4bdc                	lw	a5,20(a5)
20404108:	02f757b3          	divu	a5,a4,a5
2040410c:	fef42023          	sw	a5,-32(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:106 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
20404110:	fc042e23          	sw	zero,-36(s0)
20404114:	a039                	j	20404122 <pre_rate_change_callback+0xba>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:107 (discriminator 3)
        asm("nop");
20404116:	0001                	nop
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:106 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
20404118:	fdc42783          	lw	a5,-36(s0)
2040411c:	0785                	addi	a5,a5,1
2040411e:	fcf42e23          	sw	a5,-36(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:106 (discriminator 1)
20404122:	fdc42783          	lw	a5,-36(s0)
20404126:	fe042703          	lw	a4,-32(s0)
2040412a:	fee7c6e3          	blt	a5,a4,20404116 <pre_rate_change_callback+0xae>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:108
}
2040412e:	0001                	nop
20404130:	50f2                	lw	ra,60(sp)
20404132:	5462                	lw	s0,56(sp)
20404134:	6121                	addi	sp,sp,64
20404136:	8082                	ret

20404138 <post_rate_change_callback>:
post_rate_change_callback():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:111

static void post_rate_change_callback(void *priv)
{
20404138:	7179                	addi	sp,sp,-48
2040413a:	d606                	sw	ra,44(sp)
2040413c:	d422                	sw	s0,40(sp)
2040413e:	1800                	addi	s0,sp,48
20404140:	fca42e23          	sw	a0,-36(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:112
    struct __metal_driver_sifive_uart0 *uart = priv;
20404144:	fdc42783          	lw	a5,-36(s0)
20404148:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:113
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
2040414c:	fec42703          	lw	a4,-20(s0)
20404150:	fec42783          	lw	a5,-20(s0)
20404154:	4bdc                	lw	a5,20(a5)
20404156:	85be                	mv	a1,a5
20404158:	853a                	mv	a0,a4
2040415a:	22fd                	jal	20404348 <metal_uart_set_baud_rate>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:114
}
2040415c:	0001                	nop
2040415e:	50b2                	lw	ra,44(sp)
20404160:	5422                	lw	s0,40(sp)
20404162:	6145                	addi	sp,sp,48
20404164:	8082                	ret

20404166 <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:117

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
20404166:	7179                	addi	sp,sp,-48
20404168:	d606                	sw	ra,44(sp)
2040416a:	d422                	sw	s0,40(sp)
2040416c:	1800                	addi	s0,sp,48
2040416e:	fca42e23          	sw	a0,-36(s0)
20404172:	fcb42c23          	sw	a1,-40(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:118
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
20404176:	fdc42783          	lw	a5,-36(s0)
2040417a:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:120

    if(uart->clock != NULL) {
2040417e:	fec42783          	lw	a5,-20(s0)
20404182:	479c                	lw	a5,8(a5)
20404184:	c79d                	beqz	a5,204041b2 <__metal_driver_sifive_uart0_init+0x4c>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:121
        metal_clock_register_pre_rate_change_callback(uart->clock, &pre_rate_change_callback, uart);
20404186:	fec42783          	lw	a5,-20(s0)
2040418a:	4798                	lw	a4,8(a5)
2040418c:	fec42603          	lw	a2,-20(s0)
20404190:	204047b7          	lui	a5,0x20404
20404194:	06878593          	addi	a1,a5,104 # 20404068 <pre_rate_change_callback>
20404198:	853a                	mv	a0,a4
2040419a:	20e5                	jal	20404282 <metal_clock_register_pre_rate_change_callback>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:122
        metal_clock_register_post_rate_change_callback(uart->clock, &post_rate_change_callback, uart);
2040419c:	fec42783          	lw	a5,-20(s0)
204041a0:	4798                	lw	a4,8(a5)
204041a2:	fec42603          	lw	a2,-20(s0)
204041a6:	204047b7          	lui	a5,0x20404
204041aa:	13878593          	addi	a1,a5,312 # 20404138 <post_rate_change_callback>
204041ae:	853a                	mv	a0,a4
204041b0:	2201                	jal	204042b0 <metal_clock_register_post_rate_change_callback>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:125
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
204041b2:	fec42783          	lw	a5,-20(s0)
204041b6:	fd842583          	lw	a1,-40(s0)
204041ba:	853e                	mv	a0,a5
204041bc:	2271                	jal	20404348 <metal_uart_set_baud_rate>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:127

    if (uart->pinmux != NULL) {
204041be:	fec42783          	lw	a5,-20(s0)
204041c2:	4f9c                	lw	a5,24(a5)
204041c4:	c78d                	beqz	a5,204041ee <__metal_driver_sifive_uart0_init+0x88>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:128
        uart->pinmux->vtable->gpio.enable_io(
204041c6:	fec42783          	lw	a5,-20(s0)
204041ca:	4f9c                	lw	a5,24(a5)
204041cc:	43dc                	lw	a5,4(a5)
204041ce:	0187a803          	lw	a6,24(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:129
            (struct metal_gpio *) uart->pinmux,
204041d2:	fec42783          	lw	a5,-20(s0)
204041d6:	4f98                	lw	a4,24(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:130
            uart->pinmux_output_selector,
204041d8:	fec42783          	lw	a5,-20(s0)
204041dc:	4fdc                	lw	a5,28(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:128
        uart->pinmux->vtable->gpio.enable_io(
204041de:	86be                	mv	a3,a5
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:131
            uart->pinmux_source_selector
204041e0:	fec42783          	lw	a5,-20(s0)
204041e4:	539c                	lw	a5,32(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:128
        uart->pinmux->vtable->gpio.enable_io(
204041e6:	863e                	mv	a2,a5
204041e8:	85b6                	mv	a1,a3
204041ea:	853a                	mv	a0,a4
204041ec:	9802                	jalr	a6
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:134
        );
    }
}
204041ee:	0001                	nop
204041f0:	50b2                	lw	ra,44(sp)
204041f2:	5422                	lw	s0,40(sp)
204041f4:	6145                	addi	sp,sp,48
204041f6:	8082                	ret

204041f8 <metal_clock_get_rate_hz>:
metal_clock_get_rate_hz():
/scratch/haotianw/freedom-e-sdk/freedom-metal/metal/clock.h:64
 * @brief Returns the current rate of the given clock
 *
 * @param clk The handle for the clock
 * @return The current rate of the clock in Hz
 */
inline long metal_clock_get_rate_hz(const struct metal_clock *clk) { return clk->vtable->get_rate_hz(clk); }
204041f8:	1101                	addi	sp,sp,-32
204041fa:	ce06                	sw	ra,28(sp)
204041fc:	cc22                	sw	s0,24(sp)
204041fe:	1000                	addi	s0,sp,32
20404200:	fea42623          	sw	a0,-20(s0)
20404204:	fec42783          	lw	a5,-20(s0)
20404208:	439c                	lw	a5,0(a5)
2040420a:	439c                	lw	a5,0(a5)
2040420c:	fec42503          	lw	a0,-20(s0)
20404210:	9782                	jalr	a5
20404212:	87aa                	mv	a5,a0
20404214:	853e                	mv	a0,a5
20404216:	40f2                	lw	ra,28(sp)
20404218:	4462                	lw	s0,24(sp)
2040421a:	6105                	addi	sp,sp,32
2040421c:	8082                	ret

2040421e <metal_clock_set_rate_hz>:
metal_clock_set_rate_hz():
/scratch/haotianw/freedom-e-sdk/freedom-metal/metal/clock.h:81
 *
 * Prior to and after the rate change of the clock, this will call the registered
 * pre- and post-rate change callbacks.
 */
inline long metal_clock_set_rate_hz(struct metal_clock *clk, long hz)
{
2040421e:	7179                	addi	sp,sp,-48
20404220:	d606                	sw	ra,44(sp)
20404222:	d422                	sw	s0,40(sp)
20404224:	1800                	addi	s0,sp,48
20404226:	fca42e23          	sw	a0,-36(s0)
2040422a:	fcb42c23          	sw	a1,-40(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/metal/clock.h:82
    if(clk->_pre_rate_change_callback != NULL)
2040422e:	fdc42783          	lw	a5,-36(s0)
20404232:	43dc                	lw	a5,4(a5)
20404234:	cb89                	beqz	a5,20404246 <metal_clock_set_rate_hz+0x28>
/scratch/haotianw/freedom-e-sdk/freedom-metal/metal/clock.h:83
        clk->_pre_rate_change_callback(clk->_pre_rate_change_callback_priv);
20404236:	fdc42783          	lw	a5,-36(s0)
2040423a:	43d8                	lw	a4,4(a5)
2040423c:	fdc42783          	lw	a5,-36(s0)
20404240:	479c                	lw	a5,8(a5)
20404242:	853e                	mv	a0,a5
20404244:	9702                	jalr	a4
/scratch/haotianw/freedom-e-sdk/freedom-metal/metal/clock.h:85

    long out = clk->vtable->set_rate_hz(clk, hz);
20404246:	fdc42783          	lw	a5,-36(s0)
2040424a:	439c                	lw	a5,0(a5)
2040424c:	43dc                	lw	a5,4(a5)
2040424e:	fd842583          	lw	a1,-40(s0)
20404252:	fdc42503          	lw	a0,-36(s0)
20404256:	9782                	jalr	a5
20404258:	fea42623          	sw	a0,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/metal/clock.h:87

    if (clk->_post_rate_change_callback != NULL)
2040425c:	fdc42783          	lw	a5,-36(s0)
20404260:	47dc                	lw	a5,12(a5)
20404262:	cb89                	beqz	a5,20404274 <metal_clock_set_rate_hz+0x56>
/scratch/haotianw/freedom-e-sdk/freedom-metal/metal/clock.h:88
        clk->_post_rate_change_callback(clk->_post_rate_change_callback_priv);
20404264:	fdc42783          	lw	a5,-36(s0)
20404268:	47d8                	lw	a4,12(a5)
2040426a:	fdc42783          	lw	a5,-36(s0)
2040426e:	4b9c                	lw	a5,16(a5)
20404270:	853e                	mv	a0,a5
20404272:	9702                	jalr	a4
/scratch/haotianw/freedom-e-sdk/freedom-metal/metal/clock.h:90

    return out;
20404274:	fec42783          	lw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/metal/clock.h:91
}
20404278:	853e                	mv	a0,a5
2040427a:	50b2                	lw	ra,44(sp)
2040427c:	5422                	lw	s0,40(sp)
2040427e:	6145                	addi	sp,sp,48
20404280:	8082                	ret

20404282 <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/scratch/haotianw/freedom-e-sdk/freedom-metal/metal/clock.h:101
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 * @param priv Private data for the callback handler
 */
inline void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_pre_rate_change_callback cb, void *priv)
{
20404282:	1101                	addi	sp,sp,-32
20404284:	ce22                	sw	s0,28(sp)
20404286:	1000                	addi	s0,sp,32
20404288:	fea42623          	sw	a0,-20(s0)
2040428c:	feb42423          	sw	a1,-24(s0)
20404290:	fec42223          	sw	a2,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/metal/clock.h:102
    clk->_pre_rate_change_callback = cb;
20404294:	fec42783          	lw	a5,-20(s0)
20404298:	fe842703          	lw	a4,-24(s0)
2040429c:	c3d8                	sw	a4,4(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/metal/clock.h:103
    clk->_pre_rate_change_callback_priv = priv;
2040429e:	fec42783          	lw	a5,-20(s0)
204042a2:	fe442703          	lw	a4,-28(s0)
204042a6:	c798                	sw	a4,8(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/metal/clock.h:104
}
204042a8:	0001                	nop
204042aa:	4472                	lw	s0,28(sp)
204042ac:	6105                	addi	sp,sp,32
204042ae:	8082                	ret

204042b0 <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/scratch/haotianw/freedom-e-sdk/freedom-metal/metal/clock.h:114
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 * @param priv Private data for the callback handler
 */
inline void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_post_rate_change_callback cb, void *priv)
{
204042b0:	1101                	addi	sp,sp,-32
204042b2:	ce22                	sw	s0,28(sp)
204042b4:	1000                	addi	s0,sp,32
204042b6:	fea42623          	sw	a0,-20(s0)
204042ba:	feb42423          	sw	a1,-24(s0)
204042be:	fec42223          	sw	a2,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/metal/clock.h:115
    clk->_post_rate_change_callback = cb;
204042c2:	fec42783          	lw	a5,-20(s0)
204042c6:	fe842703          	lw	a4,-24(s0)
204042ca:	c7d8                	sw	a4,12(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/metal/clock.h:116
    clk->_post_rate_change_callback_priv = priv;
204042cc:	fec42783          	lw	a5,-20(s0)
204042d0:	fe442703          	lw	a4,-28(s0)
204042d4:	cb98                	sw	a4,16(a5)
/scratch/haotianw/freedom-e-sdk/freedom-metal/metal/clock.h:117
}
204042d6:	0001                	nop
204042d8:	4472                	lw	s0,28(sp)
204042da:	6105                	addi	sp,sp,32
204042dc:	8082                	ret

204042de <metal_shutdown>:
metal_shutdown():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
# warning "There is no defined shutdown mechanism, metal_shutdown() will spin."
void metal_shutdown(int code)
{
204042de:	1101                	addi	sp,sp,-32
204042e0:	ce22                	sw	s0,28(sp)
204042e2:	1000                	addi	s0,sp,32
204042e4:	fea42623          	sw	a0,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
204042e8:	0001                	nop
204042ea:	bffd                	j	204042e8 <metal_shutdown+0xa>

204042ec <metal_uart_init>:
metal_uart_init():
/scratch/haotianw/freedom-e-sdk/freedom-metal/metal/uart.h:42
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
inline void metal_uart_init(struct metal_uart *uart, int baud_rate) { return uart->vtable->init(uart, baud_rate); }
204042ec:	1101                	addi	sp,sp,-32
204042ee:	ce06                	sw	ra,28(sp)
204042f0:	cc22                	sw	s0,24(sp)
204042f2:	1000                	addi	s0,sp,32
204042f4:	fea42623          	sw	a0,-20(s0)
204042f8:	feb42423          	sw	a1,-24(s0)
204042fc:	fec42783          	lw	a5,-20(s0)
20404300:	439c                	lw	a5,0(a5)
20404302:	439c                	lw	a5,0(a5)
20404304:	fe842583          	lw	a1,-24(s0)
20404308:	fec42503          	lw	a0,-20(s0)
2040430c:	9782                	jalr	a5
2040430e:	40f2                	lw	ra,28(sp)
20404310:	4462                	lw	s0,24(sp)
20404312:	6105                	addi	sp,sp,32
20404314:	8082                	ret

20404316 <metal_uart_putc>:
metal_uart_putc():
/scratch/haotianw/freedom-e-sdk/freedom-metal/metal/uart.h:50
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
inline int metal_uart_putc(struct metal_uart *uart, unsigned char c) { return uart->vtable->putc(uart, c); }
20404316:	1101                	addi	sp,sp,-32
20404318:	ce06                	sw	ra,28(sp)
2040431a:	cc22                	sw	s0,24(sp)
2040431c:	1000                	addi	s0,sp,32
2040431e:	fea42623          	sw	a0,-20(s0)
20404322:	87ae                	mv	a5,a1
20404324:	fef405a3          	sb	a5,-21(s0)
20404328:	fec42783          	lw	a5,-20(s0)
2040432c:	439c                	lw	a5,0(a5)
2040432e:	43d8                	lw	a4,4(a5)
20404330:	feb44783          	lbu	a5,-21(s0)
20404334:	85be                	mv	a1,a5
20404336:	fec42503          	lw	a0,-20(s0)
2040433a:	9702                	jalr	a4
2040433c:	87aa                	mv	a5,a0
2040433e:	853e                	mv	a0,a5
20404340:	40f2                	lw	ra,28(sp)
20404342:	4462                	lw	s0,24(sp)
20404344:	6105                	addi	sp,sp,32
20404346:	8082                	ret

20404348 <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/scratch/haotianw/freedom-e-sdk/freedom-metal/metal/uart.h:73
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
inline int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
20404348:	1101                	addi	sp,sp,-32
2040434a:	ce06                	sw	ra,28(sp)
2040434c:	cc22                	sw	s0,24(sp)
2040434e:	1000                	addi	s0,sp,32
20404350:	fea42623          	sw	a0,-20(s0)
20404354:	feb42423          	sw	a1,-24(s0)
20404358:	fec42783          	lw	a5,-20(s0)
2040435c:	439c                	lw	a5,0(a5)
2040435e:	4b9c                	lw	a5,16(a5)
20404360:	fe842583          	lw	a1,-24(s0)
20404364:	fec42503          	lw	a0,-20(s0)
20404368:	9782                	jalr	a5
2040436a:	87aa                	mv	a5,a0
2040436c:	853e                	mv	a0,a5
2040436e:	40f2                	lw	ra,28(sp)
20404370:	4462                	lw	s0,24(sp)
20404372:	6105                	addi	sp,sp,32
20404374:	8082                	ret

20404376 <_close>:
_close():
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
20404376:	1101                	addi	sp,sp,-32
20404378:	ce06                	sw	ra,28(sp)
2040437a:	cc22                	sw	s0,24(sp)
2040437c:	1000                	addi	s0,sp,32
2040437e:	fea42623          	sw	a0,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
20404382:	2271                	jal	2040450e <__errno>
20404384:	872a                	mv	a4,a0
20404386:	05800793          	li	a5,88
2040438a:	c31c                	sw	a5,0(a4)
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_close.c:7
  return -1;
2040438c:	57fd                	li	a5,-1
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_close.c:8
}
2040438e:	853e                	mv	a0,a5
20404390:	40f2                	lw	ra,28(sp)
20404392:	4462                	lw	s0,24(sp)
20404394:	6105                	addi	sp,sp,32
20404396:	8082                	ret

20404398 <_fstat>:
_fstat():
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
20404398:	1101                	addi	sp,sp,-32
2040439a:	ce06                	sw	ra,28(sp)
2040439c:	cc22                	sw	s0,24(sp)
2040439e:	1000                	addi	s0,sp,32
204043a0:	fea42623          	sw	a0,-20(s0)
204043a4:	feb42423          	sw	a1,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
204043a8:	229d                	jal	2040450e <__errno>
204043aa:	872a                	mv	a4,a0
204043ac:	fa800793          	li	a5,-88
204043b0:	c31c                	sw	a5,0(a4)
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:8
  return -1;
204043b2:	57fd                	li	a5,-1
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:9
}
204043b4:	853e                	mv	a0,a5
204043b6:	40f2                	lw	ra,28(sp)
204043b8:	4462                	lw	s0,24(sp)
204043ba:	6105                	addi	sp,sp,32
204043bc:	8082                	ret

204043be <_isatty>:
_isatty():
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
204043be:	1101                	addi	sp,sp,-32
204043c0:	ce22                	sw	s0,28(sp)
204043c2:	1000                	addi	s0,sp,32
204043c4:	fea42623          	sw	a0,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
204043c8:	fec42783          	lw	a5,-20(s0)
204043cc:	17fd                	addi	a5,a5,-1
204043ce:	0017b793          	seqz	a5,a5
204043d2:	0ff7f793          	andi	a5,a5,255
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:7
}
204043d6:	853e                	mv	a0,a5
204043d8:	4472                	lw	s0,28(sp)
204043da:	6105                	addi	sp,sp,32
204043dc:	8082                	ret

204043de <_lseek>:
_lseek():
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
204043de:	1101                	addi	sp,sp,-32
204043e0:	ce06                	sw	ra,28(sp)
204043e2:	cc22                	sw	s0,24(sp)
204043e4:	1000                	addi	s0,sp,32
204043e6:	fea42623          	sw	a0,-20(s0)
204043ea:	feb42423          	sw	a1,-24(s0)
204043ee:	fec42223          	sw	a2,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
204043f2:	2a31                	jal	2040450e <__errno>
204043f4:	872a                	mv	a4,a0
204043f6:	05800793          	li	a5,88
204043fa:	c31c                	sw	a5,0(a4)
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:8
  return -1;
204043fc:	57fd                	li	a5,-1
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:9
}
204043fe:	853e                	mv	a0,a5
20404400:	40f2                	lw	ra,28(sp)
20404402:	4462                	lw	s0,24(sp)
20404404:	6105                	addi	sp,sp,32
20404406:	8082                	ret

20404408 <_read>:
_read():
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
20404408:	1101                	addi	sp,sp,-32
2040440a:	ce06                	sw	ra,28(sp)
2040440c:	cc22                	sw	s0,24(sp)
2040440e:	1000                	addi	s0,sp,32
20404410:	fea42623          	sw	a0,-20(s0)
20404414:	feb42423          	sw	a1,-24(s0)
20404418:	fec42223          	sw	a2,-28(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
2040441c:	28cd                	jal	2040450e <__errno>
2040441e:	872a                	mv	a4,a0
20404420:	05800793          	li	a5,88
20404424:	c31c                	sw	a5,0(a4)
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_read.c:8
  return -1;
20404426:	57fd                	li	a5,-1
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_read.c:9
}
20404428:	853e                	mv	a0,a5
2040442a:	40f2                	lw	ra,28(sp)
2040442c:	4462                	lw	s0,24(sp)
2040442e:	6105                	addi	sp,sp,32
20404430:	8082                	ret

20404432 <_sbrk>:
_sbrk():
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
20404432:	7179                	addi	sp,sp,-48
20404434:	d622                	sw	s0,44(sp)
20404436:	1800                	addi	s0,sp,48
20404438:	fca42e23          	sw	a0,-36(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
2040443c:	8341a783          	lw	a5,-1996(gp) # 800010ec <brk>
20404440:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
20404444:	c7418713          	addi	a4,gp,-908 # 8000152c <metal_segment_stack_end>
20404448:	800047b7          	lui	a5,0x80004
2040444c:	00078793          	mv	a5,a5
20404450:	00f71463          	bne	a4,a5,20404458 <_sbrk+0x26>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    return NULL;
20404454:	4781                	li	a5,0
20404456:	a825                	j	2040448e <_sbrk+0x5c>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
20404458:	8341a703          	lw	a4,-1996(gp) # 800010ec <brk>
2040445c:	fdc42783          	lw	a5,-36(s0)
20404460:	973e                	add	a4,a4,a5
20404462:	800047b7          	lui	a5,0x80004
20404466:	00078793          	mv	a5,a5
2040446a:	00f77a63          	bgeu	a4,a5,2040447e <_sbrk+0x4c>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
2040446e:	8341a703          	lw	a4,-1996(gp) # 800010ec <brk>
20404472:	fdc42783          	lw	a5,-36(s0)
20404476:	973e                	add	a4,a4,a5
20404478:	82e1aa23          	sw	a4,-1996(gp) # 800010ec <brk>
2040447c:	a039                	j	2040448a <_sbrk+0x58>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
  } else {
    brk = &metal_segment_heap_target_end;
2040447e:	80004737          	lui	a4,0x80004
20404482:	00070713          	mv	a4,a4
20404486:	82e1aa23          	sw	a4,-1996(gp) # 800010ec <brk>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:37
  }

  return old;
2040448a:	fec42783          	lw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:38
}
2040448e:	853e                	mv	a0,a5
20404490:	5432                	lw	s0,44(sp)
20404492:	6145                	addi	sp,sp,48
20404494:	8082                	ret

20404496 <_write>:
_write():
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
20404496:	7179                	addi	sp,sp,-48
20404498:	d606                	sw	ra,44(sp)
2040449a:	d422                	sw	s0,40(sp)
2040449c:	1800                	addi	s0,sp,48
2040449e:	fca42e23          	sw	a0,-36(s0)
204044a2:	fcb42c23          	sw	a1,-40(s0)
204044a6:	fcc42a23          	sw	a2,-44(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
204044aa:	fdc42703          	lw	a4,-36(s0)
204044ae:	4785                	li	a5,1
204044b0:	00f70963          	beq	a4,a5,204044c2 <_write+0x2c>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
204044b4:	28a9                	jal	2040450e <__errno>
204044b6:	872a                	mv	a4,a0
204044b8:	05800793          	li	a5,88
204044bc:	c31c                	sw	a5,0(a4)
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_write.c:12
    return -1;
204044be:	57fd                	li	a5,-1
204044c0:	a82d                	j	204044fa <_write+0x64>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
204044c2:	fd842783          	lw	a5,-40(s0)
204044c6:	fef42423          	sw	a5,-24(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
204044ca:	fe042623          	sw	zero,-20(s0)
204044ce:	a839                	j	204044ec <_write+0x56>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
204044d0:	fe842703          	lw	a4,-24(s0)
204044d4:	fec42783          	lw	a5,-20(s0)
204044d8:	97ba                	add	a5,a5,a4
204044da:	0007c783          	lbu	a5,0(a5) # 80004000 <metal_segment_heap_target_end+0x0>
204044de:	853e                	mv	a0,a5
204044e0:	2439                	jal	204046ee <metal_tty_putc>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
204044e2:	fec42783          	lw	a5,-20(s0)
204044e6:	0785                	addi	a5,a5,1
204044e8:	fef42623          	sw	a5,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
204044ec:	fec42703          	lw	a4,-20(s0)
204044f0:	fd442783          	lw	a5,-44(s0)
204044f4:	fcf76ee3          	bltu	a4,a5,204044d0 <_write+0x3a>
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_write.c:18
  return 0;
204044f8:	4781                	li	a5,0
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_write.c:19
}
204044fa:	853e                	mv	a0,a5
204044fc:	50b2                	lw	ra,44(sp)
204044fe:	5422                	lw	s0,40(sp)
20404500:	6145                	addi	sp,sp,48
20404502:	8082                	ret

20404504 <atexit>:
atexit():
20404504:	85aa                	mv	a1,a0
20404506:	4681                	li	a3,0
20404508:	4601                	li	a2,0
2040450a:	4501                	li	a0,0
2040450c:	a8c9                	j	204045de <__register_exitproc>

2040450e <__errno>:
__errno():
2040450e:	5fbfd797          	auipc	a5,0x5fbfd
20404512:	baa78793          	addi	a5,a5,-1110 # 800010b8 <_impure_ptr>
20404516:	4388                	lw	a0,0(a5)
20404518:	8082                	ret

2040451a <exit>:
exit():
2040451a:	1141                	addi	sp,sp,-16
2040451c:	4581                	li	a1,0
2040451e:	c422                	sw	s0,8(sp)
20404520:	c606                	sw	ra,12(sp)
20404522:	842a                	mv	s0,a0
20404524:	2a31                	jal	20404640 <__call_exitprocs>
20404526:	83818793          	addi	a5,gp,-1992 # 800010f0 <_global_impure_ptr>
2040452a:	4388                	lw	a0,0(a5)
2040452c:	5d5c                	lw	a5,60(a0)
2040452e:	c391                	beqz	a5,20404532 <exit+0x18>
20404530:	9782                	jalr	a5
20404532:	8522                	mv	a0,s0
20404534:	2435                	jal	20404760 <_exit>

20404536 <__libc_fini_array>:
__libc_fini_array():
20404536:	1141                	addi	sp,sp,-16
20404538:	dfbfc797          	auipc	a5,0xdfbfc
2040453c:	ac878793          	addi	a5,a5,-1336 # 0 <__heap_size-0x400>
20404540:	c422                	sw	s0,8(sp)
20404542:	dfbfc417          	auipc	s0,0xdfbfc
20404546:	abe40413          	addi	s0,s0,-1346 # 0 <__heap_size-0x400>
2040454a:	8c1d                	sub	s0,s0,a5
2040454c:	c226                	sw	s1,4(sp)
2040454e:	c606                	sw	ra,12(sp)
20404550:	8409                	srai	s0,s0,0x2
20404552:	84be                	mv	s1,a5
20404554:	e419                	bnez	s0,20404562 <__libc_fini_array+0x2c>
20404556:	4422                	lw	s0,8(sp)
20404558:	40b2                	lw	ra,12(sp)
2040455a:	4492                	lw	s1,4(sp)
2040455c:	0141                	addi	sp,sp,16
2040455e:	bd5fb06f          	j	20400132 <_fini>
20404562:	147d                	addi	s0,s0,-1
20404564:	00241793          	slli	a5,s0,0x2
20404568:	97a6                	add	a5,a5,s1
2040456a:	439c                	lw	a5,0(a5)
2040456c:	9782                	jalr	a5
2040456e:	b7dd                	j	20404554 <__libc_fini_array+0x1e>

20404570 <__libc_init_array>:
__libc_init_array():
20404570:	1141                	addi	sp,sp,-16
20404572:	00001797          	auipc	a5,0x1
20404576:	d1b78793          	addi	a5,a5,-741 # 2040528d <__preinit_array_end>
2040457a:	c422                	sw	s0,8(sp)
2040457c:	00001417          	auipc	s0,0x1
20404580:	d1140413          	addi	s0,s0,-751 # 2040528d <__preinit_array_end>
20404584:	8c1d                	sub	s0,s0,a5
20404586:	c226                	sw	s1,4(sp)
20404588:	c04a                	sw	s2,0(sp)
2040458a:	c606                	sw	ra,12(sp)
2040458c:	8409                	srai	s0,s0,0x2
2040458e:	4481                	li	s1,0
20404590:	893e                	mv	s2,a5
20404592:	02849863          	bne	s1,s0,204045c2 <__libc_init_array+0x52>
20404596:	b9dfb0ef          	jal	ra,20400132 <_fini>
2040459a:	00001797          	auipc	a5,0x1
2040459e:	cf678793          	addi	a5,a5,-778 # 20405290 <__init_array_start>
204045a2:	00001417          	auipc	s0,0x1
204045a6:	cfa40413          	addi	s0,s0,-774 # 2040529c <__init_array_end>
204045aa:	8c1d                	sub	s0,s0,a5
204045ac:	8409                	srai	s0,s0,0x2
204045ae:	4481                	li	s1,0
204045b0:	893e                	mv	s2,a5
204045b2:	00849f63          	bne	s1,s0,204045d0 <__libc_init_array+0x60>
204045b6:	40b2                	lw	ra,12(sp)
204045b8:	4422                	lw	s0,8(sp)
204045ba:	4492                	lw	s1,4(sp)
204045bc:	4902                	lw	s2,0(sp)
204045be:	0141                	addi	sp,sp,16
204045c0:	8082                	ret
204045c2:	00249793          	slli	a5,s1,0x2
204045c6:	97ca                	add	a5,a5,s2
204045c8:	439c                	lw	a5,0(a5)
204045ca:	0485                	addi	s1,s1,1
204045cc:	9782                	jalr	a5
204045ce:	b7d1                	j	20404592 <__libc_init_array+0x22>
204045d0:	00249793          	slli	a5,s1,0x2
204045d4:	97ca                	add	a5,a5,s2
204045d6:	439c                	lw	a5,0(a5)
204045d8:	0485                	addi	s1,s1,1
204045da:	9782                	jalr	a5
204045dc:	bfd9                	j	204045b2 <__libc_init_array+0x42>

204045de <__register_exitproc>:
__register_exitproc():
204045de:	83818793          	addi	a5,gp,-1992 # 800010f0 <_global_impure_ptr>
204045e2:	4398                	lw	a4,0(a5)
204045e4:	832a                	mv	t1,a0
204045e6:	14872783          	lw	a5,328(a4) # 80004148 <metal_segment_heap_target_end+0x148>
204045ea:	e789                	bnez	a5,204045f4 <__register_exitproc+0x16>
204045ec:	14c70793          	addi	a5,a4,332
204045f0:	14f72423          	sw	a5,328(a4)
204045f4:	43d8                	lw	a4,4(a5)
204045f6:	487d                	li	a6,31
204045f8:	557d                	li	a0,-1
204045fa:	04e84263          	blt	a6,a4,2040463e <__register_exitproc+0x60>
204045fe:	00271893          	slli	a7,a4,0x2
20404602:	02030963          	beqz	t1,20404634 <__register_exitproc+0x56>
20404606:	01178533          	add	a0,a5,a7
2040460a:	08c52423          	sw	a2,136(a0) # c088 <__heap_size+0xbc88>
2040460e:	1887a803          	lw	a6,392(a5)
20404612:	4605                	li	a2,1
20404614:	00e61633          	sll	a2,a2,a4
20404618:	00c86833          	or	a6,a6,a2
2040461c:	1907a423          	sw	a6,392(a5)
20404620:	10d52423          	sw	a3,264(a0)
20404624:	4689                	li	a3,2
20404626:	00d31763          	bne	t1,a3,20404634 <__register_exitproc+0x56>
2040462a:	18c7a683          	lw	a3,396(a5)
2040462e:	8e55                	or	a2,a2,a3
20404630:	18c7a623          	sw	a2,396(a5)
20404634:	0705                	addi	a4,a4,1
20404636:	c3d8                	sw	a4,4(a5)
20404638:	97c6                	add	a5,a5,a7
2040463a:	c78c                	sw	a1,8(a5)
2040463c:	4501                	li	a0,0
2040463e:	8082                	ret

20404640 <__call_exitprocs>:
__call_exitprocs():
20404640:	7179                	addi	sp,sp,-48
20404642:	83818793          	addi	a5,gp,-1992 # 800010f0 <_global_impure_ptr>
20404646:	ce4e                	sw	s3,28(sp)
20404648:	0007a983          	lw	s3,0(a5)
2040464c:	cc52                	sw	s4,24(sp)
2040464e:	ca56                	sw	s5,20(sp)
20404650:	c85a                	sw	s6,16(sp)
20404652:	d606                	sw	ra,44(sp)
20404654:	d422                	sw	s0,40(sp)
20404656:	d226                	sw	s1,36(sp)
20404658:	d04a                	sw	s2,32(sp)
2040465a:	c65e                	sw	s7,12(sp)
2040465c:	8aaa                	mv	s5,a0
2040465e:	8a2e                	mv	s4,a1
20404660:	4b05                	li	s6,1
20404662:	1489a483          	lw	s1,328(s3)
20404666:	c881                	beqz	s1,20404676 <__call_exitprocs+0x36>
20404668:	40c0                	lw	s0,4(s1)
2040466a:	fff40913          	addi	s2,s0,-1
2040466e:	040a                	slli	s0,s0,0x2
20404670:	9426                	add	s0,s0,s1
20404672:	00095d63          	bgez	s2,2040468c <__call_exitprocs+0x4c>
20404676:	50b2                	lw	ra,44(sp)
20404678:	5422                	lw	s0,40(sp)
2040467a:	5492                	lw	s1,36(sp)
2040467c:	5902                	lw	s2,32(sp)
2040467e:	49f2                	lw	s3,28(sp)
20404680:	4a62                	lw	s4,24(sp)
20404682:	4ad2                	lw	s5,20(sp)
20404684:	4b42                	lw	s6,16(sp)
20404686:	4bb2                	lw	s7,12(sp)
20404688:	6145                	addi	sp,sp,48
2040468a:	8082                	ret
2040468c:	000a0963          	beqz	s4,2040469e <__call_exitprocs+0x5e>
20404690:	10442783          	lw	a5,260(s0)
20404694:	01478563          	beq	a5,s4,2040469e <__call_exitprocs+0x5e>
20404698:	197d                	addi	s2,s2,-1
2040469a:	1471                	addi	s0,s0,-4
2040469c:	bfd9                	j	20404672 <__call_exitprocs+0x32>
2040469e:	40d8                	lw	a4,4(s1)
204046a0:	405c                	lw	a5,4(s0)
204046a2:	177d                	addi	a4,a4,-1
204046a4:	03271663          	bne	a4,s2,204046d0 <__call_exitprocs+0x90>
204046a8:	0124a223          	sw	s2,4(s1)
204046ac:	d7f5                	beqz	a5,20404698 <__call_exitprocs+0x58>
204046ae:	1884a683          	lw	a3,392(s1)
204046b2:	012b1733          	sll	a4,s6,s2
204046b6:	0044ab83          	lw	s7,4(s1)
204046ba:	8ef9                	and	a3,a3,a4
204046bc:	ee89                	bnez	a3,204046d6 <__call_exitprocs+0x96>
204046be:	9782                	jalr	a5
204046c0:	40dc                	lw	a5,4(s1)
204046c2:	fb7790e3          	bne	a5,s7,20404662 <__call_exitprocs+0x22>
204046c6:	1489a783          	lw	a5,328(s3)
204046ca:	fc9787e3          	beq	a5,s1,20404698 <__call_exitprocs+0x58>
204046ce:	bf51                	j	20404662 <__call_exitprocs+0x22>
204046d0:	00042223          	sw	zero,4(s0)
204046d4:	bfe1                	j	204046ac <__call_exitprocs+0x6c>
204046d6:	18c4a683          	lw	a3,396(s1)
204046da:	08442583          	lw	a1,132(s0)
204046de:	8f75                	and	a4,a4,a3
204046e0:	e701                	bnez	a4,204046e8 <__call_exitprocs+0xa8>
204046e2:	8556                	mv	a0,s5
204046e4:	9782                	jalr	a5
204046e6:	bfe9                	j	204046c0 <__call_exitprocs+0x80>
204046e8:	852e                	mv	a0,a1
204046ea:	9782                	jalr	a5
204046ec:	bfd1                	j	204046c0 <__call_exitprocs+0x80>

204046ee <metal_tty_putc>:
metal_tty_putc():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/tty.c:11

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(unsigned char c)
{
204046ee:	7179                	addi	sp,sp,-48
204046f0:	d606                	sw	ra,44(sp)
204046f2:	d422                	sw	s0,40(sp)
204046f4:	1800                	addi	s0,sp,48
204046f6:	87aa                	mv	a5,a0
204046f8:	fcf40fa3          	sb	a5,-33(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/tty.c:12
    if (c == '\n') {
204046fc:	fdf44703          	lbu	a4,-33(s0)
20404700:	47a9                	li	a5,10
20404702:	02f71063          	bne	a4,a5,20404722 <metal_tty_putc+0x34>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/tty.c:13
        int out = metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, '\r');
20404706:	45b5                	li	a1,13
20404708:	800017b7          	lui	a5,0x80001
2040470c:	ffc78513          	addi	a0,a5,-4 # 80000ffc <metal_segment_heap_target_end+0xffffcffc>
20404710:	3119                	jal	20404316 <metal_uart_putc>
20404712:	fea42623          	sw	a0,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/tty.c:14
        if (out != 0)
20404716:	fec42783          	lw	a5,-20(s0)
2040471a:	c781                	beqz	a5,20404722 <metal_tty_putc+0x34>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/tty.c:15
            return out;
2040471c:	fec42783          	lw	a5,-20(s0)
20404720:	a811                	j	20404734 <metal_tty_putc+0x46>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/tty.c:17
    }
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
20404722:	fdf44783          	lbu	a5,-33(s0)
20404726:	85be                	mv	a1,a5
20404728:	800017b7          	lui	a5,0x80001
2040472c:	ffc78513          	addi	a0,a5,-4 # 80000ffc <metal_segment_heap_target_end+0xffffcffc>
20404730:	36dd                	jal	20404316 <metal_uart_putc>
20404732:	87aa                	mv	a5,a0
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/tty.c:18
}
20404734:	853e                	mv	a0,a5
20404736:	50b2                	lw	ra,44(sp)
20404738:	5422                	lw	s0,40(sp)
2040473a:	6145                	addi	sp,sp,48
2040473c:	8082                	ret

2040473e <metal_tty_init>:
metal_tty_init():
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/tty.c:26
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
2040473e:	1141                	addi	sp,sp,-16
20404740:	c606                	sw	ra,12(sp)
20404742:	c422                	sw	s0,8(sp)
20404744:	0800                	addi	s0,sp,16
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/tty.c:27
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
20404746:	67f1                	lui	a5,0x1c
20404748:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1be00>
2040474c:	800017b7          	lui	a5,0x80001
20404750:	ffc78513          	addi	a0,a5,-4 # 80000ffc <metal_segment_heap_target_end+0xffffcffc>
20404754:	3e61                	jal	204042ec <metal_uart_init>
/scratch/haotianw/freedom-e-sdk/freedom-metal/src/tty.c:28
}
20404756:	0001                	nop
20404758:	40b2                	lw	ra,12(sp)
2040475a:	4422                	lw	s0,8(sp)
2040475c:	0141                	addi	sp,sp,16
2040475e:	8082                	ret

20404760 <_exit>:
_exit():
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
20404760:	1101                	addi	sp,sp,-32
20404762:	ce06                	sw	ra,28(sp)
20404764:	cc22                	sw	s0,24(sp)
20404766:	1000                	addi	s0,sp,32
20404768:	fea42623          	sw	a0,-20(s0)
/scratch/haotianw/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
2040476c:	fec42503          	lw	a0,-20(s0)
20404770:	b6fff0ef          	jal	ra,204042de <metal_shutdown>
